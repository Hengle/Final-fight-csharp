// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ToLog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ToLog {

  /// <summary>Holder for reflection information generated from ToLog.proto</summary>
  public static partial class ToLogReflection {

    #region Descriptor
    /// <summary>File descriptor for ToLog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ToLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtUb0xvZy5wcm90bxIFVG9Mb2ciSgoIV3JpdGVMb2cSGwoFbXNnaWQYASAB",
            "KA4yDC5Ub0xvZy5Nc2dJRBIQCghsb2dfdHlwZRgCIAEoBRIPCgdsb2dfc3Ry",
            "GAMgASgJKkcKBU1zZ0lEEhMKD2VNc2dUb0xvZ19CZWdpbhAAEhYKEmVNc2dU",
            "b0xvZ19Xcml0ZUxvZxABEhEKDWVNc2dUb0xvZ19FbmQQZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ToLog.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ToLog.WriteLog), global::ToLog.WriteLog.Parser, new[]{ "Msgid", "LogType", "LogStr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("eMsgToLog_Begin")] EMsgToLogBegin = 0,
    [pbr::OriginalName("eMsgToLog_WriteLog")] EMsgToLogWriteLog = 1,
    [pbr::OriginalName("eMsgToLog_End")] EMsgToLogEnd = 100,
  }

  #endregion

  #region Messages
  public sealed partial class WriteLog : pb::IMessage<WriteLog> {
    private static readonly pb::MessageParser<WriteLog> _parser = new pb::MessageParser<WriteLog>(() => new WriteLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ToLog.ToLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLog(WriteLog other) : this() {
      msgid_ = other.msgid_;
      logType_ = other.logType_;
      logStr_ = other.logStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLog Clone() {
      return new WriteLog(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::ToLog.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ToLog.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "log_type" field.</summary>
    public const int LogTypeFieldNumber = 2;
    private int logType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "log_str" field.</summary>
    public const int LogStrFieldNumber = 3;
    private string logStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogStr {
      get { return logStr_; }
      set {
        logStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (LogType != other.LogType) return false;
      if (LogStr != other.LogStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (LogType != 0) hash ^= LogType.GetHashCode();
      if (LogStr.Length != 0) hash ^= LogStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (LogType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LogType);
      }
      if (LogStr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (LogType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogType);
      }
      if (LogStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteLog other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.LogType != 0) {
        LogType = other.LogType;
      }
      if (other.LogStr.Length != 0) {
        LogStr = other.LogStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::ToLog.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            LogType = input.ReadInt32();
            break;
          }
          case 26: {
            LogStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
