// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DBToCs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DBToCS {

  /// <summary>Holder for reflection information generated from DBToCs.proto</summary>
  public static partial class DBToCsReflection {

    #region Descriptor
    /// <summary>File descriptor for DBToCs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DBToCsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxEQlRvQ3MucHJvdG8SBkRCVG9DUyKQAgoLQ0RLZXlFdmVudHMSHAoFbWdz",
            "aWQYASABKA4yDS5EQlRvQ1MuTXNnSUQSLAoEaW5mbxgCIAMoCzIeLkRCVG9D",
            "Uy5DREtleUV2ZW50cy5ldmVudF9pbmZvEgwKBG5zaWQYAyABKAUapgEKCmV2",
            "ZW50X2luZm8SCgoCaWQYASABKAUSDQoFdGl0bGUYAiABKAkSEAoIcGxhdGZv",
            "cm0YAyABKAUSEAoIZW5kX3RpbWUYBCABKAQSDwoHY29udGVudBgFIAEoCRIR",
            "CglnaWZ0X3R5cGUYBiABKAUSEQoJaXRlbV9pbmZvGAcgASgJEhAKCGNvZGVf",
            "bnVtGAggASgFEhAKCGNvZGVfbGVuGAkgASgFIrwBCg9RdWVyeUFsbEFjY291",
            "bnQSHAoFbWdzaWQYASABKA4yDS5EQlRvQ1MuTXNnSUQSMAoHYWNjb3VudBgC",
            "IAMoCzIfLkRCVG9DUy5RdWVyeUFsbEFjY291bnQuQWNjb3VudBpZCgdBY2Nv",
            "dW50EhEKCXVzZXJfbmFtZRgBIAEoCRIMCgRjc2lkGAIgASgFEg0KBXNka2lk",
            "GAMgASgFEhAKCG5pY2tuYW1lGAQgASgJEgwKBGd1aWQYBSABKAMiwAEKDE1h",
            "aWxDYWxsQmFjaxIcCgVtZ3NpZBgBIAEoDjINLkRCVG9DUy5Nc2dJRBIOCgZt",
            "YWlsaWQYAiABKAUSEAoIbWFpbHR5cGUYAyABKAUSDwoHY2hhbm5lbBgEIAEo",
            "BRINCgV0aXRsZRgFIAEoCRIPCgdjb250ZW50GAYgASgJEgwKBGdpZnQYByAB",
            "KAkSDgoGc2VuZGVyGAggASgJEhIKCmNyZWF0ZXRpbWUYCSABKAkSDQoFb2Jq",
            "aWQYCiABKAMi+gEKC1F1ZXJ5Tm90aWNlEhwKBW1nc2lkGAEgASgOMg0uREJU",
            "b0NTLk1zZ0lEEi8KC25vdGljZV9pbmZvGAIgAygLMhouREJUb0NTLlF1ZXJ5",
            "Tm90aWNlLk5vdGljZRqbAQoGTm90aWNlEgoKAmlkGAEgASgNEg0KBXRpdGxl",
            "GAIgASgJEg0KBWVmbGFnGAMgASgFEg4KBmVzdGF0ZRgEIAEoBRIQCghwcmlv",
            "cml0eRgFIAEoBRIOCgZub3RpY2UYBiABKAkSEQoJc3Rhcl90aW1lGAcgASgE",
            "EhAKCGVuZF90aW1lGAggASgEEhAKCHBsYXRmb3JtGAkgASgNInYKDkNoYW5n",
            "ZU5pY2tuYW1lEhwKBW1nc2lkGAEgASgOMg0uREJUb0NTLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAQSDgoGcmVmbGFnGAMgASgIEhMKC25ld25pY2tuYW1lGAQgASgJ",
            "EhMKC29sZG5pY2tuYW1lGAUgASgJIj0KCEJ1eUdvb2RzEhwKBW1nc2lkGAEg",
            "ASgOMg0uREJUb0NTLk1zZ0lEEhMKC2J1eWdvb2RzbWFnGAIgASgJIoQBCgxD",
            "aGVja05hbWVSc3ASHAoFbWdzaWQYASABKA4yDS5EQlRvQ1MuTXNnSUQSFAoM",
            "Y29tcGxldGVJbmZvGAIgASgJEgwKBGdzaWQYAyABKAUSDwoHZ2NuZXRpZBgE",
            "IAEoBRIPCgdnc25ldGlkGAUgASgFEhAKCGNoZWNrcmVzGAYgASgFIkQKB0hl",
            "cm9DZmcSEwoLY29tbW9kaXR5aWQYASABKA0SDwoHYnV5dGltZRgCIAEoAxIT",
            "CgtleHBpcmVkdGltZRgDIAEoAyIrCghSdW5lSW5mbxIOCgZiYWdTdHIYASAB",
            "KAkSDwoHc2xvdFN0chgCIAEoCSJxCgZSU2luZm8SEgoKcmVsYXRlZF9pZBgB",
            "IAEoBBIWCg5yZWxhdGVkX2hlYWRlchgCIAEoDRIUCgxyZWxhdGVkX25hbWUY",
            "AyABKAkSEAoIcmVsYXRpb24YBCABKA0SEwoLcmVsYXRlZF92aXAYBSABKA0i",
            "UQoISXRlbUluZm8SDwoHaXRlbV9pZBgBIAEoBRIQCghpdGVtX251bRgCIAEo",
            "DRIQCghidXlfdGltZRgDIAEoBRIQCghlbmRfdGltZRgEIAEoBSIpCghNYWls",
            "SW5mbxIOCgZtYWlsaWQYASABKAUSDQoFc3RhdGUYAiABKAUiyQIKCVF1ZXJ5",
            "VXNlchIcCgVtc2dpZBgBIAEoDjINLkRCVG9DUy5Nc2dJRBIKCgJkYhgCIAEo",
            "CRINCgVsb2dpbhgDIAEoCRIMCgRnc2lkGAQgASgFEg8KB2djbmV0aWQYBSAB",
            "KAUSEAoIbmlja25hbWUYBiABKAkSIAoHaGVyb2NmZxgHIAMoCzIPLkRCVG9D",
            "Uy5IZXJvQ2ZnEiIKCHJ1bmVpbmZvGAggAygLMhAuREJUb0NTLlJ1bmVJbmZv",
            "Eh4KBnJzaW5mbxgJIAMoCzIOLkRCVG9DUy5SU2luZm8SIwoJaXRlbV9pbmZv",
            "GAogAygLMhAuREJUb0NTLkl0ZW1JbmZvEiMKCW1haWxfaW5mbxgLIAMoCzIQ",
            "LkRCVG9DUy5NYWlsSW5mbxIQCghndWlkZXN0chgMIAEoCRIQCgh0YXNrRGF0",
            "YRgNIAEoCSJTCgxRdWVyeUFsbFVzZXISHAoFbXNnaWQYASABKA4yDS5EQlRv",
            "Q1MuTXNnSUQSJQoKc1F1ZXJ5VXNlchgCIAMoCzIRLkRCVG9DUy5RdWVyeVVz",
            "ZXIqjgIKBU1zZ0lEEgoKBnVua25vdxAAEh8KG2VDaGVja05pY2tOYW1lTG9n",
            "aWNDYWxsQmFjaxABEhkKFWVRdWVyeVVzZXJfREJDYWxsQmFjaxACEhUKEWVC",
            "dXlHb29kc0NhbGxCYWNrEAMSHAoYZUNoYW5nZU5pY2tuYW1lX0NhbGxCYWNr",
            "EAQSGQoVZVF1ZXJ5Tm90aWNlX0NhbGxCYWNrEAUSEgoOZU1haWxfQ2FsbEJh",
            "Y2sQBhIdChllUXVlcnlBbGxBY2NvdW50X0NhbGxCYWNrEAcSHgoaZVF1ZXJ5",
            "Q0RLZXlFdmVudHNfQ2FsbEJhY2sQCBIaChZlUXVlcnlBbGxVc2VyX0NhbGxC",
            "YWNrEAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DBToCS.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.CDKeyEvents), global::DBToCS.CDKeyEvents.Parser, new[]{ "Mgsid", "Info", "Nsid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.CDKeyEvents.Types.event_info), global::DBToCS.CDKeyEvents.Types.event_info.Parser, new[]{ "Id", "Title", "Platform", "EndTime", "Content", "GiftType", "ItemInfo", "CodeNum", "CodeLen" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryAllAccount), global::DBToCS.QueryAllAccount.Parser, new[]{ "Mgsid", "Account" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryAllAccount.Types.Account), global::DBToCS.QueryAllAccount.Types.Account.Parser, new[]{ "UserName", "Csid", "Sdkid", "Nickname", "Guid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.MailCallBack), global::DBToCS.MailCallBack.Parser, new[]{ "Mgsid", "Mailid", "Mailtype", "Channel", "Title", "Content", "Gift", "Sender", "Createtime", "Objid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryNotice), global::DBToCS.QueryNotice.Parser, new[]{ "Mgsid", "NoticeInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryNotice.Types.Notice), global::DBToCS.QueryNotice.Types.Notice.Parser, new[]{ "Id", "Title", "Eflag", "Estate", "Priority", "Notice_", "StarTime", "EndTime", "Platform" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.ChangeNickname), global::DBToCS.ChangeNickname.Parser, new[]{ "Mgsid", "Guid", "Reflag", "Newnickname", "Oldnickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.BuyGoods), global::DBToCS.BuyGoods.Parser, new[]{ "Mgsid", "Buygoodsmag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.CheckNameRsp), global::DBToCS.CheckNameRsp.Parser, new[]{ "Mgsid", "CompleteInfo", "Gsid", "Gcnetid", "Gsnetid", "Checkres" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.HeroCfg), global::DBToCS.HeroCfg.Parser, new[]{ "Commodityid", "Buytime", "Expiredtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.RuneInfo), global::DBToCS.RuneInfo.Parser, new[]{ "BagStr", "SlotStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.RSinfo), global::DBToCS.RSinfo.Parser, new[]{ "RelatedId", "RelatedHeader", "RelatedName", "Relation", "RelatedVip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.ItemInfo), global::DBToCS.ItemInfo.Parser, new[]{ "ItemId", "ItemNum", "BuyTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.MailInfo), global::DBToCS.MailInfo.Parser, new[]{ "Mailid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryUser), global::DBToCS.QueryUser.Parser, new[]{ "Msgid", "Db", "Login", "Gsid", "Gcnetid", "Nickname", "Herocfg", "Runeinfo", "Rsinfo", "ItemInfo", "MailInfo", "Guidestr", "TaskData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DBToCS.QueryAllUser), global::DBToCS.QueryAllUser.Parser, new[]{ "Msgid", "SQueryUser" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eCheckNickNameLogicCallBack")] ECheckNickNameLogicCallBack = 1,
    [pbr::OriginalName("eQueryUser_DBCallBack")] EQueryUserDbcallBack = 2,
    [pbr::OriginalName("eBuyGoodsCallBack")] EBuyGoodsCallBack = 3,
    [pbr::OriginalName("eChangeNickname_CallBack")] EChangeNicknameCallBack = 4,
    [pbr::OriginalName("eQueryNotice_CallBack")] EQueryNoticeCallBack = 5,
    [pbr::OriginalName("eMail_CallBack")] EMailCallBack = 6,
    [pbr::OriginalName("eQueryAllAccount_CallBack")] EQueryAllAccountCallBack = 7,
    [pbr::OriginalName("eQueryCDKeyEvents_CallBack")] EQueryCdkeyEventsCallBack = 8,
    [pbr::OriginalName("eQueryAllUser_CallBack")] EQueryAllUserCallBack = 9,
  }

  #endregion

  #region Messages
  public sealed partial class CDKeyEvents : pb::IMessage<CDKeyEvents> {
    private static readonly pb::MessageParser<CDKeyEvents> _parser = new pb::MessageParser<CDKeyEvents>(() => new CDKeyEvents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDKeyEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents(CDKeyEvents other) : this() {
      mgsid_ = other.mgsid_;
      info_ = other.info_.Clone();
      nsid_ = other.nsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents Clone() {
      return new CDKeyEvents(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DBToCS.CDKeyEvents.Types.event_info> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::DBToCS.CDKeyEvents.Types.event_info.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.CDKeyEvents.Types.event_info> info_ = new pbc::RepeatedField<global::DBToCS.CDKeyEvents.Types.event_info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.CDKeyEvents.Types.event_info> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "nsid" field.</summary>
    public const int NsidFieldNumber = 3;
    private int nsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nsid {
      get { return nsid_; }
      set {
        nsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDKeyEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDKeyEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!info_.Equals(other.info_)) return false;
      if (Nsid != other.Nsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (Nsid != 0) hash ^= Nsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (Nsid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Nsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (Nsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDKeyEvents other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      info_.Add(other.info_);
      if (other.Nsid != 0) {
        Nsid = other.Nsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 24: {
            Nsid = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CDKeyEvents message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class event_info : pb::IMessage<event_info> {
        private static readonly pb::MessageParser<event_info> _parser = new pb::MessageParser<event_info>(() => new event_info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<event_info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DBToCS.CDKeyEvents.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_info(event_info other) : this() {
          id_ = other.id_;
          title_ = other.title_;
          platform_ = other.platform_;
          endTime_ = other.endTime_;
          content_ = other.content_;
          giftType_ = other.giftType_;
          itemInfo_ = other.itemInfo_;
          codeNum_ = other.codeNum_;
          codeLen_ = other.codeLen_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public event_info Clone() {
          return new event_info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 3;
        private int platform_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Platform {
          get { return platform_; }
          set {
            platform_ = value;
          }
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 4;
        private ulong endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 5;
        private string content_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "gift_type" field.</summary>
        public const int GiftTypeFieldNumber = 6;
        private int giftType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GiftType {
          get { return giftType_; }
          set {
            giftType_ = value;
          }
        }

        /// <summary>Field number for the "item_info" field.</summary>
        public const int ItemInfoFieldNumber = 7;
        private string itemInfo_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ItemInfo {
          get { return itemInfo_; }
          set {
            itemInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "code_num" field.</summary>
        public const int CodeNumFieldNumber = 8;
        private int codeNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CodeNum {
          get { return codeNum_; }
          set {
            codeNum_ = value;
          }
        }

        /// <summary>Field number for the "code_len" field.</summary>
        public const int CodeLenFieldNumber = 9;
        private int codeLen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CodeLen {
          get { return codeLen_; }
          set {
            codeLen_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as event_info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(event_info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Title != other.Title) return false;
          if (Platform != other.Platform) return false;
          if (EndTime != other.EndTime) return false;
          if (Content != other.Content) return false;
          if (GiftType != other.GiftType) return false;
          if (ItemInfo != other.ItemInfo) return false;
          if (CodeNum != other.CodeNum) return false;
          if (CodeLen != other.CodeLen) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Platform != 0) hash ^= Platform.GetHashCode();
          if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (GiftType != 0) hash ^= GiftType.GetHashCode();
          if (ItemInfo.Length != 0) hash ^= ItemInfo.GetHashCode();
          if (CodeNum != 0) hash ^= CodeNum.GetHashCode();
          if (CodeLen != 0) hash ^= CodeLen.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Title);
          }
          if (Platform != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Platform);
          }
          if (EndTime != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(EndTime);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Content);
          }
          if (GiftType != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(GiftType);
          }
          if (ItemInfo.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(ItemInfo);
          }
          if (CodeNum != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(CodeNum);
          }
          if (CodeLen != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(CodeLen);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Platform != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
          }
          if (EndTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          if (GiftType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftType);
          }
          if (ItemInfo.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemInfo);
          }
          if (CodeNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeNum);
          }
          if (CodeLen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeLen);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(event_info other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Platform != 0) {
            Platform = other.Platform;
          }
          if (other.EndTime != 0UL) {
            EndTime = other.EndTime;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          if (other.GiftType != 0) {
            GiftType = other.GiftType;
          }
          if (other.ItemInfo.Length != 0) {
            ItemInfo = other.ItemInfo;
          }
          if (other.CodeNum != 0) {
            CodeNum = other.CodeNum;
          }
          if (other.CodeLen != 0) {
            CodeLen = other.CodeLen;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Title = input.ReadString();
                break;
              }
              case 24: {
                Platform = input.ReadInt32();
                break;
              }
              case 32: {
                EndTime = input.ReadUInt64();
                break;
              }
              case 42: {
                Content = input.ReadString();
                break;
              }
              case 48: {
                GiftType = input.ReadInt32();
                break;
              }
              case 58: {
                ItemInfo = input.ReadString();
                break;
              }
              case 64: {
                CodeNum = input.ReadInt32();
                break;
              }
              case 72: {
                CodeLen = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class QueryAllAccount : pb::IMessage<QueryAllAccount> {
    private static readonly pb::MessageParser<QueryAllAccount> _parser = new pb::MessageParser<QueryAllAccount>(() => new QueryAllAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryAllAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllAccount(QueryAllAccount other) : this() {
      mgsid_ = other.mgsid_;
      account_ = other.account_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllAccount Clone() {
      return new QueryAllAccount(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DBToCS.QueryAllAccount.Types.Account> _repeated_account_codec
        = pb::FieldCodec.ForMessage(18, global::DBToCS.QueryAllAccount.Types.Account.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.QueryAllAccount.Types.Account> account_ = new pbc::RepeatedField<global::DBToCS.QueryAllAccount.Types.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.QueryAllAccount.Types.Account> Account {
      get { return account_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryAllAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryAllAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!account_.Equals(other.account_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= account_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      account_.WriteTo(output, _repeated_account_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += account_.CalculateSize(_repeated_account_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryAllAccount other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      account_.Add(other.account_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            account_.AddEntriesFrom(input, _repeated_account_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QueryAllAccount message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Account : pb::IMessage<Account> {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DBToCS.QueryAllAccount.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account(Account other) : this() {
          userName_ = other.userName_;
          csid_ = other.csid_;
          sdkid_ = other.sdkid_;
          nickname_ = other.nickname_;
          guid_ = other.guid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account Clone() {
          return new Account(this);
        }

        /// <summary>Field number for the "user_name" field.</summary>
        public const int UserNameFieldNumber = 1;
        private string userName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserName {
          get { return userName_; }
          set {
            userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "csid" field.</summary>
        public const int CsidFieldNumber = 2;
        private int csid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Csid {
          get { return csid_; }
          set {
            csid_ = value;
          }
        }

        /// <summary>Field number for the "sdkid" field.</summary>
        public const int SdkidFieldNumber = 3;
        private int sdkid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Sdkid {
          get { return sdkid_; }
          set {
            sdkid_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 4;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 5;
        private long guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Account);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Account other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserName != other.UserName) return false;
          if (Csid != other.Csid) return false;
          if (Sdkid != other.Sdkid) return false;
          if (Nickname != other.Nickname) return false;
          if (Guid != other.Guid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserName.Length != 0) hash ^= UserName.GetHashCode();
          if (Csid != 0) hash ^= Csid.GetHashCode();
          if (Sdkid != 0) hash ^= Sdkid.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Guid != 0L) hash ^= Guid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UserName);
          }
          if (Csid != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Csid);
          }
          if (Sdkid != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Sdkid);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Nickname);
          }
          if (Guid != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(Guid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
          }
          if (Csid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Csid);
          }
          if (Sdkid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sdkid);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Guid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Account other) {
          if (other == null) {
            return;
          }
          if (other.UserName.Length != 0) {
            UserName = other.UserName;
          }
          if (other.Csid != 0) {
            Csid = other.Csid;
          }
          if (other.Sdkid != 0) {
            Sdkid = other.Sdkid;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Guid != 0L) {
            Guid = other.Guid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UserName = input.ReadString();
                break;
              }
              case 16: {
                Csid = input.ReadInt32();
                break;
              }
              case 24: {
                Sdkid = input.ReadInt32();
                break;
              }
              case 34: {
                Nickname = input.ReadString();
                break;
              }
              case 40: {
                Guid = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MailCallBack : pb::IMessage<MailCallBack> {
    private static readonly pb::MessageParser<MailCallBack> _parser = new pb::MessageParser<MailCallBack>(() => new MailCallBack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailCallBack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailCallBack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailCallBack(MailCallBack other) : this() {
      mgsid_ = other.mgsid_;
      mailid_ = other.mailid_;
      mailtype_ = other.mailtype_;
      channel_ = other.channel_;
      title_ = other.title_;
      content_ = other.content_;
      gift_ = other.gift_;
      sender_ = other.sender_;
      createtime_ = other.createtime_;
      objid_ = other.objid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailCallBack Clone() {
      return new MailCallBack(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "mailtype" field.</summary>
    public const int MailtypeFieldNumber = 3;
    private int mailtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailtype {
      get { return mailtype_; }
      set {
        mailtype_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 7;
    private string gift_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gift {
      get { return gift_; }
      set {
        gift_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 8;
    private string sender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createtime" field.</summary>
    public const int CreatetimeFieldNumber = 9;
    private string createtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Createtime {
      get { return createtime_; }
      set {
        createtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 10;
    private long objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailCallBack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailCallBack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Mailid != other.Mailid) return false;
      if (Mailtype != other.Mailtype) return false;
      if (Channel != other.Channel) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Gift != other.Gift) return false;
      if (Sender != other.Sender) return false;
      if (Createtime != other.Createtime) return false;
      if (Objid != other.Objid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (Mailtype != 0) hash ^= Mailtype.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Gift.Length != 0) hash ^= Gift.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Createtime.Length != 0) hash ^= Createtime.GetHashCode();
      if (Objid != 0L) hash ^= Objid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Mailid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mailid);
      }
      if (Mailtype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mailtype);
      }
      if (Channel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Channel);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (Gift.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Gift);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Sender);
      }
      if (Createtime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Createtime);
      }
      if (Objid != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Objid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (Mailtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailtype);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Gift.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gift);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Createtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Createtime);
      }
      if (Objid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Objid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailCallBack other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.Mailtype != 0) {
        Mailtype = other.Mailtype;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Gift.Length != 0) {
        Gift = other.Gift;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Createtime.Length != 0) {
        Createtime = other.Createtime;
      }
      if (other.Objid != 0L) {
        Objid = other.Objid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mailid = input.ReadInt32();
            break;
          }
          case 24: {
            Mailtype = input.ReadInt32();
            break;
          }
          case 32: {
            Channel = input.ReadInt32();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 58: {
            Gift = input.ReadString();
            break;
          }
          case 66: {
            Sender = input.ReadString();
            break;
          }
          case 74: {
            Createtime = input.ReadString();
            break;
          }
          case 80: {
            Objid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryNotice : pb::IMessage<QueryNotice> {
    private static readonly pb::MessageParser<QueryNotice> _parser = new pb::MessageParser<QueryNotice>(() => new QueryNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice(QueryNotice other) : this() {
      mgsid_ = other.mgsid_;
      noticeInfo_ = other.noticeInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice Clone() {
      return new QueryNotice(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "notice_info" field.</summary>
    public const int NoticeInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DBToCS.QueryNotice.Types.Notice> _repeated_noticeInfo_codec
        = pb::FieldCodec.ForMessage(18, global::DBToCS.QueryNotice.Types.Notice.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.QueryNotice.Types.Notice> noticeInfo_ = new pbc::RepeatedField<global::DBToCS.QueryNotice.Types.Notice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.QueryNotice.Types.Notice> NoticeInfo {
      get { return noticeInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!noticeInfo_.Equals(other.noticeInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= noticeInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      noticeInfo_.WriteTo(output, _repeated_noticeInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += noticeInfo_.CalculateSize(_repeated_noticeInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryNotice other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      noticeInfo_.Add(other.noticeInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            noticeInfo_.AddEntriesFrom(input, _repeated_noticeInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QueryNotice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Notice : pb::IMessage<Notice> {
        private static readonly pb::MessageParser<Notice> _parser = new pb::MessageParser<Notice>(() => new Notice());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Notice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DBToCS.QueryNotice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice(Notice other) : this() {
          id_ = other.id_;
          title_ = other.title_;
          eflag_ = other.eflag_;
          estate_ = other.estate_;
          priority_ = other.priority_;
          notice_ = other.notice_;
          starTime_ = other.starTime_;
          endTime_ = other.endTime_;
          platform_ = other.platform_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice Clone() {
          return new Notice(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "eflag" field.</summary>
        public const int EflagFieldNumber = 3;
        private int eflag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Eflag {
          get { return eflag_; }
          set {
            eflag_ = value;
          }
        }

        /// <summary>Field number for the "estate" field.</summary>
        public const int EstateFieldNumber = 4;
        private int estate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Estate {
          get { return estate_; }
          set {
            estate_ = value;
          }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 5;
        private int priority_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Priority {
          get { return priority_; }
          set {
            priority_ = value;
          }
        }

        /// <summary>Field number for the "notice" field.</summary>
        public const int Notice_FieldNumber = 6;
        private string notice_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Notice_ {
          get { return notice_; }
          set {
            notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "star_time" field.</summary>
        public const int StarTimeFieldNumber = 7;
        private ulong starTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong StarTime {
          get { return starTime_; }
          set {
            starTime_ = value;
          }
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 8;
        private ulong endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 9;
        private uint platform_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Platform {
          get { return platform_; }
          set {
            platform_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Notice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Notice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Title != other.Title) return false;
          if (Eflag != other.Eflag) return false;
          if (Estate != other.Estate) return false;
          if (Priority != other.Priority) return false;
          if (Notice_ != other.Notice_) return false;
          if (StarTime != other.StarTime) return false;
          if (EndTime != other.EndTime) return false;
          if (Platform != other.Platform) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Eflag != 0) hash ^= Eflag.GetHashCode();
          if (Estate != 0) hash ^= Estate.GetHashCode();
          if (Priority != 0) hash ^= Priority.GetHashCode();
          if (Notice_.Length != 0) hash ^= Notice_.GetHashCode();
          if (StarTime != 0UL) hash ^= StarTime.GetHashCode();
          if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
          if (Platform != 0) hash ^= Platform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Title);
          }
          if (Eflag != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Eflag);
          }
          if (Estate != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Estate);
          }
          if (Priority != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Priority);
          }
          if (Notice_.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Notice_);
          }
          if (StarTime != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(StarTime);
          }
          if (EndTime != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(EndTime);
          }
          if (Platform != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Platform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Eflag != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eflag);
          }
          if (Estate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Estate);
          }
          if (Priority != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
          }
          if (Notice_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice_);
          }
          if (StarTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StarTime);
          }
          if (EndTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
          }
          if (Platform != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Platform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Notice other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Eflag != 0) {
            Eflag = other.Eflag;
          }
          if (other.Estate != 0) {
            Estate = other.Estate;
          }
          if (other.Priority != 0) {
            Priority = other.Priority;
          }
          if (other.Notice_.Length != 0) {
            Notice_ = other.Notice_;
          }
          if (other.StarTime != 0UL) {
            StarTime = other.StarTime;
          }
          if (other.EndTime != 0UL) {
            EndTime = other.EndTime;
          }
          if (other.Platform != 0) {
            Platform = other.Platform;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Title = input.ReadString();
                break;
              }
              case 24: {
                Eflag = input.ReadInt32();
                break;
              }
              case 32: {
                Estate = input.ReadInt32();
                break;
              }
              case 40: {
                Priority = input.ReadInt32();
                break;
              }
              case 50: {
                Notice_ = input.ReadString();
                break;
              }
              case 56: {
                StarTime = input.ReadUInt64();
                break;
              }
              case 64: {
                EndTime = input.ReadUInt64();
                break;
              }
              case 72: {
                Platform = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ChangeNickname : pb::IMessage<ChangeNickname> {
    private static readonly pb::MessageParser<ChangeNickname> _parser = new pb::MessageParser<ChangeNickname>(() => new ChangeNickname());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNickname> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickname() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickname(ChangeNickname other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      reflag_ = other.reflag_;
      newnickname_ = other.newnickname_;
      oldnickname_ = other.oldnickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickname Clone() {
      return new ChangeNickname(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "reflag" field.</summary>
    public const int ReflagFieldNumber = 3;
    private bool reflag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reflag {
      get { return reflag_; }
      set {
        reflag_ = value;
      }
    }

    /// <summary>Field number for the "newnickname" field.</summary>
    public const int NewnicknameFieldNumber = 4;
    private string newnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newnickname {
      get { return newnickname_; }
      set {
        newnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oldnickname" field.</summary>
    public const int OldnicknameFieldNumber = 5;
    private string oldnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oldnickname {
      get { return oldnickname_; }
      set {
        oldnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNickname);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNickname other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Reflag != other.Reflag) return false;
      if (Newnickname != other.Newnickname) return false;
      if (Oldnickname != other.Oldnickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Reflag != false) hash ^= Reflag.GetHashCode();
      if (Newnickname.Length != 0) hash ^= Newnickname.GetHashCode();
      if (Oldnickname.Length != 0) hash ^= Oldnickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Reflag != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reflag);
      }
      if (Newnickname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Newnickname);
      }
      if (Oldnickname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Oldnickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Reflag != false) {
        size += 1 + 1;
      }
      if (Newnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newnickname);
      }
      if (Oldnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oldnickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNickname other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Reflag != false) {
        Reflag = other.Reflag;
      }
      if (other.Newnickname.Length != 0) {
        Newnickname = other.Newnickname;
      }
      if (other.Oldnickname.Length != 0) {
        Oldnickname = other.Oldnickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Reflag = input.ReadBool();
            break;
          }
          case 34: {
            Newnickname = input.ReadString();
            break;
          }
          case 42: {
            Oldnickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyGoods : pb::IMessage<BuyGoods> {
    private static readonly pb::MessageParser<BuyGoods> _parser = new pb::MessageParser<BuyGoods>(() => new BuyGoods());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyGoods> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods(BuyGoods other) : this() {
      mgsid_ = other.mgsid_;
      buygoodsmag_ = other.buygoodsmag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods Clone() {
      return new BuyGoods(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "buygoodsmag" field.</summary>
    public const int BuygoodsmagFieldNumber = 2;
    private string buygoodsmag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Buygoodsmag {
      get { return buygoodsmag_; }
      set {
        buygoodsmag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyGoods);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyGoods other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Buygoodsmag != other.Buygoodsmag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Buygoodsmag.Length != 0) hash ^= Buygoodsmag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Buygoodsmag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Buygoodsmag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Buygoodsmag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Buygoodsmag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyGoods other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Buygoodsmag.Length != 0) {
        Buygoodsmag = other.Buygoodsmag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Buygoodsmag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckNameRsp : pb::IMessage<CheckNameRsp> {
    private static readonly pb::MessageParser<CheckNameRsp> _parser = new pb::MessageParser<CheckNameRsp>(() => new CheckNameRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckNameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameRsp(CheckNameRsp other) : this() {
      mgsid_ = other.mgsid_;
      completeInfo_ = other.completeInfo_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      gsnetid_ = other.gsnetid_;
      checkres_ = other.checkres_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameRsp Clone() {
      return new CheckNameRsp(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::DBToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "completeInfo" field.</summary>
    public const int CompleteInfoFieldNumber = 2;
    private string completeInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompleteInfo {
      get { return completeInfo_; }
      set {
        completeInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 3;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 4;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "gsnetid" field.</summary>
    public const int GsnetidFieldNumber = 5;
    private int gsnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsnetid {
      get { return gsnetid_; }
      set {
        gsnetid_ = value;
      }
    }

    /// <summary>Field number for the "checkres" field.</summary>
    public const int CheckresFieldNumber = 6;
    private int checkres_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Checkres {
      get { return checkres_; }
      set {
        checkres_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckNameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckNameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (CompleteInfo != other.CompleteInfo) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Gsnetid != other.Gsnetid) return false;
      if (Checkres != other.Checkres) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (CompleteInfo.Length != 0) hash ^= CompleteInfo.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Gsnetid != 0) hash ^= Gsnetid.GetHashCode();
      if (Checkres != 0) hash ^= Checkres.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (CompleteInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompleteInfo);
      }
      if (Gsid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gcnetid);
      }
      if (Gsnetid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gsnetid);
      }
      if (Checkres != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Checkres);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (CompleteInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteInfo);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Gsnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsnetid);
      }
      if (Checkres != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Checkres);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckNameRsp other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.CompleteInfo.Length != 0) {
        CompleteInfo = other.CompleteInfo;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Gsnetid != 0) {
        Gsnetid = other.Gsnetid;
      }
      if (other.Checkres != 0) {
        Checkres = other.Checkres;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            CompleteInfo = input.ReadString();
            break;
          }
          case 24: {
            Gsid = input.ReadInt32();
            break;
          }
          case 32: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 40: {
            Gsnetid = input.ReadInt32();
            break;
          }
          case 48: {
            Checkres = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroCfg : pb::IMessage<HeroCfg> {
    private static readonly pb::MessageParser<HeroCfg> _parser = new pb::MessageParser<HeroCfg>(() => new HeroCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCfg(HeroCfg other) : this() {
      commodityid_ = other.commodityid_;
      buytime_ = other.buytime_;
      expiredtime_ = other.expiredtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCfg Clone() {
      return new HeroCfg(this);
    }

    /// <summary>Field number for the "commodityid" field.</summary>
    public const int CommodityidFieldNumber = 1;
    private uint commodityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Commodityid {
      get { return commodityid_; }
      set {
        commodityid_ = value;
      }
    }

    /// <summary>Field number for the "buytime" field.</summary>
    public const int BuytimeFieldNumber = 2;
    private long buytime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Buytime {
      get { return buytime_; }
      set {
        buytime_ = value;
      }
    }

    /// <summary>Field number for the "expiredtime" field.</summary>
    public const int ExpiredtimeFieldNumber = 3;
    private long expiredtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiredtime {
      get { return expiredtime_; }
      set {
        expiredtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Commodityid != other.Commodityid) return false;
      if (Buytime != other.Buytime) return false;
      if (Expiredtime != other.Expiredtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Commodityid != 0) hash ^= Commodityid.GetHashCode();
      if (Buytime != 0L) hash ^= Buytime.GetHashCode();
      if (Expiredtime != 0L) hash ^= Expiredtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Commodityid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Commodityid);
      }
      if (Buytime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Buytime);
      }
      if (Expiredtime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Expiredtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Commodityid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Commodityid);
      }
      if (Buytime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Buytime);
      }
      if (Expiredtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiredtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroCfg other) {
      if (other == null) {
        return;
      }
      if (other.Commodityid != 0) {
        Commodityid = other.Commodityid;
      }
      if (other.Buytime != 0L) {
        Buytime = other.Buytime;
      }
      if (other.Expiredtime != 0L) {
        Expiredtime = other.Expiredtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Commodityid = input.ReadUInt32();
            break;
          }
          case 16: {
            Buytime = input.ReadInt64();
            break;
          }
          case 24: {
            Expiredtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuneInfo : pb::IMessage<RuneInfo> {
    private static readonly pb::MessageParser<RuneInfo> _parser = new pb::MessageParser<RuneInfo>(() => new RuneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuneInfo(RuneInfo other) : this() {
      bagStr_ = other.bagStr_;
      slotStr_ = other.slotStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuneInfo Clone() {
      return new RuneInfo(this);
    }

    /// <summary>Field number for the "bagStr" field.</summary>
    public const int BagStrFieldNumber = 1;
    private string bagStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BagStr {
      get { return bagStr_; }
      set {
        bagStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slotStr" field.</summary>
    public const int SlotStrFieldNumber = 2;
    private string slotStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlotStr {
      get { return slotStr_; }
      set {
        slotStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BagStr != other.BagStr) return false;
      if (SlotStr != other.SlotStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BagStr.Length != 0) hash ^= BagStr.GetHashCode();
      if (SlotStr.Length != 0) hash ^= SlotStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BagStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BagStr);
      }
      if (SlotStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SlotStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BagStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BagStr);
      }
      if (SlotStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlotStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuneInfo other) {
      if (other == null) {
        return;
      }
      if (other.BagStr.Length != 0) {
        BagStr = other.BagStr;
      }
      if (other.SlotStr.Length != 0) {
        SlotStr = other.SlotStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BagStr = input.ReadString();
            break;
          }
          case 18: {
            SlotStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RSinfo : pb::IMessage<RSinfo> {
    private static readonly pb::MessageParser<RSinfo> _parser = new pb::MessageParser<RSinfo>(() => new RSinfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RSinfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSinfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSinfo(RSinfo other) : this() {
      relatedId_ = other.relatedId_;
      relatedHeader_ = other.relatedHeader_;
      relatedName_ = other.relatedName_;
      relation_ = other.relation_;
      relatedVip_ = other.relatedVip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RSinfo Clone() {
      return new RSinfo(this);
    }

    /// <summary>Field number for the "related_id" field.</summary>
    public const int RelatedIdFieldNumber = 1;
    private ulong relatedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RelatedId {
      get { return relatedId_; }
      set {
        relatedId_ = value;
      }
    }

    /// <summary>Field number for the "related_header" field.</summary>
    public const int RelatedHeaderFieldNumber = 2;
    private uint relatedHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RelatedHeader {
      get { return relatedHeader_; }
      set {
        relatedHeader_ = value;
      }
    }

    /// <summary>Field number for the "related_name" field.</summary>
    public const int RelatedNameFieldNumber = 3;
    private string relatedName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RelatedName {
      get { return relatedName_; }
      set {
        relatedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 4;
    private uint relation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    /// <summary>Field number for the "related_vip" field.</summary>
    public const int RelatedVipFieldNumber = 5;
    private uint relatedVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RelatedVip {
      get { return relatedVip_; }
      set {
        relatedVip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RSinfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RSinfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelatedId != other.RelatedId) return false;
      if (RelatedHeader != other.RelatedHeader) return false;
      if (RelatedName != other.RelatedName) return false;
      if (Relation != other.Relation) return false;
      if (RelatedVip != other.RelatedVip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelatedId != 0UL) hash ^= RelatedId.GetHashCode();
      if (RelatedHeader != 0) hash ^= RelatedHeader.GetHashCode();
      if (RelatedName.Length != 0) hash ^= RelatedName.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      if (RelatedVip != 0) hash ^= RelatedVip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RelatedId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RelatedId);
      }
      if (RelatedHeader != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RelatedHeader);
      }
      if (RelatedName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RelatedName);
      }
      if (Relation != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Relation);
      }
      if (RelatedVip != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RelatedVip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelatedId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RelatedId);
      }
      if (RelatedHeader != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelatedHeader);
      }
      if (RelatedName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RelatedName);
      }
      if (Relation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Relation);
      }
      if (RelatedVip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelatedVip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RSinfo other) {
      if (other == null) {
        return;
      }
      if (other.RelatedId != 0UL) {
        RelatedId = other.RelatedId;
      }
      if (other.RelatedHeader != 0) {
        RelatedHeader = other.RelatedHeader;
      }
      if (other.RelatedName.Length != 0) {
        RelatedName = other.RelatedName;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
      if (other.RelatedVip != 0) {
        RelatedVip = other.RelatedVip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RelatedId = input.ReadUInt64();
            break;
          }
          case 16: {
            RelatedHeader = input.ReadUInt32();
            break;
          }
          case 26: {
            RelatedName = input.ReadString();
            break;
          }
          case 32: {
            Relation = input.ReadUInt32();
            break;
          }
          case 40: {
            RelatedVip = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      buyTime_ = other.buyTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_num" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private uint itemNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "buy_time" field.</summary>
    public const int BuyTimeFieldNumber = 3;
    private int buyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTime {
      get { return buyTime_; }
      set {
        buyTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (BuyTime != other.BuyTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (BuyTime != 0) hash ^= BuyTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemNum);
      }
      if (BuyTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      if (BuyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.BuyTime != 0) {
        BuyTime = other.BuyTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadUInt32();
            break;
          }
          case 24: {
            BuyTime = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailInfo : pb::IMessage<MailInfo> {
    private static readonly pb::MessageParser<MailInfo> _parser = new pb::MessageParser<MailInfo>(() => new MailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo(MailInfo other) : this() {
      mailid_ = other.mailid_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo Clone() {
      return new MailInfo(this);
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 1;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mailid != other.Mailid) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mailid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mailid);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mailid = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryUser : pb::IMessage<QueryUser> {
    private static readonly pb::MessageParser<QueryUser> _parser = new pb::MessageParser<QueryUser>(() => new QueryUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUser(QueryUser other) : this() {
      msgid_ = other.msgid_;
      db_ = other.db_;
      login_ = other.login_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      nickname_ = other.nickname_;
      herocfg_ = other.herocfg_.Clone();
      runeinfo_ = other.runeinfo_.Clone();
      rsinfo_ = other.rsinfo_.Clone();
      itemInfo_ = other.itemInfo_.Clone();
      mailInfo_ = other.mailInfo_.Clone();
      guidestr_ = other.guidestr_;
      taskData_ = other.taskData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUser Clone() {
      return new QueryUser(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::DBToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "db" field.</summary>
    public const int DbFieldNumber = 2;
    private string db_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Db {
      get { return db_; }
      set {
        db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 3;
    private string login_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Login {
      get { return login_; }
      set {
        login_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 4;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 5;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 6;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "herocfg" field.</summary>
    public const int HerocfgFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DBToCS.HeroCfg> _repeated_herocfg_codec
        = pb::FieldCodec.ForMessage(58, global::DBToCS.HeroCfg.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.HeroCfg> herocfg_ = new pbc::RepeatedField<global::DBToCS.HeroCfg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.HeroCfg> Herocfg {
      get { return herocfg_; }
    }

    /// <summary>Field number for the "runeinfo" field.</summary>
    public const int RuneinfoFieldNumber = 8;
    private static readonly pb::FieldCodec<global::DBToCS.RuneInfo> _repeated_runeinfo_codec
        = pb::FieldCodec.ForMessage(66, global::DBToCS.RuneInfo.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.RuneInfo> runeinfo_ = new pbc::RepeatedField<global::DBToCS.RuneInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.RuneInfo> Runeinfo {
      get { return runeinfo_; }
    }

    /// <summary>Field number for the "rsinfo" field.</summary>
    public const int RsinfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::DBToCS.RSinfo> _repeated_rsinfo_codec
        = pb::FieldCodec.ForMessage(74, global::DBToCS.RSinfo.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.RSinfo> rsinfo_ = new pbc::RepeatedField<global::DBToCS.RSinfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.RSinfo> Rsinfo {
      get { return rsinfo_; }
    }

    /// <summary>Field number for the "item_info" field.</summary>
    public const int ItemInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::DBToCS.ItemInfo> _repeated_itemInfo_codec
        = pb::FieldCodec.ForMessage(82, global::DBToCS.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.ItemInfo> itemInfo_ = new pbc::RepeatedField<global::DBToCS.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.ItemInfo> ItemInfo {
      get { return itemInfo_; }
    }

    /// <summary>Field number for the "mail_info" field.</summary>
    public const int MailInfoFieldNumber = 11;
    private static readonly pb::FieldCodec<global::DBToCS.MailInfo> _repeated_mailInfo_codec
        = pb::FieldCodec.ForMessage(90, global::DBToCS.MailInfo.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.MailInfo> mailInfo_ = new pbc::RepeatedField<global::DBToCS.MailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.MailInfo> MailInfo {
      get { return mailInfo_; }
    }

    /// <summary>Field number for the "guidestr" field.</summary>
    public const int GuidestrFieldNumber = 12;
    private string guidestr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guidestr {
      get { return guidestr_; }
      set {
        guidestr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskData" field.</summary>
    public const int TaskDataFieldNumber = 13;
    private string taskData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskData {
      get { return taskData_; }
      set {
        taskData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Db != other.Db) return false;
      if (Login != other.Login) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Nickname != other.Nickname) return false;
      if(!herocfg_.Equals(other.herocfg_)) return false;
      if(!runeinfo_.Equals(other.runeinfo_)) return false;
      if(!rsinfo_.Equals(other.rsinfo_)) return false;
      if(!itemInfo_.Equals(other.itemInfo_)) return false;
      if(!mailInfo_.Equals(other.mailInfo_)) return false;
      if (Guidestr != other.Guidestr) return false;
      if (TaskData != other.TaskData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Db.Length != 0) hash ^= Db.GetHashCode();
      if (Login.Length != 0) hash ^= Login.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      hash ^= herocfg_.GetHashCode();
      hash ^= runeinfo_.GetHashCode();
      hash ^= rsinfo_.GetHashCode();
      hash ^= itemInfo_.GetHashCode();
      hash ^= mailInfo_.GetHashCode();
      if (Guidestr.Length != 0) hash ^= Guidestr.GetHashCode();
      if (TaskData.Length != 0) hash ^= TaskData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Db.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Db);
      }
      if (Login.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Login);
      }
      if (Gsid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gcnetid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Nickname);
      }
      herocfg_.WriteTo(output, _repeated_herocfg_codec);
      runeinfo_.WriteTo(output, _repeated_runeinfo_codec);
      rsinfo_.WriteTo(output, _repeated_rsinfo_codec);
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
      mailInfo_.WriteTo(output, _repeated_mailInfo_codec);
      if (Guidestr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Guidestr);
      }
      if (TaskData.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TaskData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Db.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
      }
      if (Login.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Login);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      size += herocfg_.CalculateSize(_repeated_herocfg_codec);
      size += runeinfo_.CalculateSize(_repeated_runeinfo_codec);
      size += rsinfo_.CalculateSize(_repeated_rsinfo_codec);
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      size += mailInfo_.CalculateSize(_repeated_mailInfo_codec);
      if (Guidestr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guidestr);
      }
      if (TaskData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUser other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Db.Length != 0) {
        Db = other.Db;
      }
      if (other.Login.Length != 0) {
        Login = other.Login;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      herocfg_.Add(other.herocfg_);
      runeinfo_.Add(other.runeinfo_);
      rsinfo_.Add(other.rsinfo_);
      itemInfo_.Add(other.itemInfo_);
      mailInfo_.Add(other.mailInfo_);
      if (other.Guidestr.Length != 0) {
        Guidestr = other.Guidestr;
      }
      if (other.TaskData.Length != 0) {
        TaskData = other.TaskData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Db = input.ReadString();
            break;
          }
          case 26: {
            Login = input.ReadString();
            break;
          }
          case 32: {
            Gsid = input.ReadInt32();
            break;
          }
          case 40: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 50: {
            Nickname = input.ReadString();
            break;
          }
          case 58: {
            herocfg_.AddEntriesFrom(input, _repeated_herocfg_codec);
            break;
          }
          case 66: {
            runeinfo_.AddEntriesFrom(input, _repeated_runeinfo_codec);
            break;
          }
          case 74: {
            rsinfo_.AddEntriesFrom(input, _repeated_rsinfo_codec);
            break;
          }
          case 82: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
          case 90: {
            mailInfo_.AddEntriesFrom(input, _repeated_mailInfo_codec);
            break;
          }
          case 98: {
            Guidestr = input.ReadString();
            break;
          }
          case 106: {
            TaskData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryAllUser : pb::IMessage<QueryAllUser> {
    private static readonly pb::MessageParser<QueryAllUser> _parser = new pb::MessageParser<QueryAllUser>(() => new QueryAllUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryAllUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DBToCS.DBToCsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllUser(QueryAllUser other) : this() {
      msgid_ = other.msgid_;
      sQueryUser_ = other.sQueryUser_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryAllUser Clone() {
      return new QueryAllUser(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::DBToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DBToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "sQueryUser" field.</summary>
    public const int SQueryUserFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DBToCS.QueryUser> _repeated_sQueryUser_codec
        = pb::FieldCodec.ForMessage(18, global::DBToCS.QueryUser.Parser);
    private readonly pbc::RepeatedField<global::DBToCS.QueryUser> sQueryUser_ = new pbc::RepeatedField<global::DBToCS.QueryUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DBToCS.QueryUser> SQueryUser {
      get { return sQueryUser_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryAllUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryAllUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!sQueryUser_.Equals(other.sQueryUser_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= sQueryUser_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      sQueryUser_.WriteTo(output, _repeated_sQueryUser_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += sQueryUser_.CalculateSize(_repeated_sQueryUser_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryAllUser other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      sQueryUser_.Add(other.sQueryUser_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::DBToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            sQueryUser_.AddEntriesFrom(input, _repeated_sQueryUser_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
