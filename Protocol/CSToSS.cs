// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CSToSS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CSToSS {

  /// <summary>Holder for reflection information generated from CSToSS.proto</summary>
  public static partial class CSToSSReflection {

    #region Descriptor
    /// <summary>File descriptor for CSToSS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CSToSSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDU1RvU1MucHJvdG8SBkNTVG9TUyKwAQoQU1NHYW1lRnVuY1N3aXRjaBIc",
            "CgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBIRCglsb2dfd2l0Y2gYAiAB",
            "KA0SEAoIZ21fd2l0Y2gYAyABKA0SEwoLc29sZGVyd2l0Y2gYBCABKA0SFAoM",
            "bW9uc3RlcndpdGNoGAUgASgNEhgKEGFsdGFyc29sZGVyd2l0Y2gYBiABKA0S",
            "FAoMbG9ncmVmc2h0aW1lGAcgASgNIlYKFk5vdGlmeVNTR3VpZGVCYXR0bGVF",
            "bmQSHAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSEAoIYmF0dGxlaWQY",
            "AiABKAQSDAoEZ3VpZBgDIAEoBCJPCgtSZXBvcnRTU01zZxIcCgVtc2dpZBgB",
            "IAEoDjINLkNTVG9TUy5Nc2dJZBIQCghiYXR0bGVpZBgCIAEoBBIQCghvdGhl",
            "cm1zZxgDIAEoCSKxAQoNQXNrUmVnaXN0ZVJldBIcCgVtc2dpZBgBIAEoDjIN",
            "LkNTVG9TUy5Nc2dJZBILCgNyZXQYAiABKAUSDAoEdGltZRgDIAEoAxIQCghi",
            "YXNlZ3NpZBgEIAEoBRIsCgZnc2luZm8YBSADKAsyHC5DU1RvU1MuQXNrUmVn",
            "aXN0ZVJldC5HU0luZm8aJwoGR1NJbmZvEgwKBGdzaWQYASABKAUSDwoHdXNl",
            "cnB3ZBgCIAEoCSIyCgxTVXNlck5ldEluZm8SDwoHbjMyR1NJRBgBIAEoBRIR",
            "CgluMzJHQ05TSUQYAiABKAUi7A0KCFVzZXJJbmZvEikKC3VzZXJuZXRpbmZv",
            "GAIgASgLMhQuQ1NUb1NTLlNVc2VyTmV0SW5mbxIuCgh1c2VyZGF0YRgDIAEo",
            "CzIcLkNTVG9TUy5Vc2VySW5mby5TVXNlckRCRGF0YRIQCghoZXJvbGlzdBgE",
            "IAMoBRI4CghSdW5lc0JhZxgFIAMoCzImLkNTVG9TUy5Vc2VySW5mby5TVXNl",
            "clJ1bmVzUnVudGltZURhdGESOQoJUnVuZXNTbG90GAYgAygLMiYuQ1NUb1NT",
            "LlVzZXJJbmZvLlNVc2VyUnVuZXNSdW50aW1lRGF0YRIPCgdpZkd1aWRlGAcg",
            "ASgIGoILCgtTVXNlckRCRGF0YRI6CghlT2JqVHlwZRgBIAEoDjIoLkNTVG9T",
            "Uy5Vc2VySW5mby5TVXNlckRCRGF0YS5FT2JqZWN0VHlwZRISCgp1bjY0T2Jq",
            "SWR4GAIgASgDEjkKCWVVc2VyQ2F0ZRgDIAEoDjImLkNTVG9TUy5Vc2VySW5m",
            "by5TVXNlckRCRGF0YS5FVXNlckNhdGUSQQoNZVVzZXJQbGF0Zm9ybRgEIAEo",
            "DjIqLkNTVG9TUy5Vc2VySW5mby5TVXNlckRCRGF0YS5FVXNlclBsYXRmb3Jt",
            "EhIKCnN6VXNlck5hbWUYBSABKAkSEQoJc3pVc2VyUHdkGAYgASgJEhIKCnN6",
            "Tmlja05hbWUYByABKAkSFAoMdW4zMkhlYWRlcklEGAggASgFEg0KBW44U2V4",
            "GAkgASgFEhAKCG42NFNjb3JlGAogASgDEhIKCm42NERpYW1vbmQYCyABKAMS",
            "DwoHbjY0R29sZBgMIAEoAxIbChN0UmVnaXN0ZVVUQ01pbGxpc2VjGA0gASgD",
            "Eh0KFXRMYXN0TG9naW5VVENNaWxsaXNlYxgOIAEoAxISCgpuMzJIZXJvTnVt",
            "GA8gASgDEhsKE24zMlJ1bmVzU2xvdE9wZW5OdW0YECABKAMSFgoObjMyUnVu",
            "ZXNCYWdOdW0YESABKAUSFwoPbjMyUnVuZXNTbG90TnVtGBIgASgFEhUKDW4z",
            "MkZyaWVuZHNOdW0YEyABKAUSFwoPbjMyQmxhY2tsaXN0TnVtGBQgASgFEhkK",
            "EXVuMzJUb3RhbEdhbWVJbm5zGBUgASgFEhgKEHVuMzJUb3RhbFdpbklubnMY",
            "FiABKAUSGgoSdW4zMlRvdGFsSGVyb0tpbGxzGBcgASgFEiEKGXVuMzJUb3Rh",
            "bERlc3RvcnlCdWlsZGluZ3MYGCABKAUSGgoSdW4zMlRvdGFsRGVhZFRpbWVz",
            "GBkgASgFEhIKCnVuMTZVc2VyTHYYGiABKAUSGAoQdW4zMlVzZXJDdXJMdkV4",
            "cBgbIAEoBRIZChF0TGFzdEZpcnN0V2luVGltZRgcIAEoAxJBCgttR3VpZGVT",
            "dGVwcxgdIAEoCzIsLkNTVG9TUy5Vc2VySW5mby5TVXNlckRCRGF0YS5TVXNl",
            "ckd1aWRlU3RlcHMSEQoJc3pGcmllbmRzGB4gASgJGl0KD1NVc2VyR3VpZGVT",
            "dGVwcxIZChFzekNTQ29udGludWVHdWlkZRgBIAEoCRIbChNzekNTTm9Db250",
            "aW51ZUd1aWRlGAIgASgJEhIKCnN6U1NHdWlkZXMYAyABKAkipgEKC0VPYmpl",
            "Y3RUeXBlEhQKEGVPYmplY3RUeXBlX05vbmUQABIVChFlT2JqZWN0VHlwZV9H",
            "dWlsZBABEhQKEGVPYmplY3RUeXBlX1VzZXIQAhIaChVlT2JqZWN0VHlwZV9I",
            "ZXJvQmVnaW4QkE4SGgoUZU9iamVjdFR5cGVfTlBDQmVnaW4QoJwBEhwKFmVP",
            "YmplY3RUeXBlX0dvb2RzQmVnaW4QsOoBIsEBCglFVXNlckNhdGUSEwoPZVVz",
            "ZXJDYXRlX0FkbWluEAASEAoMZVVzZXJDYXRlX0dNEAESEwoPZVVzZXJDYXRl",
            "X1JvYm90EAISGAoUZVVzZXJDYXRlX0RpYW1vbmRWSVAQAxIWChJlVXNlckNh",
            "dGVfR2xvbGRWSVAQBBIXChNlVXNlckNhdGVfU2lsdmVyVklQEAUSFwoTZVVz",
            "ZXJDYXRlX0NvcHBlclZJUBAGEhQKEGVVc2VyQ2F0ZV9Ob3JtYWwQByJFCg1F",
            "VXNlclBsYXRmb3JtEgwKCGVVUF9Ob25lEAASDQoJZVVQX0FwcGxlEAESCgoG",
            "ZVVQX1FREAISCwoHZVVQXzM2MBADGmgKFVNVc2VyUnVuZXNSdW50aW1lRGF0",
            "YRIXCg91bjMyUnVuZXNUeXBlSUQYASABKAUSDgoGbjE2UG9zGAIgASgFEg4K",
            "Bm4xNk51bRgDIAEoBRIWCg5uMTZSZW1haW5UaW1lcxgEIAEoBSJLCgxVc2Vy",
            "Um9vbUluZm8SEAoIaWZtYXN0ZXIYASABKAgSDgoGaGVyb2lkGAIgASgNEgwK",
            "BGd1aWQYAyABKAQSCwoDcG9zGAQgASgFIsEBChNPcmRlckJlZ2luTmV3QmF0",
            "dGxlEhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lkEhAKCGJhdHRsZWlk",
            "GAIgASgEEg0KBXN0YXRlGAMgASgFEg0KBW1hcGlkGAQgASgFEgwKBHNzaWQY",
            "BSABKAUSKgoMdXNlclJvb21JbmZvGAYgAygLMhQuQ1NUb1NTLlVzZXJSb29t",
            "SW5mbxIiCgh1c2VyaW5mbxgHIAMoCzIQLkNTVG9TUy5Vc2VySW5mbyJYChdO",
            "b3RpZnlCYXR0bGVTdGF0ZUNoYW5nZRIcCgVtc2dpZBgBIAEoDjINLkNTVG9T",
            "Uy5Nc2dJZBIQCghiYXR0bGVpZBgCIAEoBBINCgVzdGF0ZRgDIAEoBSJsChdO",
            "b3RpZnlVc2V0TmV0SW5mb0NoYW5nZRIcCgVtc2dpZBgBIAEoDjINLkNTVG9T",
            "Uy5Nc2dJZBIMCgRndWlkGAIgASgEEiUKB25ldGluZm8YAyABKAsyFC5DU1Rv",
            "U1MuU1VzZXJOZXRJbmZvIjUKB1BpbmdSZXQSHAoFbXNnaWQYASABKA4yDS5D",
            "U1RvU1MuTXNnSWQSDAoEdGltZRgCIAEoAyI/ChFOb3RpZnlCdWZmQ2ZnTGlz",
            "dBIcCgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBIMCgR0aW1lGAIgASgD",
            "IkAKEk5vdGlmeVNraWxsQ2ZnTGlzdBIcCgVtc2dpZBgBIAEoDjINLkNTVG9T",
            "Uy5Nc2dJZBIMCgR0aW1lGAIgASgDIj0KEE5vdGlmeU5QQ0NmZ0xpc3QSHAoF",
            "bXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIj4KEU5v",
            "dGlmeUhlcm9DZmdMaXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lk",
            "EgsKA2NmZxgCIAMoCSI+ChFOb3RpZnlTaG9wQ2ZnTGlzdBIcCgVtc2dpZBgB",
            "IAEoDjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiADKAkiPwoSTm90aWZ5R29v",
            "ZHNDZmdMaXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lkEgsKA2Nm",
            "ZxgCIAMoCSI/ChJOb3RpZnlQdWJsaWNMdWFTdHISHAoFbXNnaWQYASABKA4y",
            "DS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIj8KEk5vdGlmeVJ1bmVzQ2Zn",
            "TGlzdBIcCgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiAD",
            "KAkiQwoWTm90aWZ5UnVuZXNTbG90Q2ZnTGlzdBIcCgVtc2dpZBgBIAEoDjIN",
            "LkNTVG9TUy5Nc2dJZBILCgNjZmcYAiADKAkiRQoYTm90aWZ5V2lsZE1vbnN0",
            "ZXJDZmdMaXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lkEgsKA2Nm",
            "ZxgCIAMoCSJQChROb3RpZnlVc2VySW5mb0NoYW5nZRIcCgVtc2dpZBgBIAEo",
            "DjINLkNTVG9TUy5Nc2dJZBIMCgRndWlkGAIgASgEEgwKBGdvbGQYAyABKAMi",
            "QgoVTm90aWZ5TmV3U2tpbGxDZmdMaXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NU",
            "b1NTLk1zZ0lkEgsKA2NmZxgCIAMoCSJOCiFOb3RpZnlTa2lsbE1vZGVsQWNj",
            "b3VudENmZ0NmZ0xpc3QSHAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQS",
            "CwoDY2ZnGAIgAygJIkkKHE5vdGlmeVNraWxsTW9kZWxSYW5nZUNmZ0xpc3QS",
            "HAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIksK",
            "Hk5vdGlmeVNraWxsTW9kZWxMZWFkaW5nQ2ZnTGlzdBIcCgVtc2dpZBgBIAEo",
            "DjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiADKAkiSAobTm90aWZ5U2tpbGxN",
            "b2RlbEVtaXRDZmdMaXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lk",
            "EgsKA2NmZxgCIAMoCSJHChpOb3RpZnlTa2lsbE1vZGVsQnVmQ2ZnTGlzdBIc",
            "CgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiADKAkiSgod",
            "Tm90aWZ5U2tpbGxNb2RlbFN1bW1vbkNmZ0xpc3QSHAoFbXNnaWQYASABKA4y",
            "DS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIkgKG05vdGlmeVNraWxsTW9k",
            "ZWxNb3ZlQ2ZnTGlzdBIcCgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBIL",
            "CgNjZmcYAiADKAkiSgodTm90aWZ5U2tpbGxNb2RlbFN3aXRjaENmZ0xpc3QS",
            "HAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIlAK",
            "I05vdGlmeVNraWxsTW9kZWxQdXJpZmljYXRpb25DZmdMaXN0EhwKBW1zZ2lk",
            "GAEgASgOMg0uQ1NUb1NTLk1zZ0lkEgsKA2NmZxgCIAMoCSJIChtOb3RpZnlT",
            "a2lsbE1vZGVsTGlua0NmZ0xpc3QSHAoFbXNnaWQYASABKA4yDS5DU1RvU1Mu",
            "TXNnSWQSCwoDY2ZnGAIgAygJIkgKG05vdGlmeVBhc3NpdGl2ZVNraWxsQ2Zn",
            "TGlzdBIcCgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiAD",
            "KAkiUgolTm90aWZ5UGFzc2l0aXZlRWZmZWN0Qmxvb2RTZWVrQ2ZnTGlzdBIc",
            "CgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBILCgNjZmcYAiADKAkiUAoj",
            "Tm90aWZ5UGFzc2l0aXZlRWZmZWN0UmVib3VuZENmZ0xpc3QSHAoFbXNnaWQY",
            "ASABKA4yDS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIk8KIk5vdGlmeVBh",
            "c3NpdGl2ZUVmZmVjdFJlbGl2ZUNmZ0xpc3QSHAoFbXNnaWQYASABKA4yDS5D",
            "U1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIkEKFE5vdGlmeVJvYm90QUlDZmdM",
            "aXN0EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lkEgsKA2NmZxgCIAMo",
            "CSJFChhOb3RpZnlSb2JvdEFJUGF0aENmZ0xpc3QSHAoFbXNnaWQYASABKA4y",
            "DS5DU1RvU1MuTXNnSWQSCwoDY2ZnGAIgAygJIpYBCgxOb3RpZnlPQlVzZXIS",
            "HAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSLgoGb2JpbmZvGAIgAygL",
            "Mh4uQ1NUb1NTLk5vdGlmeU9CVXNlci5PQlBvc0luZm8SEAoIYmF0dGxlaWQY",
            "AyABKAQaJgoJT0JQb3NJbmZvEgsKA3BvcxgBIAEoBRIMCgRndWlkGAIgASgE",
            "IlcKF05vdGlmeVVzZXJSZWNvbm5lY3RHYW1lEhwKBW1zZ2lkGAEgASgOMg0u",
            "Q1NUb1NTLk1zZ0lkEgwKBGd1aWQYAiABKAQSEAoIYmF0dGxlaWQYAyABKAQi",
            "VAoRQmF0dGxlS2lja09uZVVzZXISHAoFbXNnaWQYASABKA4yDS5DU1RvU1Mu",
            "TXNnSWQSEAoIYmF0dGxlaWQYAiABKAQSDwoHdXNlcmtleRgDIAEoBCKsBwoM",
            "Q3JlYXRlQmF0dGxlEhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1NTLk1zZ0lkEhAK",
            "CGJhdHRsZWlkGAIgASgEEg0KBW1hcGlkGAMgASgFEjMKCmJhdHRsZXR5cGUY",
            "BCABKA4yHy5DU1RvU1MuQ3JlYXRlQmF0dGxlLkJhdHRsZVR5cGUSOwoIdXNl",
            "cmluZm8YBSADKAsyKS5DU1RvU1MuQ3JlYXRlQmF0dGxlLkNyZWF0ZUJhdHRs",
            "ZVVzZXJJbmZvEjUKC2FpUm9ib3RMaXN0GAYgAygLMiAuQ1NUb1NTLkNyZWF0",
            "ZUJhdHRsZS5BaVJvYm90SW5mbxqFBAoUQ3JlYXRlQmF0dGxlVXNlckluZm8S",
            "KQoLdXNlcm5ldGluZm8YASABKAsyFC5DU1RvU1MuU1VzZXJOZXRJbmZvEgwK",
            "BGd1aWQYAiABKAMSDAoEc2VhdBgDIAEoBRINCgVncnBJRBgEIAEoBRIQCghu",
            "aWNrTmFtZRgFIAEoCRIPCgdkaWFtb25kGAYgASgDEgwKBGdvbGQYByABKAMS",
            "DQoFdmlwTHYYCCABKAUSDAoEaWZPQhgJIAEoCBIMCgRpZkdNGAogASgIEhYK",
            "DmNhblVzZUhlcm9MaXN0GAsgAygFEkUKCXJ1bmVQYWdlcxgMIAMoCzIyLkNT",
            "VG9TUy5DcmVhdGVCYXR0bGUuQ3JlYXRlQmF0dGxlVXNlckluZm8uUnVuZVBh",
            "Z2USEQoJaWZBaVJvYm90GA0gASgIGsgBCghSdW5lUGFnZRIQCghydW5lUGFn",
            "ZRgBIAEoBRJQCgtydW5lRWZmZWN0cxgCIAMoCzI7LkNTVG9TUy5DcmVhdGVC",
            "YXR0bGUuQ3JlYXRlQmF0dGxlVXNlckluZm8uUnVuZVBhZ2UuUnVuZUluZm8a",
            "WAoIUnVuZUluZm8SEAoIZWZmZWN0SWQYASABKAUSEgoKZWZmZWN0TmFtZRgC",
            "IAEoCRITCgtlZmZlY3RWYWx1ZRgDIAEoAhIRCgllZmZlY3RQZXIYBCABKAIa",
            "KwoLQWlSb2JvdEluZm8SDAoEc2VhdBgBIAEoDRIOCgZhaXR5cGUYAiABKA0i",
            "fwoKQmF0dGxlVHlwZRIUChBlQmF0dGxlVHlwZV9GcmVlEAASFAoQZUJhdHRs",
            "ZVR5cGVfUm9vbRABEhUKEWVCYXR0bGVUeXBlX01hdGNoEAISFgoSZUJhdHRs",
            "ZVR5cGVfR3VpZGUxEAMSFgoSZUJhdHRsZVR5cGVfR3VpZGUyEAQifwoQTm90",
            "aWZ5VXNlck9ubGluZRIcCgVtc2dpZBgBIAEoDjINLkNTVG9TUy5Nc2dJZBIQ",
            "CghiYXR0bGVpZBgCIAEoBBIQCgh1c2VyZ3VpZBgDIAEoBBIpCgt1c2VybmV0",
            "aW5mbxgEIAEoCzIULkNTVG9TUy5TVXNlck5ldEluZm8iVQoRTm90aWZ5VXNl",
            "ck9mZmxpbmUSHAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSEAoIYmF0",
            "dGxlaWQYAiABKAQSEAoIdXNlcmd1aWQYAyABKAQiUwoURmluaXNoQmF0dGxl",
            "UmVzcG9uc2USHAoFbXNnaWQYASABKA4yDS5DU1RvU1MuTXNnSWQSEAoIYmF0",
            "dGxlaWQYAiABKAQSCwoDcnN0GAMgASgIKsURCgVNc2dJZBIKCgZ1bmtub3cQ",
            "ABIaChRlTXNnVG9TU0Zyb21DU19CZWdpbhCAgAESHwoZZU1zZ1RvU1NGcm9t",
            "Q1NfQXNrUGluZ1JldBCBgAESIgocZU1zZ1RvU1NGcm9tQ1NfQXNrUmVnaXN0",
            "ZVJldBCCgAESIwodZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5VXNlckluZm8Qg4AB",
            "EigKImVNc2dUb1NTRnJvbUNTX09yZGVyQmVnaW5OZXdCYXR0bGUQhIABEiwK",
            "JmVNc2dUb1NTRnJvbUNTX05vdGlmeUJhdHRsZVN0YXRlQ2hhbmdlEIWAARIs",
            "CiZlTXNnVG9TU0Zyb21DU19Ob3RpZnlVc2V0TmV0SW5mb0NoYW5nZRCGgAES",
            "JgogZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5QnVmZkNmZ0xpc3QQh4ABEicKIWVN",
            "c2dUb1NTRnJvbUNTX05vdGlmeVNraWxsQ2ZnTGlzdBCIgAESJQofZU1zZ1Rv",
            "U1NGcm9tQ1NfTm90aWZ5TlBDQ2ZnTGlzdBCJgAESJgogZU1zZ1RvU1NGcm9t",
            "Q1NfTm90aWZ5SGVyb0NmZ0xpc3QQioABEiYKIGVNc2dUb1NTRnJvbUNTX05v",
            "dGlmeVNob3BDZmdMaXN0EIuAARInCiFlTXNnVG9TU0Zyb21DU19Ob3RpZnlH",
            "b29kc0NmZ0xpc3QQjIABEicKIWVNc2dUb1NTRnJvbUNTX05vdGlmeVB1Ymxp",
            "Y0x1YVN0chCNgAESJQofZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5TWFwQ2ZnTGlz",
            "dBCOgAESJQofZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5TWFwQ2ZnRGF0YRCPgAES",
            "JwohZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5UnVuZXNDZmdMaXN0EJCAARIrCiVl",
            "TXNnVG9TU0Zyb21DU19Ob3RpZnlSdW5lc1Nsb3RDZmdMaXN0EJGAARItCidl",
            "TXNnVG9TU0Zyb21DU19Ob3RpZnlXaWxkTW9uc3RlckNmZ0xpc3QQkoABEioK",
            "JGVNc2dUb1NTRnJvbUNTX05vdGlmeU5ld1NraWxsQ2ZnTGlzdBCUgAESNgow",
            "ZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5U2tpbGxNb2RlbEFjY291bnRDZmdDZmdM",
            "aXN0EJWAARIwCiplTXNnVG9TU0Zyb21DU19Ob3RpZnlTa2lsbE1vZGVsRW1p",
            "dENmZ0xpc3QQloABEjEKK2VNc2dUb1NTRnJvbUNTX05vdGlmeVNraWxsTW9k",
            "ZWxSYW5nZUNmZ0xpc3QQl4ABEjMKLWVNc2dUb1NTRnJvbUNTX05vdGlmeVNr",
            "aWxsTW9kZWxMZWFkaW5nQ2ZnTGlzdBCYgAESLwopZU1zZ1RvU1NGcm9tQ1Nf",
            "Tm90aWZ5U2tpbGxNb2RlbEJ1ZkNmZ0xpc3QQmYABEjIKLGVNc2dUb1NTRnJv",
            "bUNTX05vdGlmeVNraWxsTW9kZWxTdW1tb25DZmdMaXN0EJqAARIwCiplTXNn",
            "VG9TU0Zyb21DU19Ob3RpZnlTa2lsbE1vZGVsTW92ZUNmZ0xpc3QQm4ABEjIK",
            "LGVNc2dUb1NTRnJvbUNTX05vdGlmeVNraWxsTW9kZWxTd2l0Y2hDZmdMaXN0",
            "EJyAARIwCiplTXNnVG9TU0Zyb21DU19Ob3RpZnlQYXNzaXRpdmVTa2lsbENm",
            "Z0xpc3QQnYABEjoKNGVNc2dUb1NTRnJvbUNTX05vdGlmeVBhc3NpdGl2ZUVm",
            "ZmVjdEJsb29kU2Vla0NmZ0xpc3QQnoABEjgKMmVNc2dUb1NTRnJvbUNTX05v",
            "dGlmeVBhc3NpdGl2ZUVmZmVjdFJlYm91bmRDZmdMaXN0EJ+AARI3CjFlTXNn",
            "VG9TU0Zyb21DU19Ob3RpZnlQYXNzaXRpdmVFZmZlY3RSZWxpdmVDZmdMaXN0",
            "EKCAARIpCiNlTXNnVG9TU0Zyb21DU19Ob3RpZnlSb2JvdEFJQ2ZnTGlzdBCh",
            "gAESOAoyZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5U2tpbGxNb2RlbFB1cmlmaWNh",
            "dGlvbkNmZ0xpc3QQooABEi0KJ2VNc2dUb1NTRnJvbUNTX05vdGlmeVJvYm90",
            "QUlQYXRoQ2ZnTGlzdBCjgAESMAoqZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5U2tp",
            "bGxNb2RlbExpbmtDZmdMaXN0EKSAARInCiFlTXNnVG9TU0Zyb21DU19Ob3Rp",
            "ZnlTU0dhbWVTd2l0Y2gQqoABEigKImVNc2dUb1NTRnJvbUNTX05vdGlmeU9C",
            "RW50ZXJCYXR0bGUQq4ABEigKImVNc2dUb1NTRnJvbUNTX05vdGlmeVVzZXJS",
            "ZWNvbm5lY3QQrIABEiEKG2VNc2dUb1NTRnJvbUNTX05vdGlmeU9CVXNlchCt",
            "gAESLAomZU1zZ1RvU1NGcm9tQ1NfTm90aWZ5VXNlclJlY29ubmVjdEdhbWUQ",
            "roABEiYKIGVNc2dUb1NTRnJvbUNTX05vdGlmeVVzZXJPZmZsaW5lEK+AARIg",
            "ChplTXNnVG9TU0Zyb21DU19SZXBvcnRTU01zZxCwgAESJgogZU1zZ1RvU1NG",
            "cm9tQ1NfQmF0dGxlS2lja09uZVVzZXIQsYABEisKJWVNc2dUb1NTRnJvbUNT",
            "X05vdGlmeVNTR3VpZGVCYXR0bGVFbmQQsoABEikKI2VNc2dUb1NTRnJvbUNT",
            "X05vdGlmeVVzZXJJbmZvQ2hhbmdlELSAARIhChtlTXNnVG9TU0Zyb21DU19D",
            "cmVhdGVCYXR0bGUQ9IABEiIKHGVNc2dUb1NTRnJvbUNTX09uZVVzZXJPbmxp",
            "bmUQ9YABEiMKHWVNc2dUb1NTRnJvbUNTX09uZVVzZXJPZmZsaW5lEPaAARIp",
            "CiNlTXNnVG9TU0Zyb21DU19GaW5pc2hCYXR0bGVSZXNwb25zZRD+gAESGAoS",
            "ZU1zZ1RvU1NGcm9tQ1NfRW5kEOiEAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CSToSS.MsgId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.SSGameFuncSwitch), global::CSToSS.SSGameFuncSwitch.Parser, new[]{ "Msgid", "LogWitch", "GmWitch", "Solderwitch", "Monsterwitch", "Altarsolderwitch", "Logrefshtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySSGuideBattleEnd), global::CSToSS.NotifySSGuideBattleEnd.Parser, new[]{ "Msgid", "Battleid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.ReportSSMsg), global::CSToSS.ReportSSMsg.Parser, new[]{ "Msgid", "Battleid", "Othermsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.AskRegisteRet), global::CSToSS.AskRegisteRet.Parser, new[]{ "Msgid", "Ret", "Time", "Basegsid", "Gsinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.AskRegisteRet.Types.GSInfo), global::CSToSS.AskRegisteRet.Types.GSInfo.Parser, new[]{ "Gsid", "Userpwd" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.SUserNetInfo), global::CSToSS.SUserNetInfo.Parser, new[]{ "N32GSID", "N32GCNSID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.UserInfo), global::CSToSS.UserInfo.Parser, new[]{ "Usernetinfo", "Userdata", "Herolist", "RunesBag", "RunesSlot", "IfGuide" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.UserInfo.Types.SUserDBData), global::CSToSS.UserInfo.Types.SUserDBData.Parser, new[]{ "EObjType", "Un64ObjIdx", "EUserCate", "EUserPlatform", "SzUserName", "SzUserPwd", "SzNickName", "Un32HeaderID", "N8Sex", "N64Score", "N64Diamond", "N64Gold", "TRegisteUTCMillisec", "TLastLoginUTCMillisec", "N32HeroNum", "N32RunesSlotOpenNum", "N32RunesBagNum", "N32RunesSlotNum", "N32FriendsNum", "N32BlacklistNum", "Un32TotalGameInns", "Un32TotalWinInns", "Un32TotalHeroKills", "Un32TotalDestoryBuildings", "Un32TotalDeadTimes", "Un16UserLv", "Un32UserCurLvExp", "TLastFirstWinTime", "MGuideSteps", "SzFriends" }, null, new[]{ typeof(global::CSToSS.UserInfo.Types.SUserDBData.Types.EObjectType), typeof(global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserCate), typeof(global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserPlatform) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps), global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps.Parser, new[]{ "SzCSContinueGuide", "SzCSNoContinueGuide", "SzSSGuides" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.UserInfo.Types.SUserRunesRuntimeData), global::CSToSS.UserInfo.Types.SUserRunesRuntimeData.Parser, new[]{ "Un32RunesTypeID", "N16Pos", "N16Num", "N16RemainTimes" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.UserRoomInfo), global::CSToSS.UserRoomInfo.Parser, new[]{ "Ifmaster", "Heroid", "Guid", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.OrderBeginNewBattle), global::CSToSS.OrderBeginNewBattle.Parser, new[]{ "Msgid", "Battleid", "State", "Mapid", "Ssid", "UserRoomInfo", "Userinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyBattleStateChange), global::CSToSS.NotifyBattleStateChange.Parser, new[]{ "Msgid", "Battleid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyUsetNetInfoChange), global::CSToSS.NotifyUsetNetInfoChange.Parser, new[]{ "Msgid", "Guid", "Netinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.PingRet), global::CSToSS.PingRet.Parser, new[]{ "Msgid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyBuffCfgList), global::CSToSS.NotifyBuffCfgList.Parser, new[]{ "Msgid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillCfgList), global::CSToSS.NotifySkillCfgList.Parser, new[]{ "Msgid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyNPCCfgList), global::CSToSS.NotifyNPCCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyHeroCfgList), global::CSToSS.NotifyHeroCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyShopCfgList), global::CSToSS.NotifyShopCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyGoodsCfgList), global::CSToSS.NotifyGoodsCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyPublicLuaStr), global::CSToSS.NotifyPublicLuaStr.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyRunesCfgList), global::CSToSS.NotifyRunesCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyRunesSlotCfgList), global::CSToSS.NotifyRunesSlotCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyWildMonsterCfgList), global::CSToSS.NotifyWildMonsterCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyUserInfoChange), global::CSToSS.NotifyUserInfoChange.Parser, new[]{ "Msgid", "Guid", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyNewSkillCfgList), global::CSToSS.NotifyNewSkillCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelAccountCfgCfgList), global::CSToSS.NotifySkillModelAccountCfgCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelRangeCfgList), global::CSToSS.NotifySkillModelRangeCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelLeadingCfgList), global::CSToSS.NotifySkillModelLeadingCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelEmitCfgList), global::CSToSS.NotifySkillModelEmitCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelBufCfgList), global::CSToSS.NotifySkillModelBufCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelSummonCfgList), global::CSToSS.NotifySkillModelSummonCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelMoveCfgList), global::CSToSS.NotifySkillModelMoveCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelSwitchCfgList), global::CSToSS.NotifySkillModelSwitchCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelPurificationCfgList), global::CSToSS.NotifySkillModelPurificationCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifySkillModelLinkCfgList), global::CSToSS.NotifySkillModelLinkCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyPassitiveSkillCfgList), global::CSToSS.NotifyPassitiveSkillCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyPassitiveEffectBloodSeekCfgList), global::CSToSS.NotifyPassitiveEffectBloodSeekCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyPassitiveEffectReboundCfgList), global::CSToSS.NotifyPassitiveEffectReboundCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyPassitiveEffectReliveCfgList), global::CSToSS.NotifyPassitiveEffectReliveCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyRobotAICfgList), global::CSToSS.NotifyRobotAICfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyRobotAIPathCfgList), global::CSToSS.NotifyRobotAIPathCfgList.Parser, new[]{ "Msgid", "Cfg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyOBUser), global::CSToSS.NotifyOBUser.Parser, new[]{ "Msgid", "Obinfo", "Battleid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyOBUser.Types.OBPosInfo), global::CSToSS.NotifyOBUser.Types.OBPosInfo.Parser, new[]{ "Pos", "Guid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyUserReconnectGame), global::CSToSS.NotifyUserReconnectGame.Parser, new[]{ "Msgid", "Guid", "Battleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.BattleKickOneUser), global::CSToSS.BattleKickOneUser.Parser, new[]{ "Msgid", "Battleid", "Userkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.CreateBattle), global::CSToSS.CreateBattle.Parser, new[]{ "Msgid", "Battleid", "Mapid", "Battletype", "Userinfo", "AiRobotList" }, null, new[]{ typeof(global::CSToSS.CreateBattle.Types.BattleType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.CreateBattle.Types.CreateBattleUserInfo), global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Parser, new[]{ "Usernetinfo", "Guid", "Seat", "GrpID", "NickName", "Diamond", "Gold", "VipLv", "IfOB", "IfGM", "CanUseHeroList", "RunePages", "IfAiRobot" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage), global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Parser, new[]{ "RunePage_", "RuneEffects" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo), global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo.Parser, new[]{ "EffectId", "EffectName", "EffectValue", "EffectPer" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.CreateBattle.Types.AiRobotInfo), global::CSToSS.CreateBattle.Types.AiRobotInfo.Parser, new[]{ "Seat", "Aitype" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyUserOnline), global::CSToSS.NotifyUserOnline.Parser, new[]{ "Msgid", "Battleid", "Userguid", "Usernetinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.NotifyUserOffline), global::CSToSS.NotifyUserOffline.Parser, new[]{ "Msgid", "Battleid", "Userguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToSS.FinishBattleResponse), global::CSToSS.FinishBattleResponse.Parser, new[]{ "Msgid", "Battleid", "Rst" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgId {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eMsgToSSFromCS_Begin")] EMsgToSsfromCsBegin = 16384,
    [pbr::OriginalName("eMsgToSSFromCS_AskPingRet")] EMsgToSsfromCsAskPingRet = 16385,
    [pbr::OriginalName("eMsgToSSFromCS_AskRegisteRet")] EMsgToSsfromCsAskRegisteRet = 16386,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUserInfo")] EMsgToSsfromCsNotifyUserInfo = 16387,
    [pbr::OriginalName("eMsgToSSFromCS_OrderBeginNewBattle")] EMsgToSsfromCsOrderBeginNewBattle = 16388,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyBattleStateChange")] EMsgToSsfromCsNotifyBattleStateChange = 16389,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUsetNetInfoChange")] EMsgToSsfromCsNotifyUsetNetInfoChange = 16390,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyBuffCfgList")] EMsgToSsfromCsNotifyBuffCfgList = 16391,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillCfgList")] EMsgToSsfromCsNotifySkillCfgList = 16392,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyNPCCfgList")] EMsgToSsfromCsNotifyNpccfgList = 16393,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyHeroCfgList")] EMsgToSsfromCsNotifyHeroCfgList = 16394,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyShopCfgList")] EMsgToSsfromCsNotifyShopCfgList = 16395,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyGoodsCfgList")] EMsgToSsfromCsNotifyGoodsCfgList = 16396,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyPublicLuaStr")] EMsgToSsfromCsNotifyPublicLuaStr = 16397,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyMapCfgList")] EMsgToSsfromCsNotifyMapCfgList = 16398,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyMapCfgData")] EMsgToSsfromCsNotifyMapCfgData = 16399,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyRunesCfgList")] EMsgToSsfromCsNotifyRunesCfgList = 16400,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyRunesSlotCfgList")] EMsgToSsfromCsNotifyRunesSlotCfgList = 16401,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyWildMonsterCfgList")] EMsgToSsfromCsNotifyWildMonsterCfgList = 16402,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyNewSkillCfgList")] EMsgToSsfromCsNotifyNewSkillCfgList = 16404,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelAccountCfgCfgList")] EMsgToSsfromCsNotifySkillModelAccountCfgCfgList = 16405,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelEmitCfgList")] EMsgToSsfromCsNotifySkillModelEmitCfgList = 16406,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelRangeCfgList")] EMsgToSsfromCsNotifySkillModelRangeCfgList = 16407,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelLeadingCfgList")] EMsgToSsfromCsNotifySkillModelLeadingCfgList = 16408,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelBufCfgList")] EMsgToSsfromCsNotifySkillModelBufCfgList = 16409,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelSummonCfgList")] EMsgToSsfromCsNotifySkillModelSummonCfgList = 16410,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelMoveCfgList")] EMsgToSsfromCsNotifySkillModelMoveCfgList = 16411,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelSwitchCfgList")] EMsgToSsfromCsNotifySkillModelSwitchCfgList = 16412,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyPassitiveSkillCfgList")] EMsgToSsfromCsNotifyPassitiveSkillCfgList = 16413,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyPassitiveEffectBloodSeekCfgList")] EMsgToSsfromCsNotifyPassitiveEffectBloodSeekCfgList = 16414,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyPassitiveEffectReboundCfgList")] EMsgToSsfromCsNotifyPassitiveEffectReboundCfgList = 16415,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyPassitiveEffectReliveCfgList")] EMsgToSsfromCsNotifyPassitiveEffectReliveCfgList = 16416,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyRobotAICfgList")] EMsgToSsfromCsNotifyRobotAicfgList = 16417,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelPurificationCfgList")] EMsgToSsfromCsNotifySkillModelPurificationCfgList = 16418,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyRobotAIPathCfgList")] EMsgToSsfromCsNotifyRobotAipathCfgList = 16419,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySkillModelLinkCfgList")] EMsgToSsfromCsNotifySkillModelLinkCfgList = 16420,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySSGameSwitch")] EMsgToSsfromCsNotifySsgameSwitch = 16426,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyOBEnterBattle")] EMsgToSsfromCsNotifyObenterBattle = 16427,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUserReconnect")] EMsgToSsfromCsNotifyUserReconnect = 16428,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyOBUser")] EMsgToSsfromCsNotifyObuser = 16429,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUserReconnectGame")] EMsgToSsfromCsNotifyUserReconnectGame = 16430,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUserOffline")] EMsgToSsfromCsNotifyUserOffline = 16431,
    [pbr::OriginalName("eMsgToSSFromCS_ReportSSMsg")] EMsgToSsfromCsReportSsmsg = 16432,
    [pbr::OriginalName("eMsgToSSFromCS_BattleKickOneUser")] EMsgToSsfromCsBattleKickOneUser = 16433,
    [pbr::OriginalName("eMsgToSSFromCS_NotifySSGuideBattleEnd")] EMsgToSsfromCsNotifySsguideBattleEnd = 16434,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyUserInfoChange")] EMsgToSsfromCsNotifyUserInfoChange = 16436,
    [pbr::OriginalName("eMsgToSSFromCS_CreateBattle")] EMsgToSsfromCsCreateBattle = 16500,
    [pbr::OriginalName("eMsgToSSFromCS_OneUserOnline")] EMsgToSsfromCsOneUserOnline = 16501,
    [pbr::OriginalName("eMsgToSSFromCS_OneUserOffline")] EMsgToSsfromCsOneUserOffline = 16502,
    [pbr::OriginalName("eMsgToSSFromCS_FinishBattleResponse")] EMsgToSsfromCsFinishBattleResponse = 16510,
    [pbr::OriginalName("eMsgToSSFromCS_End")] EMsgToSsfromCsEnd = 17000,
  }

  #endregion

  #region Messages
  /// <summary>
  ///eMsgToSSFromCS_NotifySSGameSwitch
  /// </summary>
  public sealed partial class SSGameFuncSwitch : pb::IMessage<SSGameFuncSwitch> {
    private static readonly pb::MessageParser<SSGameFuncSwitch> _parser = new pb::MessageParser<SSGameFuncSwitch>(() => new SSGameFuncSwitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SSGameFuncSwitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSGameFuncSwitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSGameFuncSwitch(SSGameFuncSwitch other) : this() {
      msgid_ = other.msgid_;
      logWitch_ = other.logWitch_;
      gmWitch_ = other.gmWitch_;
      solderwitch_ = other.solderwitch_;
      monsterwitch_ = other.monsterwitch_;
      altarsolderwitch_ = other.altarsolderwitch_;
      logrefshtime_ = other.logrefshtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSGameFuncSwitch Clone() {
      return new SSGameFuncSwitch(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "log_witch" field.</summary>
    public const int LogWitchFieldNumber = 2;
    private uint logWitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogWitch {
      get { return logWitch_; }
      set {
        logWitch_ = value;
      }
    }

    /// <summary>Field number for the "gm_witch" field.</summary>
    public const int GmWitchFieldNumber = 3;
    private uint gmWitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GmWitch {
      get { return gmWitch_; }
      set {
        gmWitch_ = value;
      }
    }

    /// <summary>Field number for the "solderwitch" field.</summary>
    public const int SolderwitchFieldNumber = 4;
    private uint solderwitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Solderwitch {
      get { return solderwitch_; }
      set {
        solderwitch_ = value;
      }
    }

    /// <summary>Field number for the "monsterwitch" field.</summary>
    public const int MonsterwitchFieldNumber = 5;
    private uint monsterwitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Monsterwitch {
      get { return monsterwitch_; }
      set {
        monsterwitch_ = value;
      }
    }

    /// <summary>Field number for the "altarsolderwitch" field.</summary>
    public const int AltarsolderwitchFieldNumber = 6;
    private uint altarsolderwitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Altarsolderwitch {
      get { return altarsolderwitch_; }
      set {
        altarsolderwitch_ = value;
      }
    }

    /// <summary>Field number for the "logrefshtime" field.</summary>
    public const int LogrefshtimeFieldNumber = 7;
    private uint logrefshtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Logrefshtime {
      get { return logrefshtime_; }
      set {
        logrefshtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SSGameFuncSwitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SSGameFuncSwitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (LogWitch != other.LogWitch) return false;
      if (GmWitch != other.GmWitch) return false;
      if (Solderwitch != other.Solderwitch) return false;
      if (Monsterwitch != other.Monsterwitch) return false;
      if (Altarsolderwitch != other.Altarsolderwitch) return false;
      if (Logrefshtime != other.Logrefshtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (LogWitch != 0) hash ^= LogWitch.GetHashCode();
      if (GmWitch != 0) hash ^= GmWitch.GetHashCode();
      if (Solderwitch != 0) hash ^= Solderwitch.GetHashCode();
      if (Monsterwitch != 0) hash ^= Monsterwitch.GetHashCode();
      if (Altarsolderwitch != 0) hash ^= Altarsolderwitch.GetHashCode();
      if (Logrefshtime != 0) hash ^= Logrefshtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (LogWitch != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LogWitch);
      }
      if (GmWitch != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GmWitch);
      }
      if (Solderwitch != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Solderwitch);
      }
      if (Monsterwitch != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Monsterwitch);
      }
      if (Altarsolderwitch != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Altarsolderwitch);
      }
      if (Logrefshtime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Logrefshtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (LogWitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogWitch);
      }
      if (GmWitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GmWitch);
      }
      if (Solderwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Solderwitch);
      }
      if (Monsterwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monsterwitch);
      }
      if (Altarsolderwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Altarsolderwitch);
      }
      if (Logrefshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Logrefshtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SSGameFuncSwitch other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.LogWitch != 0) {
        LogWitch = other.LogWitch;
      }
      if (other.GmWitch != 0) {
        GmWitch = other.GmWitch;
      }
      if (other.Solderwitch != 0) {
        Solderwitch = other.Solderwitch;
      }
      if (other.Monsterwitch != 0) {
        Monsterwitch = other.Monsterwitch;
      }
      if (other.Altarsolderwitch != 0) {
        Altarsolderwitch = other.Altarsolderwitch;
      }
      if (other.Logrefshtime != 0) {
        Logrefshtime = other.Logrefshtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            LogWitch = input.ReadUInt32();
            break;
          }
          case 24: {
            GmWitch = input.ReadUInt32();
            break;
          }
          case 32: {
            Solderwitch = input.ReadUInt32();
            break;
          }
          case 40: {
            Monsterwitch = input.ReadUInt32();
            break;
          }
          case 48: {
            Altarsolderwitch = input.ReadUInt32();
            break;
          }
          case 56: {
            Logrefshtime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToSSFromCS_NotifySSGuideBattleEnd
  /// </summary>
  public sealed partial class NotifySSGuideBattleEnd : pb::IMessage<NotifySSGuideBattleEnd> {
    private static readonly pb::MessageParser<NotifySSGuideBattleEnd> _parser = new pb::MessageParser<NotifySSGuideBattleEnd>(() => new NotifySSGuideBattleEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySSGuideBattleEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySSGuideBattleEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySSGuideBattleEnd(NotifySSGuideBattleEnd other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySSGuideBattleEnd Clone() {
      return new NotifySSGuideBattleEnd(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySSGuideBattleEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySSGuideBattleEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySSGuideBattleEnd other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportSSMsg : pb::IMessage<ReportSSMsg> {
    private static readonly pb::MessageParser<ReportSSMsg> _parser = new pb::MessageParser<ReportSSMsg>(() => new ReportSSMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportSSMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSSMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSSMsg(ReportSSMsg other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      othermsg_ = other.othermsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportSSMsg Clone() {
      return new ReportSSMsg(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "othermsg" field.</summary>
    public const int OthermsgFieldNumber = 3;
    private string othermsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Othermsg {
      get { return othermsg_; }
      set {
        othermsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportSSMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportSSMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Othermsg != other.Othermsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Othermsg.Length != 0) hash ^= Othermsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Othermsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Othermsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Othermsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Othermsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportSSMsg other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Othermsg.Length != 0) {
        Othermsg = other.Othermsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 26: {
            Othermsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRegisteRet : pb::IMessage<AskRegisteRet> {
    private static readonly pb::MessageParser<AskRegisteRet> _parser = new pb::MessageParser<AskRegisteRet>(() => new AskRegisteRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRegisteRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet(AskRegisteRet other) : this() {
      msgid_ = other.msgid_;
      ret_ = other.ret_;
      time_ = other.time_;
      basegsid_ = other.basegsid_;
      gsinfo_ = other.gsinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet Clone() {
      return new AskRegisteRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "basegsid" field.</summary>
    public const int BasegsidFieldNumber = 4;
    private int basegsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Basegsid {
      get { return basegsid_; }
      set {
        basegsid_ = value;
      }
    }

    /// <summary>Field number for the "gsinfo" field.</summary>
    public const int GsinfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CSToSS.AskRegisteRet.Types.GSInfo> _repeated_gsinfo_codec
        = pb::FieldCodec.ForMessage(42, global::CSToSS.AskRegisteRet.Types.GSInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.AskRegisteRet.Types.GSInfo> gsinfo_ = new pbc::RepeatedField<global::CSToSS.AskRegisteRet.Types.GSInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.AskRegisteRet.Types.GSInfo> Gsinfo {
      get { return gsinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRegisteRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRegisteRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Ret != other.Ret) return false;
      if (Time != other.Time) return false;
      if (Basegsid != other.Basegsid) return false;
      if(!gsinfo_.Equals(other.gsinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Basegsid != 0) hash ^= Basegsid.GetHashCode();
      hash ^= gsinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (Basegsid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Basegsid);
      }
      gsinfo_.WriteTo(output, _repeated_gsinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Basegsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Basegsid);
      }
      size += gsinfo_.CalculateSize(_repeated_gsinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRegisteRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Basegsid != 0) {
        Basegsid = other.Basegsid;
      }
      gsinfo_.Add(other.gsinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            Basegsid = input.ReadInt32();
            break;
          }
          case 42: {
            gsinfo_.AddEntriesFrom(input, _repeated_gsinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AskRegisteRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GSInfo : pb::IMessage<GSInfo> {
        private static readonly pb::MessageParser<GSInfo> _parser = new pb::MessageParser<GSInfo>(() => new GSInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GSInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.AskRegisteRet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GSInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GSInfo(GSInfo other) : this() {
          gsid_ = other.gsid_;
          userpwd_ = other.userpwd_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GSInfo Clone() {
          return new GSInfo(this);
        }

        /// <summary>Field number for the "gsid" field.</summary>
        public const int GsidFieldNumber = 1;
        private int gsid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Gsid {
          get { return gsid_; }
          set {
            gsid_ = value;
          }
        }

        /// <summary>Field number for the "userpwd" field.</summary>
        public const int UserpwdFieldNumber = 2;
        private string userpwd_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Userpwd {
          get { return userpwd_; }
          set {
            userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GSInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GSInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gsid != other.Gsid) return false;
          if (Userpwd != other.Userpwd) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Gsid != 0) hash ^= Gsid.GetHashCode();
          if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Gsid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Gsid);
          }
          if (Userpwd.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Userpwd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Gsid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
          }
          if (Userpwd.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GSInfo other) {
          if (other == null) {
            return;
          }
          if (other.Gsid != 0) {
            Gsid = other.Gsid;
          }
          if (other.Userpwd.Length != 0) {
            Userpwd = other.Userpwd;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Gsid = input.ReadInt32();
                break;
              }
              case 18: {
                Userpwd = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SUserNetInfo : pb::IMessage<SUserNetInfo> {
    private static readonly pb::MessageParser<SUserNetInfo> _parser = new pb::MessageParser<SUserNetInfo>(() => new SUserNetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserNetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserNetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserNetInfo(SUserNetInfo other) : this() {
      n32GSID_ = other.n32GSID_;
      n32GCNSID_ = other.n32GCNSID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserNetInfo Clone() {
      return new SUserNetInfo(this);
    }

    /// <summary>Field number for the "n32GSID" field.</summary>
    public const int N32GSIDFieldNumber = 1;
    private int n32GSID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N32GSID {
      get { return n32GSID_; }
      set {
        n32GSID_ = value;
      }
    }

    /// <summary>Field number for the "n32GCNSID" field.</summary>
    public const int N32GCNSIDFieldNumber = 2;
    private int n32GCNSID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N32GCNSID {
      get { return n32GCNSID_; }
      set {
        n32GCNSID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserNetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserNetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (N32GSID != other.N32GSID) return false;
      if (N32GCNSID != other.N32GCNSID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (N32GSID != 0) hash ^= N32GSID.GetHashCode();
      if (N32GCNSID != 0) hash ^= N32GCNSID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (N32GSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(N32GSID);
      }
      if (N32GCNSID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(N32GCNSID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (N32GSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N32GSID);
      }
      if (N32GCNSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N32GCNSID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserNetInfo other) {
      if (other == null) {
        return;
      }
      if (other.N32GSID != 0) {
        N32GSID = other.N32GSID;
      }
      if (other.N32GCNSID != 0) {
        N32GCNSID = other.N32GCNSID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            N32GSID = input.ReadInt32();
            break;
          }
          case 16: {
            N32GCNSID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      usernetinfo_ = other.usernetinfo_ != null ? other.usernetinfo_.Clone() : null;
      userdata_ = other.userdata_ != null ? other.userdata_.Clone() : null;
      herolist_ = other.herolist_.Clone();
      runesBag_ = other.runesBag_.Clone();
      runesSlot_ = other.runesSlot_.Clone();
      ifGuide_ = other.ifGuide_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "usernetinfo" field.</summary>
    public const int UsernetinfoFieldNumber = 2;
    private global::CSToSS.SUserNetInfo usernetinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.SUserNetInfo Usernetinfo {
      get { return usernetinfo_; }
      set {
        usernetinfo_ = value;
      }
    }

    /// <summary>Field number for the "userdata" field.</summary>
    public const int UserdataFieldNumber = 3;
    private global::CSToSS.UserInfo.Types.SUserDBData userdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.UserInfo.Types.SUserDBData Userdata {
      get { return userdata_; }
      set {
        userdata_ = value;
      }
    }

    /// <summary>Field number for the "herolist" field.</summary>
    public const int HerolistFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_herolist_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> herolist_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Herolist {
      get { return herolist_; }
    }

    /// <summary>Field number for the "RunesBag" field.</summary>
    public const int RunesBagFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> _repeated_runesBag_codec
        = pb::FieldCodec.ForMessage(42, global::CSToSS.UserInfo.Types.SUserRunesRuntimeData.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> runesBag_ = new pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> RunesBag {
      get { return runesBag_; }
    }

    /// <summary>Field number for the "RunesSlot" field.</summary>
    public const int RunesSlotFieldNumber = 6;
    private static readonly pb::FieldCodec<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> _repeated_runesSlot_codec
        = pb::FieldCodec.ForMessage(50, global::CSToSS.UserInfo.Types.SUserRunesRuntimeData.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> runesSlot_ = new pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.UserInfo.Types.SUserRunesRuntimeData> RunesSlot {
      get { return runesSlot_; }
    }

    /// <summary>Field number for the "ifGuide" field.</summary>
    public const int IfGuideFieldNumber = 7;
    private bool ifGuide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfGuide {
      get { return ifGuide_; }
      set {
        ifGuide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Usernetinfo, other.Usernetinfo)) return false;
      if (!object.Equals(Userdata, other.Userdata)) return false;
      if(!herolist_.Equals(other.herolist_)) return false;
      if(!runesBag_.Equals(other.runesBag_)) return false;
      if(!runesSlot_.Equals(other.runesSlot_)) return false;
      if (IfGuide != other.IfGuide) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (usernetinfo_ != null) hash ^= Usernetinfo.GetHashCode();
      if (userdata_ != null) hash ^= Userdata.GetHashCode();
      hash ^= herolist_.GetHashCode();
      hash ^= runesBag_.GetHashCode();
      hash ^= runesSlot_.GetHashCode();
      if (IfGuide != false) hash ^= IfGuide.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (usernetinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Usernetinfo);
      }
      if (userdata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Userdata);
      }
      herolist_.WriteTo(output, _repeated_herolist_codec);
      runesBag_.WriteTo(output, _repeated_runesBag_codec);
      runesSlot_.WriteTo(output, _repeated_runesSlot_codec);
      if (IfGuide != false) {
        output.WriteRawTag(56);
        output.WriteBool(IfGuide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (usernetinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usernetinfo);
      }
      if (userdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Userdata);
      }
      size += herolist_.CalculateSize(_repeated_herolist_codec);
      size += runesBag_.CalculateSize(_repeated_runesBag_codec);
      size += runesSlot_.CalculateSize(_repeated_runesSlot_codec);
      if (IfGuide != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.usernetinfo_ != null) {
        if (usernetinfo_ == null) {
          usernetinfo_ = new global::CSToSS.SUserNetInfo();
        }
        Usernetinfo.MergeFrom(other.Usernetinfo);
      }
      if (other.userdata_ != null) {
        if (userdata_ == null) {
          userdata_ = new global::CSToSS.UserInfo.Types.SUserDBData();
        }
        Userdata.MergeFrom(other.Userdata);
      }
      herolist_.Add(other.herolist_);
      runesBag_.Add(other.runesBag_);
      runesSlot_.Add(other.runesSlot_);
      if (other.IfGuide != false) {
        IfGuide = other.IfGuide;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (usernetinfo_ == null) {
              usernetinfo_ = new global::CSToSS.SUserNetInfo();
            }
            input.ReadMessage(usernetinfo_);
            break;
          }
          case 26: {
            if (userdata_ == null) {
              userdata_ = new global::CSToSS.UserInfo.Types.SUserDBData();
            }
            input.ReadMessage(userdata_);
            break;
          }
          case 34:
          case 32: {
            herolist_.AddEntriesFrom(input, _repeated_herolist_codec);
            break;
          }
          case 42: {
            runesBag_.AddEntriesFrom(input, _repeated_runesBag_codec);
            break;
          }
          case 50: {
            runesSlot_.AddEntriesFrom(input, _repeated_runesSlot_codec);
            break;
          }
          case 56: {
            IfGuide = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SUserDBData : pb::IMessage<SUserDBData> {
        private static readonly pb::MessageParser<SUserDBData> _parser = new pb::MessageParser<SUserDBData>(() => new SUserDBData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SUserDBData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.UserInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserDBData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserDBData(SUserDBData other) : this() {
          eObjType_ = other.eObjType_;
          un64ObjIdx_ = other.un64ObjIdx_;
          eUserCate_ = other.eUserCate_;
          eUserPlatform_ = other.eUserPlatform_;
          szUserName_ = other.szUserName_;
          szUserPwd_ = other.szUserPwd_;
          szNickName_ = other.szNickName_;
          un32HeaderID_ = other.un32HeaderID_;
          n8Sex_ = other.n8Sex_;
          n64Score_ = other.n64Score_;
          n64Diamond_ = other.n64Diamond_;
          n64Gold_ = other.n64Gold_;
          tRegisteUTCMillisec_ = other.tRegisteUTCMillisec_;
          tLastLoginUTCMillisec_ = other.tLastLoginUTCMillisec_;
          n32HeroNum_ = other.n32HeroNum_;
          n32RunesSlotOpenNum_ = other.n32RunesSlotOpenNum_;
          n32RunesBagNum_ = other.n32RunesBagNum_;
          n32RunesSlotNum_ = other.n32RunesSlotNum_;
          n32FriendsNum_ = other.n32FriendsNum_;
          n32BlacklistNum_ = other.n32BlacklistNum_;
          un32TotalGameInns_ = other.un32TotalGameInns_;
          un32TotalWinInns_ = other.un32TotalWinInns_;
          un32TotalHeroKills_ = other.un32TotalHeroKills_;
          un32TotalDestoryBuildings_ = other.un32TotalDestoryBuildings_;
          un32TotalDeadTimes_ = other.un32TotalDeadTimes_;
          un16UserLv_ = other.un16UserLv_;
          un32UserCurLvExp_ = other.un32UserCurLvExp_;
          tLastFirstWinTime_ = other.tLastFirstWinTime_;
          mGuideSteps_ = other.mGuideSteps_ != null ? other.mGuideSteps_.Clone() : null;
          szFriends_ = other.szFriends_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserDBData Clone() {
          return new SUserDBData(this);
        }

        /// <summary>Field number for the "eObjType" field.</summary>
        public const int EObjTypeFieldNumber = 1;
        private global::CSToSS.UserInfo.Types.SUserDBData.Types.EObjectType eObjType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CSToSS.UserInfo.Types.SUserDBData.Types.EObjectType EObjType {
          get { return eObjType_; }
          set {
            eObjType_ = value;
          }
        }

        /// <summary>Field number for the "un64ObjIdx" field.</summary>
        public const int Un64ObjIdxFieldNumber = 2;
        private long un64ObjIdx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Un64ObjIdx {
          get { return un64ObjIdx_; }
          set {
            un64ObjIdx_ = value;
          }
        }

        /// <summary>Field number for the "eUserCate" field.</summary>
        public const int EUserCateFieldNumber = 3;
        private global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserCate eUserCate_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserCate EUserCate {
          get { return eUserCate_; }
          set {
            eUserCate_ = value;
          }
        }

        /// <summary>Field number for the "eUserPlatform" field.</summary>
        public const int EUserPlatformFieldNumber = 4;
        private global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserPlatform eUserPlatform_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserPlatform EUserPlatform {
          get { return eUserPlatform_; }
          set {
            eUserPlatform_ = value;
          }
        }

        /// <summary>Field number for the "szUserName" field.</summary>
        public const int SzUserNameFieldNumber = 5;
        private string szUserName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SzUserName {
          get { return szUserName_; }
          set {
            szUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "szUserPwd" field.</summary>
        public const int SzUserPwdFieldNumber = 6;
        private string szUserPwd_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SzUserPwd {
          get { return szUserPwd_; }
          set {
            szUserPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "szNickName" field.</summary>
        public const int SzNickNameFieldNumber = 7;
        private string szNickName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SzNickName {
          get { return szNickName_; }
          set {
            szNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "un32HeaderID" field.</summary>
        public const int Un32HeaderIDFieldNumber = 8;
        private int un32HeaderID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32HeaderID {
          get { return un32HeaderID_; }
          set {
            un32HeaderID_ = value;
          }
        }

        /// <summary>Field number for the "n8Sex" field.</summary>
        public const int N8SexFieldNumber = 9;
        private int n8Sex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N8Sex {
          get { return n8Sex_; }
          set {
            n8Sex_ = value;
          }
        }

        /// <summary>Field number for the "n64Score" field.</summary>
        public const int N64ScoreFieldNumber = 10;
        private long n64Score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long N64Score {
          get { return n64Score_; }
          set {
            n64Score_ = value;
          }
        }

        /// <summary>Field number for the "n64Diamond" field.</summary>
        public const int N64DiamondFieldNumber = 11;
        private long n64Diamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long N64Diamond {
          get { return n64Diamond_; }
          set {
            n64Diamond_ = value;
          }
        }

        /// <summary>Field number for the "n64Gold" field.</summary>
        public const int N64GoldFieldNumber = 12;
        private long n64Gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long N64Gold {
          get { return n64Gold_; }
          set {
            n64Gold_ = value;
          }
        }

        /// <summary>Field number for the "tRegisteUTCMillisec" field.</summary>
        public const int TRegisteUTCMillisecFieldNumber = 13;
        private long tRegisteUTCMillisec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TRegisteUTCMillisec {
          get { return tRegisteUTCMillisec_; }
          set {
            tRegisteUTCMillisec_ = value;
          }
        }

        /// <summary>Field number for the "tLastLoginUTCMillisec" field.</summary>
        public const int TLastLoginUTCMillisecFieldNumber = 14;
        private long tLastLoginUTCMillisec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TLastLoginUTCMillisec {
          get { return tLastLoginUTCMillisec_; }
          set {
            tLastLoginUTCMillisec_ = value;
          }
        }

        /// <summary>Field number for the "n32HeroNum" field.</summary>
        public const int N32HeroNumFieldNumber = 15;
        private long n32HeroNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long N32HeroNum {
          get { return n32HeroNum_; }
          set {
            n32HeroNum_ = value;
          }
        }

        /// <summary>Field number for the "n32RunesSlotOpenNum" field.</summary>
        public const int N32RunesSlotOpenNumFieldNumber = 16;
        private long n32RunesSlotOpenNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long N32RunesSlotOpenNum {
          get { return n32RunesSlotOpenNum_; }
          set {
            n32RunesSlotOpenNum_ = value;
          }
        }

        /// <summary>Field number for the "n32RunesBagNum" field.</summary>
        public const int N32RunesBagNumFieldNumber = 17;
        private int n32RunesBagNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32RunesBagNum {
          get { return n32RunesBagNum_; }
          set {
            n32RunesBagNum_ = value;
          }
        }

        /// <summary>Field number for the "n32RunesSlotNum" field.</summary>
        public const int N32RunesSlotNumFieldNumber = 18;
        private int n32RunesSlotNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32RunesSlotNum {
          get { return n32RunesSlotNum_; }
          set {
            n32RunesSlotNum_ = value;
          }
        }

        /// <summary>Field number for the "n32FriendsNum" field.</summary>
        public const int N32FriendsNumFieldNumber = 19;
        private int n32FriendsNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32FriendsNum {
          get { return n32FriendsNum_; }
          set {
            n32FriendsNum_ = value;
          }
        }

        /// <summary>Field number for the "n32BlacklistNum" field.</summary>
        public const int N32BlacklistNumFieldNumber = 20;
        private int n32BlacklistNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32BlacklistNum {
          get { return n32BlacklistNum_; }
          set {
            n32BlacklistNum_ = value;
          }
        }

        /// <summary>Field number for the "un32TotalGameInns" field.</summary>
        public const int Un32TotalGameInnsFieldNumber = 21;
        private int un32TotalGameInns_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32TotalGameInns {
          get { return un32TotalGameInns_; }
          set {
            un32TotalGameInns_ = value;
          }
        }

        /// <summary>Field number for the "un32TotalWinInns" field.</summary>
        public const int Un32TotalWinInnsFieldNumber = 22;
        private int un32TotalWinInns_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32TotalWinInns {
          get { return un32TotalWinInns_; }
          set {
            un32TotalWinInns_ = value;
          }
        }

        /// <summary>Field number for the "un32TotalHeroKills" field.</summary>
        public const int Un32TotalHeroKillsFieldNumber = 23;
        private int un32TotalHeroKills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32TotalHeroKills {
          get { return un32TotalHeroKills_; }
          set {
            un32TotalHeroKills_ = value;
          }
        }

        /// <summary>Field number for the "un32TotalDestoryBuildings" field.</summary>
        public const int Un32TotalDestoryBuildingsFieldNumber = 24;
        private int un32TotalDestoryBuildings_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32TotalDestoryBuildings {
          get { return un32TotalDestoryBuildings_; }
          set {
            un32TotalDestoryBuildings_ = value;
          }
        }

        /// <summary>Field number for the "un32TotalDeadTimes" field.</summary>
        public const int Un32TotalDeadTimesFieldNumber = 25;
        private int un32TotalDeadTimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32TotalDeadTimes {
          get { return un32TotalDeadTimes_; }
          set {
            un32TotalDeadTimes_ = value;
          }
        }

        /// <summary>Field number for the "un16UserLv" field.</summary>
        public const int Un16UserLvFieldNumber = 26;
        private int un16UserLv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un16UserLv {
          get { return un16UserLv_; }
          set {
            un16UserLv_ = value;
          }
        }

        /// <summary>Field number for the "un32UserCurLvExp" field.</summary>
        public const int Un32UserCurLvExpFieldNumber = 27;
        private int un32UserCurLvExp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32UserCurLvExp {
          get { return un32UserCurLvExp_; }
          set {
            un32UserCurLvExp_ = value;
          }
        }

        /// <summary>Field number for the "tLastFirstWinTime" field.</summary>
        public const int TLastFirstWinTimeFieldNumber = 28;
        private long tLastFirstWinTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TLastFirstWinTime {
          get { return tLastFirstWinTime_; }
          set {
            tLastFirstWinTime_ = value;
          }
        }

        /// <summary>Field number for the "mGuideSteps" field.</summary>
        public const int MGuideStepsFieldNumber = 29;
        private global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps mGuideSteps_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps MGuideSteps {
          get { return mGuideSteps_; }
          set {
            mGuideSteps_ = value;
          }
        }

        /// <summary>Field number for the "szFriends" field.</summary>
        public const int SzFriendsFieldNumber = 30;
        private string szFriends_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SzFriends {
          get { return szFriends_; }
          set {
            szFriends_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SUserDBData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SUserDBData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EObjType != other.EObjType) return false;
          if (Un64ObjIdx != other.Un64ObjIdx) return false;
          if (EUserCate != other.EUserCate) return false;
          if (EUserPlatform != other.EUserPlatform) return false;
          if (SzUserName != other.SzUserName) return false;
          if (SzUserPwd != other.SzUserPwd) return false;
          if (SzNickName != other.SzNickName) return false;
          if (Un32HeaderID != other.Un32HeaderID) return false;
          if (N8Sex != other.N8Sex) return false;
          if (N64Score != other.N64Score) return false;
          if (N64Diamond != other.N64Diamond) return false;
          if (N64Gold != other.N64Gold) return false;
          if (TRegisteUTCMillisec != other.TRegisteUTCMillisec) return false;
          if (TLastLoginUTCMillisec != other.TLastLoginUTCMillisec) return false;
          if (N32HeroNum != other.N32HeroNum) return false;
          if (N32RunesSlotOpenNum != other.N32RunesSlotOpenNum) return false;
          if (N32RunesBagNum != other.N32RunesBagNum) return false;
          if (N32RunesSlotNum != other.N32RunesSlotNum) return false;
          if (N32FriendsNum != other.N32FriendsNum) return false;
          if (N32BlacklistNum != other.N32BlacklistNum) return false;
          if (Un32TotalGameInns != other.Un32TotalGameInns) return false;
          if (Un32TotalWinInns != other.Un32TotalWinInns) return false;
          if (Un32TotalHeroKills != other.Un32TotalHeroKills) return false;
          if (Un32TotalDestoryBuildings != other.Un32TotalDestoryBuildings) return false;
          if (Un32TotalDeadTimes != other.Un32TotalDeadTimes) return false;
          if (Un16UserLv != other.Un16UserLv) return false;
          if (Un32UserCurLvExp != other.Un32UserCurLvExp) return false;
          if (TLastFirstWinTime != other.TLastFirstWinTime) return false;
          if (!object.Equals(MGuideSteps, other.MGuideSteps)) return false;
          if (SzFriends != other.SzFriends) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EObjType != 0) hash ^= EObjType.GetHashCode();
          if (Un64ObjIdx != 0L) hash ^= Un64ObjIdx.GetHashCode();
          if (EUserCate != 0) hash ^= EUserCate.GetHashCode();
          if (EUserPlatform != 0) hash ^= EUserPlatform.GetHashCode();
          if (SzUserName.Length != 0) hash ^= SzUserName.GetHashCode();
          if (SzUserPwd.Length != 0) hash ^= SzUserPwd.GetHashCode();
          if (SzNickName.Length != 0) hash ^= SzNickName.GetHashCode();
          if (Un32HeaderID != 0) hash ^= Un32HeaderID.GetHashCode();
          if (N8Sex != 0) hash ^= N8Sex.GetHashCode();
          if (N64Score != 0L) hash ^= N64Score.GetHashCode();
          if (N64Diamond != 0L) hash ^= N64Diamond.GetHashCode();
          if (N64Gold != 0L) hash ^= N64Gold.GetHashCode();
          if (TRegisteUTCMillisec != 0L) hash ^= TRegisteUTCMillisec.GetHashCode();
          if (TLastLoginUTCMillisec != 0L) hash ^= TLastLoginUTCMillisec.GetHashCode();
          if (N32HeroNum != 0L) hash ^= N32HeroNum.GetHashCode();
          if (N32RunesSlotOpenNum != 0L) hash ^= N32RunesSlotOpenNum.GetHashCode();
          if (N32RunesBagNum != 0) hash ^= N32RunesBagNum.GetHashCode();
          if (N32RunesSlotNum != 0) hash ^= N32RunesSlotNum.GetHashCode();
          if (N32FriendsNum != 0) hash ^= N32FriendsNum.GetHashCode();
          if (N32BlacklistNum != 0) hash ^= N32BlacklistNum.GetHashCode();
          if (Un32TotalGameInns != 0) hash ^= Un32TotalGameInns.GetHashCode();
          if (Un32TotalWinInns != 0) hash ^= Un32TotalWinInns.GetHashCode();
          if (Un32TotalHeroKills != 0) hash ^= Un32TotalHeroKills.GetHashCode();
          if (Un32TotalDestoryBuildings != 0) hash ^= Un32TotalDestoryBuildings.GetHashCode();
          if (Un32TotalDeadTimes != 0) hash ^= Un32TotalDeadTimes.GetHashCode();
          if (Un16UserLv != 0) hash ^= Un16UserLv.GetHashCode();
          if (Un32UserCurLvExp != 0) hash ^= Un32UserCurLvExp.GetHashCode();
          if (TLastFirstWinTime != 0L) hash ^= TLastFirstWinTime.GetHashCode();
          if (mGuideSteps_ != null) hash ^= MGuideSteps.GetHashCode();
          if (SzFriends.Length != 0) hash ^= SzFriends.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EObjType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) EObjType);
          }
          if (Un64ObjIdx != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Un64ObjIdx);
          }
          if (EUserCate != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) EUserCate);
          }
          if (EUserPlatform != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) EUserPlatform);
          }
          if (SzUserName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SzUserName);
          }
          if (SzUserPwd.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(SzUserPwd);
          }
          if (SzNickName.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(SzNickName);
          }
          if (Un32HeaderID != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Un32HeaderID);
          }
          if (N8Sex != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(N8Sex);
          }
          if (N64Score != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(N64Score);
          }
          if (N64Diamond != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(N64Diamond);
          }
          if (N64Gold != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(N64Gold);
          }
          if (TRegisteUTCMillisec != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(TRegisteUTCMillisec);
          }
          if (TLastLoginUTCMillisec != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(TLastLoginUTCMillisec);
          }
          if (N32HeroNum != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(N32HeroNum);
          }
          if (N32RunesSlotOpenNum != 0L) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(N32RunesSlotOpenNum);
          }
          if (N32RunesBagNum != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(N32RunesBagNum);
          }
          if (N32RunesSlotNum != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(N32RunesSlotNum);
          }
          if (N32FriendsNum != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(N32FriendsNum);
          }
          if (N32BlacklistNum != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(N32BlacklistNum);
          }
          if (Un32TotalGameInns != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(Un32TotalGameInns);
          }
          if (Un32TotalWinInns != 0) {
            output.WriteRawTag(176, 1);
            output.WriteInt32(Un32TotalWinInns);
          }
          if (Un32TotalHeroKills != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(Un32TotalHeroKills);
          }
          if (Un32TotalDestoryBuildings != 0) {
            output.WriteRawTag(192, 1);
            output.WriteInt32(Un32TotalDestoryBuildings);
          }
          if (Un32TotalDeadTimes != 0) {
            output.WriteRawTag(200, 1);
            output.WriteInt32(Un32TotalDeadTimes);
          }
          if (Un16UserLv != 0) {
            output.WriteRawTag(208, 1);
            output.WriteInt32(Un16UserLv);
          }
          if (Un32UserCurLvExp != 0) {
            output.WriteRawTag(216, 1);
            output.WriteInt32(Un32UserCurLvExp);
          }
          if (TLastFirstWinTime != 0L) {
            output.WriteRawTag(224, 1);
            output.WriteInt64(TLastFirstWinTime);
          }
          if (mGuideSteps_ != null) {
            output.WriteRawTag(234, 1);
            output.WriteMessage(MGuideSteps);
          }
          if (SzFriends.Length != 0) {
            output.WriteRawTag(242, 1);
            output.WriteString(SzFriends);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EObjType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EObjType);
          }
          if (Un64ObjIdx != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Un64ObjIdx);
          }
          if (EUserCate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EUserCate);
          }
          if (EUserPlatform != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EUserPlatform);
          }
          if (SzUserName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SzUserName);
          }
          if (SzUserPwd.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SzUserPwd);
          }
          if (SzNickName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SzNickName);
          }
          if (Un32HeaderID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32HeaderID);
          }
          if (N8Sex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N8Sex);
          }
          if (N64Score != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Score);
          }
          if (N64Diamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Diamond);
          }
          if (N64Gold != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Gold);
          }
          if (TRegisteUTCMillisec != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TRegisteUTCMillisec);
          }
          if (TLastLoginUTCMillisec != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TLastLoginUTCMillisec);
          }
          if (N32HeroNum != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(N32HeroNum);
          }
          if (N32RunesSlotOpenNum != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(N32RunesSlotOpenNum);
          }
          if (N32RunesBagNum != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(N32RunesBagNum);
          }
          if (N32RunesSlotNum != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(N32RunesSlotNum);
          }
          if (N32FriendsNum != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(N32FriendsNum);
          }
          if (N32BlacklistNum != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(N32BlacklistNum);
          }
          if (Un32TotalGameInns != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalGameInns);
          }
          if (Un32TotalWinInns != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalWinInns);
          }
          if (Un32TotalHeroKills != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalHeroKills);
          }
          if (Un32TotalDestoryBuildings != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalDestoryBuildings);
          }
          if (Un32TotalDeadTimes != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalDeadTimes);
          }
          if (Un16UserLv != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un16UserLv);
          }
          if (Un32UserCurLvExp != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32UserCurLvExp);
          }
          if (TLastFirstWinTime != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TLastFirstWinTime);
          }
          if (mGuideSteps_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(MGuideSteps);
          }
          if (SzFriends.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(SzFriends);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SUserDBData other) {
          if (other == null) {
            return;
          }
          if (other.EObjType != 0) {
            EObjType = other.EObjType;
          }
          if (other.Un64ObjIdx != 0L) {
            Un64ObjIdx = other.Un64ObjIdx;
          }
          if (other.EUserCate != 0) {
            EUserCate = other.EUserCate;
          }
          if (other.EUserPlatform != 0) {
            EUserPlatform = other.EUserPlatform;
          }
          if (other.SzUserName.Length != 0) {
            SzUserName = other.SzUserName;
          }
          if (other.SzUserPwd.Length != 0) {
            SzUserPwd = other.SzUserPwd;
          }
          if (other.SzNickName.Length != 0) {
            SzNickName = other.SzNickName;
          }
          if (other.Un32HeaderID != 0) {
            Un32HeaderID = other.Un32HeaderID;
          }
          if (other.N8Sex != 0) {
            N8Sex = other.N8Sex;
          }
          if (other.N64Score != 0L) {
            N64Score = other.N64Score;
          }
          if (other.N64Diamond != 0L) {
            N64Diamond = other.N64Diamond;
          }
          if (other.N64Gold != 0L) {
            N64Gold = other.N64Gold;
          }
          if (other.TRegisteUTCMillisec != 0L) {
            TRegisteUTCMillisec = other.TRegisteUTCMillisec;
          }
          if (other.TLastLoginUTCMillisec != 0L) {
            TLastLoginUTCMillisec = other.TLastLoginUTCMillisec;
          }
          if (other.N32HeroNum != 0L) {
            N32HeroNum = other.N32HeroNum;
          }
          if (other.N32RunesSlotOpenNum != 0L) {
            N32RunesSlotOpenNum = other.N32RunesSlotOpenNum;
          }
          if (other.N32RunesBagNum != 0) {
            N32RunesBagNum = other.N32RunesBagNum;
          }
          if (other.N32RunesSlotNum != 0) {
            N32RunesSlotNum = other.N32RunesSlotNum;
          }
          if (other.N32FriendsNum != 0) {
            N32FriendsNum = other.N32FriendsNum;
          }
          if (other.N32BlacklistNum != 0) {
            N32BlacklistNum = other.N32BlacklistNum;
          }
          if (other.Un32TotalGameInns != 0) {
            Un32TotalGameInns = other.Un32TotalGameInns;
          }
          if (other.Un32TotalWinInns != 0) {
            Un32TotalWinInns = other.Un32TotalWinInns;
          }
          if (other.Un32TotalHeroKills != 0) {
            Un32TotalHeroKills = other.Un32TotalHeroKills;
          }
          if (other.Un32TotalDestoryBuildings != 0) {
            Un32TotalDestoryBuildings = other.Un32TotalDestoryBuildings;
          }
          if (other.Un32TotalDeadTimes != 0) {
            Un32TotalDeadTimes = other.Un32TotalDeadTimes;
          }
          if (other.Un16UserLv != 0) {
            Un16UserLv = other.Un16UserLv;
          }
          if (other.Un32UserCurLvExp != 0) {
            Un32UserCurLvExp = other.Un32UserCurLvExp;
          }
          if (other.TLastFirstWinTime != 0L) {
            TLastFirstWinTime = other.TLastFirstWinTime;
          }
          if (other.mGuideSteps_ != null) {
            if (mGuideSteps_ == null) {
              mGuideSteps_ = new global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps();
            }
            MGuideSteps.MergeFrom(other.MGuideSteps);
          }
          if (other.SzFriends.Length != 0) {
            SzFriends = other.SzFriends;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                eObjType_ = (global::CSToSS.UserInfo.Types.SUserDBData.Types.EObjectType) input.ReadEnum();
                break;
              }
              case 16: {
                Un64ObjIdx = input.ReadInt64();
                break;
              }
              case 24: {
                eUserCate_ = (global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserCate) input.ReadEnum();
                break;
              }
              case 32: {
                eUserPlatform_ = (global::CSToSS.UserInfo.Types.SUserDBData.Types.EUserPlatform) input.ReadEnum();
                break;
              }
              case 42: {
                SzUserName = input.ReadString();
                break;
              }
              case 50: {
                SzUserPwd = input.ReadString();
                break;
              }
              case 58: {
                SzNickName = input.ReadString();
                break;
              }
              case 64: {
                Un32HeaderID = input.ReadInt32();
                break;
              }
              case 72: {
                N8Sex = input.ReadInt32();
                break;
              }
              case 80: {
                N64Score = input.ReadInt64();
                break;
              }
              case 88: {
                N64Diamond = input.ReadInt64();
                break;
              }
              case 96: {
                N64Gold = input.ReadInt64();
                break;
              }
              case 104: {
                TRegisteUTCMillisec = input.ReadInt64();
                break;
              }
              case 112: {
                TLastLoginUTCMillisec = input.ReadInt64();
                break;
              }
              case 120: {
                N32HeroNum = input.ReadInt64();
                break;
              }
              case 128: {
                N32RunesSlotOpenNum = input.ReadInt64();
                break;
              }
              case 136: {
                N32RunesBagNum = input.ReadInt32();
                break;
              }
              case 144: {
                N32RunesSlotNum = input.ReadInt32();
                break;
              }
              case 152: {
                N32FriendsNum = input.ReadInt32();
                break;
              }
              case 160: {
                N32BlacklistNum = input.ReadInt32();
                break;
              }
              case 168: {
                Un32TotalGameInns = input.ReadInt32();
                break;
              }
              case 176: {
                Un32TotalWinInns = input.ReadInt32();
                break;
              }
              case 184: {
                Un32TotalHeroKills = input.ReadInt32();
                break;
              }
              case 192: {
                Un32TotalDestoryBuildings = input.ReadInt32();
                break;
              }
              case 200: {
                Un32TotalDeadTimes = input.ReadInt32();
                break;
              }
              case 208: {
                Un16UserLv = input.ReadInt32();
                break;
              }
              case 216: {
                Un32UserCurLvExp = input.ReadInt32();
                break;
              }
              case 224: {
                TLastFirstWinTime = input.ReadInt64();
                break;
              }
              case 234: {
                if (mGuideSteps_ == null) {
                  mGuideSteps_ = new global::CSToSS.UserInfo.Types.SUserDBData.Types.SUserGuideSteps();
                }
                input.ReadMessage(mGuideSteps_);
                break;
              }
              case 242: {
                SzFriends = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SUserDBData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum EObjectType {
            [pbr::OriginalName("eObjectType_None")] None = 0,
            [pbr::OriginalName("eObjectType_Guild")] Guild = 1,
            [pbr::OriginalName("eObjectType_User")] User = 2,
            [pbr::OriginalName("eObjectType_HeroBegin")] HeroBegin = 10000,
            [pbr::OriginalName("eObjectType_NPCBegin")] Npcbegin = 20000,
            [pbr::OriginalName("eObjectType_GoodsBegin")] GoodsBegin = 30000,
          }

          public enum EUserCate {
            [pbr::OriginalName("eUserCate_Admin")] Admin = 0,
            [pbr::OriginalName("eUserCate_GM")] Gm = 1,
            [pbr::OriginalName("eUserCate_Robot")] Robot = 2,
            [pbr::OriginalName("eUserCate_DiamondVIP")] DiamondVip = 3,
            [pbr::OriginalName("eUserCate_GloldVIP")] GloldVip = 4,
            [pbr::OriginalName("eUserCate_SilverVIP")] SilverVip = 5,
            [pbr::OriginalName("eUserCate_CopperVIP")] CopperVip = 6,
            [pbr::OriginalName("eUserCate_Normal")] Normal = 7,
          }

          public enum EUserPlatform {
            [pbr::OriginalName("eUP_None")] EUpNone = 0,
            [pbr::OriginalName("eUP_Apple")] EUpApple = 1,
            [pbr::OriginalName("eUP_QQ")] EUpQq = 2,
            [pbr::OriginalName("eUP_360")] EUp360 = 3,
          }

          public sealed partial class SUserGuideSteps : pb::IMessage<SUserGuideSteps> {
            private static readonly pb::MessageParser<SUserGuideSteps> _parser = new pb::MessageParser<SUserGuideSteps>(() => new SUserGuideSteps());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SUserGuideSteps> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::CSToSS.UserInfo.Types.SUserDBData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SUserGuideSteps() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SUserGuideSteps(SUserGuideSteps other) : this() {
              szCSContinueGuide_ = other.szCSContinueGuide_;
              szCSNoContinueGuide_ = other.szCSNoContinueGuide_;
              szSSGuides_ = other.szSSGuides_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SUserGuideSteps Clone() {
              return new SUserGuideSteps(this);
            }

            /// <summary>Field number for the "szCSContinueGuide" field.</summary>
            public const int SzCSContinueGuideFieldNumber = 1;
            private string szCSContinueGuide_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SzCSContinueGuide {
              get { return szCSContinueGuide_; }
              set {
                szCSContinueGuide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "szCSNoContinueGuide" field.</summary>
            public const int SzCSNoContinueGuideFieldNumber = 2;
            private string szCSNoContinueGuide_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SzCSNoContinueGuide {
              get { return szCSNoContinueGuide_; }
              set {
                szCSNoContinueGuide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "szSSGuides" field.</summary>
            public const int SzSSGuidesFieldNumber = 3;
            private string szSSGuides_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SzSSGuides {
              get { return szSSGuides_; }
              set {
                szSSGuides_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SUserGuideSteps);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SUserGuideSteps other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SzCSContinueGuide != other.SzCSContinueGuide) return false;
              if (SzCSNoContinueGuide != other.SzCSNoContinueGuide) return false;
              if (SzSSGuides != other.SzSSGuides) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SzCSContinueGuide.Length != 0) hash ^= SzCSContinueGuide.GetHashCode();
              if (SzCSNoContinueGuide.Length != 0) hash ^= SzCSNoContinueGuide.GetHashCode();
              if (SzSSGuides.Length != 0) hash ^= SzSSGuides.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SzCSContinueGuide.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(SzCSContinueGuide);
              }
              if (SzCSNoContinueGuide.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(SzCSNoContinueGuide);
              }
              if (SzSSGuides.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(SzSSGuides);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SzCSContinueGuide.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SzCSContinueGuide);
              }
              if (SzCSNoContinueGuide.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SzCSNoContinueGuide);
              }
              if (SzSSGuides.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SzSSGuides);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SUserGuideSteps other) {
              if (other == null) {
                return;
              }
              if (other.SzCSContinueGuide.Length != 0) {
                SzCSContinueGuide = other.SzCSContinueGuide;
              }
              if (other.SzCSNoContinueGuide.Length != 0) {
                SzCSNoContinueGuide = other.SzCSNoContinueGuide;
              }
              if (other.SzSSGuides.Length != 0) {
                SzSSGuides = other.SzSSGuides;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    SzCSContinueGuide = input.ReadString();
                    break;
                  }
                  case 18: {
                    SzCSNoContinueGuide = input.ReadString();
                    break;
                  }
                  case 26: {
                    SzSSGuides = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class SUserRunesRuntimeData : pb::IMessage<SUserRunesRuntimeData> {
        private static readonly pb::MessageParser<SUserRunesRuntimeData> _parser = new pb::MessageParser<SUserRunesRuntimeData>(() => new SUserRunesRuntimeData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SUserRunesRuntimeData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.UserInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRunesRuntimeData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRunesRuntimeData(SUserRunesRuntimeData other) : this() {
          un32RunesTypeID_ = other.un32RunesTypeID_;
          n16Pos_ = other.n16Pos_;
          n16Num_ = other.n16Num_;
          n16RemainTimes_ = other.n16RemainTimes_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRunesRuntimeData Clone() {
          return new SUserRunesRuntimeData(this);
        }

        /// <summary>Field number for the "un32RunesTypeID" field.</summary>
        public const int Un32RunesTypeIDFieldNumber = 1;
        private int un32RunesTypeID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32RunesTypeID {
          get { return un32RunesTypeID_; }
          set {
            un32RunesTypeID_ = value;
          }
        }

        /// <summary>Field number for the "n16Pos" field.</summary>
        public const int N16PosFieldNumber = 2;
        private int n16Pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N16Pos {
          get { return n16Pos_; }
          set {
            n16Pos_ = value;
          }
        }

        /// <summary>Field number for the "n16Num" field.</summary>
        public const int N16NumFieldNumber = 3;
        private int n16Num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N16Num {
          get { return n16Num_; }
          set {
            n16Num_ = value;
          }
        }

        /// <summary>Field number for the "n16RemainTimes" field.</summary>
        public const int N16RemainTimesFieldNumber = 4;
        private int n16RemainTimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N16RemainTimes {
          get { return n16RemainTimes_; }
          set {
            n16RemainTimes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SUserRunesRuntimeData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SUserRunesRuntimeData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Un32RunesTypeID != other.Un32RunesTypeID) return false;
          if (N16Pos != other.N16Pos) return false;
          if (N16Num != other.N16Num) return false;
          if (N16RemainTimes != other.N16RemainTimes) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Un32RunesTypeID != 0) hash ^= Un32RunesTypeID.GetHashCode();
          if (N16Pos != 0) hash ^= N16Pos.GetHashCode();
          if (N16Num != 0) hash ^= N16Num.GetHashCode();
          if (N16RemainTimes != 0) hash ^= N16RemainTimes.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Un32RunesTypeID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Un32RunesTypeID);
          }
          if (N16Pos != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(N16Pos);
          }
          if (N16Num != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(N16Num);
          }
          if (N16RemainTimes != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(N16RemainTimes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Un32RunesTypeID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32RunesTypeID);
          }
          if (N16Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N16Pos);
          }
          if (N16Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N16Num);
          }
          if (N16RemainTimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N16RemainTimes);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SUserRunesRuntimeData other) {
          if (other == null) {
            return;
          }
          if (other.Un32RunesTypeID != 0) {
            Un32RunesTypeID = other.Un32RunesTypeID;
          }
          if (other.N16Pos != 0) {
            N16Pos = other.N16Pos;
          }
          if (other.N16Num != 0) {
            N16Num = other.N16Num;
          }
          if (other.N16RemainTimes != 0) {
            N16RemainTimes = other.N16RemainTimes;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Un32RunesTypeID = input.ReadInt32();
                break;
              }
              case 16: {
                N16Pos = input.ReadInt32();
                break;
              }
              case 24: {
                N16Num = input.ReadInt32();
                break;
              }
              case 32: {
                N16RemainTimes = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UserRoomInfo : pb::IMessage<UserRoomInfo> {
    private static readonly pb::MessageParser<UserRoomInfo> _parser = new pb::MessageParser<UserRoomInfo>(() => new UserRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRoomInfo(UserRoomInfo other) : this() {
      ifmaster_ = other.ifmaster_;
      heroid_ = other.heroid_;
      guid_ = other.guid_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRoomInfo Clone() {
      return new UserRoomInfo(this);
    }

    /// <summary>Field number for the "ifmaster" field.</summary>
    public const int IfmasterFieldNumber = 1;
    private bool ifmaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ifmaster {
      get { return ifmaster_; }
      set {
        ifmaster_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 2;
    private uint heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ifmaster != other.Ifmaster) return false;
      if (Heroid != other.Heroid) return false;
      if (Guid != other.Guid) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ifmaster != false) hash ^= Ifmaster.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ifmaster != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ifmaster);
      }
      if (Heroid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Heroid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Pos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ifmaster != false) {
        size += 1 + 1;
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ifmaster != false) {
        Ifmaster = other.Ifmaster;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ifmaster = input.ReadBool();
            break;
          }
          case 16: {
            Heroid = input.ReadUInt32();
            break;
          }
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderBeginNewBattle : pb::IMessage<OrderBeginNewBattle> {
    private static readonly pb::MessageParser<OrderBeginNewBattle> _parser = new pb::MessageParser<OrderBeginNewBattle>(() => new OrderBeginNewBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBeginNewBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBeginNewBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBeginNewBattle(OrderBeginNewBattle other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      state_ = other.state_;
      mapid_ = other.mapid_;
      ssid_ = other.ssid_;
      userRoomInfo_ = other.userRoomInfo_.Clone();
      userinfo_ = other.userinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBeginNewBattle Clone() {
      return new OrderBeginNewBattle(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 4;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 5;
    private int ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    /// <summary>Field number for the "userRoomInfo" field.</summary>
    public const int UserRoomInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::CSToSS.UserRoomInfo> _repeated_userRoomInfo_codec
        = pb::FieldCodec.ForMessage(50, global::CSToSS.UserRoomInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.UserRoomInfo> userRoomInfo_ = new pbc::RepeatedField<global::CSToSS.UserRoomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.UserRoomInfo> UserRoomInfo {
      get { return userRoomInfo_; }
    }

    /// <summary>Field number for the "userinfo" field.</summary>
    public const int UserinfoFieldNumber = 7;
    private static readonly pb::FieldCodec<global::CSToSS.UserInfo> _repeated_userinfo_codec
        = pb::FieldCodec.ForMessage(58, global::CSToSS.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.UserInfo> userinfo_ = new pbc::RepeatedField<global::CSToSS.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.UserInfo> Userinfo {
      get { return userinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBeginNewBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBeginNewBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (State != other.State) return false;
      if (Mapid != other.Mapid) return false;
      if (Ssid != other.Ssid) return false;
      if(!userRoomInfo_.Equals(other.userRoomInfo_)) return false;
      if(!userinfo_.Equals(other.userinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      hash ^= userRoomInfo_.GetHashCode();
      hash ^= userinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (Mapid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mapid);
      }
      if (Ssid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ssid);
      }
      userRoomInfo_.WriteTo(output, _repeated_userRoomInfo_codec);
      userinfo_.WriteTo(output, _repeated_userinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
      }
      size += userRoomInfo_.CalculateSize(_repeated_userRoomInfo_codec);
      size += userinfo_.CalculateSize(_repeated_userinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBeginNewBattle other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      userRoomInfo_.Add(other.userRoomInfo_);
      userinfo_.Add(other.userinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            Mapid = input.ReadInt32();
            break;
          }
          case 40: {
            Ssid = input.ReadInt32();
            break;
          }
          case 50: {
            userRoomInfo_.AddEntriesFrom(input, _repeated_userRoomInfo_codec);
            break;
          }
          case 58: {
            userinfo_.AddEntriesFrom(input, _repeated_userinfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyBattleStateChange : pb::IMessage<NotifyBattleStateChange> {
    private static readonly pb::MessageParser<NotifyBattleStateChange> _parser = new pb::MessageParser<NotifyBattleStateChange>(() => new NotifyBattleStateChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBattleStateChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleStateChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleStateChange(NotifyBattleStateChange other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleStateChange Clone() {
      return new NotifyBattleStateChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBattleStateChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBattleStateChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBattleStateChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUsetNetInfoChange : pb::IMessage<NotifyUsetNetInfoChange> {
    private static readonly pb::MessageParser<NotifyUsetNetInfoChange> _parser = new pb::MessageParser<NotifyUsetNetInfoChange>(() => new NotifyUsetNetInfoChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUsetNetInfoChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUsetNetInfoChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUsetNetInfoChange(NotifyUsetNetInfoChange other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      netinfo_ = other.netinfo_ != null ? other.netinfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUsetNetInfoChange Clone() {
      return new NotifyUsetNetInfoChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "netinfo" field.</summary>
    public const int NetinfoFieldNumber = 3;
    private global::CSToSS.SUserNetInfo netinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.SUserNetInfo Netinfo {
      get { return netinfo_; }
      set {
        netinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUsetNetInfoChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUsetNetInfoChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Netinfo, other.Netinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (netinfo_ != null) hash ^= Netinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (netinfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Netinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (netinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Netinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUsetNetInfoChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.netinfo_ != null) {
        if (netinfo_ == null) {
          netinfo_ = new global::CSToSS.SUserNetInfo();
        }
        Netinfo.MergeFrom(other.Netinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (netinfo_ == null) {
              netinfo_ = new global::CSToSS.SUserNetInfo();
            }
            input.ReadMessage(netinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingRet : pb::IMessage<PingRet> {
    private static readonly pb::MessageParser<PingRet> _parser = new pb::MessageParser<PingRet>(() => new PingRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet(PingRet other) : this() {
      msgid_ = other.msgid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet Clone() {
      return new PingRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyBuffCfgList : pb::IMessage<NotifyBuffCfgList> {
    private static readonly pb::MessageParser<NotifyBuffCfgList> _parser = new pb::MessageParser<NotifyBuffCfgList>(() => new NotifyBuffCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBuffCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBuffCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBuffCfgList(NotifyBuffCfgList other) : this() {
      msgid_ = other.msgid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBuffCfgList Clone() {
      return new NotifyBuffCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBuffCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBuffCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBuffCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillCfgList : pb::IMessage<NotifySkillCfgList> {
    private static readonly pb::MessageParser<NotifySkillCfgList> _parser = new pb::MessageParser<NotifySkillCfgList>(() => new NotifySkillCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillCfgList(NotifySkillCfgList other) : this() {
      msgid_ = other.msgid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillCfgList Clone() {
      return new NotifySkillCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyNPCCfgList : pb::IMessage<NotifyNPCCfgList> {
    private static readonly pb::MessageParser<NotifyNPCCfgList> _parser = new pb::MessageParser<NotifyNPCCfgList>(() => new NotifyNPCCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyNPCCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNPCCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNPCCfgList(NotifyNPCCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNPCCfgList Clone() {
      return new NotifyNPCCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyNPCCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyNPCCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyNPCCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyHeroCfgList : pb::IMessage<NotifyHeroCfgList> {
    private static readonly pb::MessageParser<NotifyHeroCfgList> _parser = new pb::MessageParser<NotifyHeroCfgList>(() => new NotifyHeroCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHeroCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroCfgList(NotifyHeroCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroCfgList Clone() {
      return new NotifyHeroCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHeroCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHeroCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHeroCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyShopCfgList : pb::IMessage<NotifyShopCfgList> {
    private static readonly pb::MessageParser<NotifyShopCfgList> _parser = new pb::MessageParser<NotifyShopCfgList>(() => new NotifyShopCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyShopCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyShopCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyShopCfgList(NotifyShopCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyShopCfgList Clone() {
      return new NotifyShopCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyShopCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyShopCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyShopCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyGoodsCfgList : pb::IMessage<NotifyGoodsCfgList> {
    private static readonly pb::MessageParser<NotifyGoodsCfgList> _parser = new pb::MessageParser<NotifyGoodsCfgList>(() => new NotifyGoodsCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyGoodsCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsCfgList(NotifyGoodsCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsCfgList Clone() {
      return new NotifyGoodsCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyGoodsCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyGoodsCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyGoodsCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyPublicLuaStr : pb::IMessage<NotifyPublicLuaStr> {
    private static readonly pb::MessageParser<NotifyPublicLuaStr> _parser = new pb::MessageParser<NotifyPublicLuaStr>(() => new NotifyPublicLuaStr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPublicLuaStr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPublicLuaStr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPublicLuaStr(NotifyPublicLuaStr other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPublicLuaStr Clone() {
      return new NotifyPublicLuaStr(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPublicLuaStr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPublicLuaStr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPublicLuaStr other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRunesCfgList : pb::IMessage<NotifyRunesCfgList> {
    private static readonly pb::MessageParser<NotifyRunesCfgList> _parser = new pb::MessageParser<NotifyRunesCfgList>(() => new NotifyRunesCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRunesCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesCfgList(NotifyRunesCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesCfgList Clone() {
      return new NotifyRunesCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRunesCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRunesCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRunesCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRunesSlotCfgList : pb::IMessage<NotifyRunesSlotCfgList> {
    private static readonly pb::MessageParser<NotifyRunesSlotCfgList> _parser = new pb::MessageParser<NotifyRunesSlotCfgList>(() => new NotifyRunesSlotCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRunesSlotCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesSlotCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesSlotCfgList(NotifyRunesSlotCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesSlotCfgList Clone() {
      return new NotifyRunesSlotCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRunesSlotCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRunesSlotCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRunesSlotCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyWildMonsterCfgList : pb::IMessage<NotifyWildMonsterCfgList> {
    private static readonly pb::MessageParser<NotifyWildMonsterCfgList> _parser = new pb::MessageParser<NotifyWildMonsterCfgList>(() => new NotifyWildMonsterCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyWildMonsterCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyWildMonsterCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyWildMonsterCfgList(NotifyWildMonsterCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyWildMonsterCfgList Clone() {
      return new NotifyWildMonsterCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyWildMonsterCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyWildMonsterCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyWildMonsterCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUserInfoChange : pb::IMessage<NotifyUserInfoChange> {
    private static readonly pb::MessageParser<NotifyUserInfoChange> _parser = new pb::MessageParser<NotifyUserInfoChange>(() => new NotifyUserInfoChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserInfoChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserInfoChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserInfoChange(NotifyUserInfoChange other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserInfoChange Clone() {
      return new NotifyUserInfoChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserInfoChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserInfoChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Gold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserInfoChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyNewSkillCfgList : pb::IMessage<NotifyNewSkillCfgList> {
    private static readonly pb::MessageParser<NotifyNewSkillCfgList> _parser = new pb::MessageParser<NotifyNewSkillCfgList>(() => new NotifyNewSkillCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyNewSkillCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewSkillCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewSkillCfgList(NotifyNewSkillCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewSkillCfgList Clone() {
      return new NotifyNewSkillCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyNewSkillCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyNewSkillCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyNewSkillCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelAccountCfgCfgList : pb::IMessage<NotifySkillModelAccountCfgCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelAccountCfgCfgList> _parser = new pb::MessageParser<NotifySkillModelAccountCfgCfgList>(() => new NotifySkillModelAccountCfgCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelAccountCfgCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelAccountCfgCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelAccountCfgCfgList(NotifySkillModelAccountCfgCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelAccountCfgCfgList Clone() {
      return new NotifySkillModelAccountCfgCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelAccountCfgCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelAccountCfgCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelAccountCfgCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelRangeCfgList : pb::IMessage<NotifySkillModelRangeCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelRangeCfgList> _parser = new pb::MessageParser<NotifySkillModelRangeCfgList>(() => new NotifySkillModelRangeCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelRangeCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelRangeCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelRangeCfgList(NotifySkillModelRangeCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelRangeCfgList Clone() {
      return new NotifySkillModelRangeCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelRangeCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelRangeCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelRangeCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelLeadingCfgList : pb::IMessage<NotifySkillModelLeadingCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelLeadingCfgList> _parser = new pb::MessageParser<NotifySkillModelLeadingCfgList>(() => new NotifySkillModelLeadingCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelLeadingCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeadingCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeadingCfgList(NotifySkillModelLeadingCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeadingCfgList Clone() {
      return new NotifySkillModelLeadingCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelLeadingCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelLeadingCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelLeadingCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelEmitCfgList : pb::IMessage<NotifySkillModelEmitCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelEmitCfgList> _parser = new pb::MessageParser<NotifySkillModelEmitCfgList>(() => new NotifySkillModelEmitCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelEmitCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitCfgList(NotifySkillModelEmitCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitCfgList Clone() {
      return new NotifySkillModelEmitCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelEmitCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelEmitCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelEmitCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelBufCfgList : pb::IMessage<NotifySkillModelBufCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelBufCfgList> _parser = new pb::MessageParser<NotifySkillModelBufCfgList>(() => new NotifySkillModelBufCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelBufCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelBufCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelBufCfgList(NotifySkillModelBufCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelBufCfgList Clone() {
      return new NotifySkillModelBufCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelBufCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelBufCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelBufCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelSummonCfgList : pb::IMessage<NotifySkillModelSummonCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelSummonCfgList> _parser = new pb::MessageParser<NotifySkillModelSummonCfgList>(() => new NotifySkillModelSummonCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelSummonCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSummonCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSummonCfgList(NotifySkillModelSummonCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSummonCfgList Clone() {
      return new NotifySkillModelSummonCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelSummonCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelSummonCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelSummonCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelMoveCfgList : pb::IMessage<NotifySkillModelMoveCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelMoveCfgList> _parser = new pb::MessageParser<NotifySkillModelMoveCfgList>(() => new NotifySkillModelMoveCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelMoveCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelMoveCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelMoveCfgList(NotifySkillModelMoveCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelMoveCfgList Clone() {
      return new NotifySkillModelMoveCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelMoveCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelMoveCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelMoveCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelSwitchCfgList : pb::IMessage<NotifySkillModelSwitchCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelSwitchCfgList> _parser = new pb::MessageParser<NotifySkillModelSwitchCfgList>(() => new NotifySkillModelSwitchCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelSwitchCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSwitchCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSwitchCfgList(NotifySkillModelSwitchCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelSwitchCfgList Clone() {
      return new NotifySkillModelSwitchCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelSwitchCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelSwitchCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelSwitchCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelPurificationCfgList : pb::IMessage<NotifySkillModelPurificationCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelPurificationCfgList> _parser = new pb::MessageParser<NotifySkillModelPurificationCfgList>(() => new NotifySkillModelPurificationCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelPurificationCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurificationCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurificationCfgList(NotifySkillModelPurificationCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurificationCfgList Clone() {
      return new NotifySkillModelPurificationCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelPurificationCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelPurificationCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelPurificationCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelLinkCfgList : pb::IMessage<NotifySkillModelLinkCfgList> {
    private static readonly pb::MessageParser<NotifySkillModelLinkCfgList> _parser = new pb::MessageParser<NotifySkillModelLinkCfgList>(() => new NotifySkillModelLinkCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelLinkCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLinkCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLinkCfgList(NotifySkillModelLinkCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLinkCfgList Clone() {
      return new NotifySkillModelLinkCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelLinkCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelLinkCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelLinkCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyPassitiveSkillCfgList : pb::IMessage<NotifyPassitiveSkillCfgList> {
    private static readonly pb::MessageParser<NotifyPassitiveSkillCfgList> _parser = new pb::MessageParser<NotifyPassitiveSkillCfgList>(() => new NotifyPassitiveSkillCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveSkillCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillCfgList(NotifyPassitiveSkillCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillCfgList Clone() {
      return new NotifyPassitiveSkillCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveSkillCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveSkillCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveSkillCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyPassitiveEffectBloodSeekCfgList : pb::IMessage<NotifyPassitiveEffectBloodSeekCfgList> {
    private static readonly pb::MessageParser<NotifyPassitiveEffectBloodSeekCfgList> _parser = new pb::MessageParser<NotifyPassitiveEffectBloodSeekCfgList>(() => new NotifyPassitiveEffectBloodSeekCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveEffectBloodSeekCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectBloodSeekCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectBloodSeekCfgList(NotifyPassitiveEffectBloodSeekCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectBloodSeekCfgList Clone() {
      return new NotifyPassitiveEffectBloodSeekCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveEffectBloodSeekCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveEffectBloodSeekCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveEffectBloodSeekCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyPassitiveEffectReboundCfgList : pb::IMessage<NotifyPassitiveEffectReboundCfgList> {
    private static readonly pb::MessageParser<NotifyPassitiveEffectReboundCfgList> _parser = new pb::MessageParser<NotifyPassitiveEffectReboundCfgList>(() => new NotifyPassitiveEffectReboundCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveEffectReboundCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReboundCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReboundCfgList(NotifyPassitiveEffectReboundCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReboundCfgList Clone() {
      return new NotifyPassitiveEffectReboundCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveEffectReboundCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveEffectReboundCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveEffectReboundCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyPassitiveEffectReliveCfgList : pb::IMessage<NotifyPassitiveEffectReliveCfgList> {
    private static readonly pb::MessageParser<NotifyPassitiveEffectReliveCfgList> _parser = new pb::MessageParser<NotifyPassitiveEffectReliveCfgList>(() => new NotifyPassitiveEffectReliveCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveEffectReliveCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReliveCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReliveCfgList(NotifyPassitiveEffectReliveCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveEffectReliveCfgList Clone() {
      return new NotifyPassitiveEffectReliveCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveEffectReliveCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveEffectReliveCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveEffectReliveCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRobotAICfgList : pb::IMessage<NotifyRobotAICfgList> {
    private static readonly pb::MessageParser<NotifyRobotAICfgList> _parser = new pb::MessageParser<NotifyRobotAICfgList>(() => new NotifyRobotAICfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRobotAICfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAICfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAICfgList(NotifyRobotAICfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAICfgList Clone() {
      return new NotifyRobotAICfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRobotAICfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRobotAICfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRobotAICfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRobotAIPathCfgList : pb::IMessage<NotifyRobotAIPathCfgList> {
    private static readonly pb::MessageParser<NotifyRobotAIPathCfgList> _parser = new pb::MessageParser<NotifyRobotAIPathCfgList>(() => new NotifyRobotAIPathCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRobotAIPathCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAIPathCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAIPathCfgList(NotifyRobotAIPathCfgList other) : this() {
      msgid_ = other.msgid_;
      cfg_ = other.cfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRobotAIPathCfgList Clone() {
      return new NotifyRobotAIPathCfgList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "cfg" field.</summary>
    public const int CfgFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cfg_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cfg_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cfg {
      get { return cfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRobotAIPathCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRobotAIPathCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!cfg_.Equals(other.cfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= cfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      cfg_.WriteTo(output, _repeated_cfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += cfg_.CalculateSize(_repeated_cfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRobotAIPathCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      cfg_.Add(other.cfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            cfg_.AddEntriesFrom(input, _repeated_cfg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyOBUser : pb::IMessage<NotifyOBUser> {
    private static readonly pb::MessageParser<NotifyOBUser> _parser = new pb::MessageParser<NotifyOBUser>(() => new NotifyOBUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOBUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBUser(NotifyOBUser other) : this() {
      msgid_ = other.msgid_;
      obinfo_ = other.obinfo_.Clone();
      battleid_ = other.battleid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBUser Clone() {
      return new NotifyOBUser(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "obinfo" field.</summary>
    public const int ObinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CSToSS.NotifyOBUser.Types.OBPosInfo> _repeated_obinfo_codec
        = pb::FieldCodec.ForMessage(18, global::CSToSS.NotifyOBUser.Types.OBPosInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.NotifyOBUser.Types.OBPosInfo> obinfo_ = new pbc::RepeatedField<global::CSToSS.NotifyOBUser.Types.OBPosInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.NotifyOBUser.Types.OBPosInfo> Obinfo {
      get { return obinfo_; }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 3;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyOBUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyOBUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!obinfo_.Equals(other.obinfo_)) return false;
      if (Battleid != other.Battleid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= obinfo_.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      obinfo_.WriteTo(output, _repeated_obinfo_codec);
      if (Battleid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Battleid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += obinfo_.CalculateSize(_repeated_obinfo_codec);
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyOBUser other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      obinfo_.Add(other.obinfo_);
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 18: {
            obinfo_.AddEntriesFrom(input, _repeated_obinfo_codec);
            break;
          }
          case 24: {
            Battleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyOBUser message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OBPosInfo : pb::IMessage<OBPosInfo> {
        private static readonly pb::MessageParser<OBPosInfo> _parser = new pb::MessageParser<OBPosInfo>(() => new OBPosInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OBPosInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.NotifyOBUser.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OBPosInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OBPosInfo(OBPosInfo other) : this() {
          pos_ = other.pos_;
          guid_ = other.guid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OBPosInfo Clone() {
          return new OBPosInfo(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private int pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 2;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OBPosInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OBPosInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pos != other.Pos) return false;
          if (Guid != other.Guid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Pos);
          }
          if (Guid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Guid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
          }
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OBPosInfo other) {
          if (other == null) {
            return;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Pos = input.ReadInt32();
                break;
              }
              case 16: {
                Guid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class NotifyUserReconnectGame : pb::IMessage<NotifyUserReconnectGame> {
    private static readonly pb::MessageParser<NotifyUserReconnectGame> _parser = new pb::MessageParser<NotifyUserReconnectGame>(() => new NotifyUserReconnectGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserReconnectGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReconnectGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReconnectGame(NotifyUserReconnectGame other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      battleid_ = other.battleid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReconnectGame Clone() {
      return new NotifyUserReconnectGame(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 3;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserReconnectGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserReconnectGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Battleid != other.Battleid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Battleid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserReconnectGame other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Battleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleKickOneUser : pb::IMessage<BattleKickOneUser> {
    private static readonly pb::MessageParser<BattleKickOneUser> _parser = new pb::MessageParser<BattleKickOneUser>(() => new BattleKickOneUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleKickOneUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleKickOneUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleKickOneUser(BattleKickOneUser other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      userkey_ = other.userkey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleKickOneUser Clone() {
      return new BattleKickOneUser(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "userkey" field.</summary>
    public const int UserkeyFieldNumber = 3;
    private ulong userkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userkey {
      get { return userkey_; }
      set {
        userkey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleKickOneUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleKickOneUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Userkey != other.Userkey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Userkey != 0UL) hash ^= Userkey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Userkey != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userkey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Userkey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userkey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleKickOneUser other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Userkey != 0UL) {
        Userkey = other.Userkey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Userkey = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateBattle : pb::IMessage<CreateBattle> {
    private static readonly pb::MessageParser<CreateBattle> _parser = new pb::MessageParser<CreateBattle>(() => new CreateBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattle(CreateBattle other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      mapid_ = other.mapid_;
      battletype_ = other.battletype_;
      userinfo_ = other.userinfo_.Clone();
      aiRobotList_ = other.aiRobotList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattle Clone() {
      return new CreateBattle(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "battletype" field.</summary>
    public const int BattletypeFieldNumber = 4;
    private global::CSToSS.CreateBattle.Types.BattleType battletype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.CreateBattle.Types.BattleType Battletype {
      get { return battletype_; }
      set {
        battletype_ = value;
      }
    }

    /// <summary>Field number for the "userinfo" field.</summary>
    public const int UserinfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo> _repeated_userinfo_codec
        = pb::FieldCodec.ForMessage(42, global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo> userinfo_ = new pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo> Userinfo {
      get { return userinfo_; }
    }

    /// <summary>Field number for the "aiRobotList" field.</summary>
    public const int AiRobotListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::CSToSS.CreateBattle.Types.AiRobotInfo> _repeated_aiRobotList_codec
        = pb::FieldCodec.ForMessage(50, global::CSToSS.CreateBattle.Types.AiRobotInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToSS.CreateBattle.Types.AiRobotInfo> aiRobotList_ = new pbc::RepeatedField<global::CSToSS.CreateBattle.Types.AiRobotInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToSS.CreateBattle.Types.AiRobotInfo> AiRobotList {
      get { return aiRobotList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Mapid != other.Mapid) return false;
      if (Battletype != other.Battletype) return false;
      if(!userinfo_.Equals(other.userinfo_)) return false;
      if(!aiRobotList_.Equals(other.aiRobotList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Battletype != 0) hash ^= Battletype.GetHashCode();
      hash ^= userinfo_.GetHashCode();
      hash ^= aiRobotList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mapid);
      }
      if (Battletype != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Battletype);
      }
      userinfo_.WriteTo(output, _repeated_userinfo_codec);
      aiRobotList_.WriteTo(output, _repeated_aiRobotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Battletype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Battletype);
      }
      size += userinfo_.CalculateSize(_repeated_userinfo_codec);
      size += aiRobotList_.CalculateSize(_repeated_aiRobotList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBattle other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Battletype != 0) {
        Battletype = other.Battletype;
      }
      userinfo_.Add(other.userinfo_);
      aiRobotList_.Add(other.aiRobotList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Mapid = input.ReadInt32();
            break;
          }
          case 32: {
            battletype_ = (global::CSToSS.CreateBattle.Types.BattleType) input.ReadEnum();
            break;
          }
          case 42: {
            userinfo_.AddEntriesFrom(input, _repeated_userinfo_codec);
            break;
          }
          case 50: {
            aiRobotList_.AddEntriesFrom(input, _repeated_aiRobotList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateBattle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BattleType {
        [pbr::OriginalName("eBattleType_Free")] EBattleTypeFree = 0,
        [pbr::OriginalName("eBattleType_Room")] EBattleTypeRoom = 1,
        [pbr::OriginalName("eBattleType_Match")] EBattleTypeMatch = 2,
        [pbr::OriginalName("eBattleType_Guide1")] EBattleTypeGuide1 = 3,
        [pbr::OriginalName("eBattleType_Guide2")] EBattleTypeGuide2 = 4,
      }

      public sealed partial class CreateBattleUserInfo : pb::IMessage<CreateBattleUserInfo> {
        private static readonly pb::MessageParser<CreateBattleUserInfo> _parser = new pb::MessageParser<CreateBattleUserInfo>(() => new CreateBattleUserInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateBattleUserInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.CreateBattle.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateBattleUserInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateBattleUserInfo(CreateBattleUserInfo other) : this() {
          usernetinfo_ = other.usernetinfo_ != null ? other.usernetinfo_.Clone() : null;
          guid_ = other.guid_;
          seat_ = other.seat_;
          grpID_ = other.grpID_;
          nickName_ = other.nickName_;
          diamond_ = other.diamond_;
          gold_ = other.gold_;
          vipLv_ = other.vipLv_;
          ifOB_ = other.ifOB_;
          ifGM_ = other.ifGM_;
          canUseHeroList_ = other.canUseHeroList_.Clone();
          runePages_ = other.runePages_.Clone();
          ifAiRobot_ = other.ifAiRobot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateBattleUserInfo Clone() {
          return new CreateBattleUserInfo(this);
        }

        /// <summary>Field number for the "usernetinfo" field.</summary>
        public const int UsernetinfoFieldNumber = 1;
        private global::CSToSS.SUserNetInfo usernetinfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CSToSS.SUserNetInfo Usernetinfo {
          get { return usernetinfo_; }
          set {
            usernetinfo_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 2;
        private long guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "seat" field.</summary>
        public const int SeatFieldNumber = 3;
        private int seat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Seat {
          get { return seat_; }
          set {
            seat_ = value;
          }
        }

        /// <summary>Field number for the "grpID" field.</summary>
        public const int GrpIDFieldNumber = 4;
        private int grpID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GrpID {
          get { return grpID_; }
          set {
            grpID_ = value;
          }
        }

        /// <summary>Field number for the "nickName" field.</summary>
        public const int NickNameFieldNumber = 5;
        private string nickName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NickName {
          get { return nickName_; }
          set {
            nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "diamond" field.</summary>
        public const int DiamondFieldNumber = 6;
        private long diamond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Diamond {
          get { return diamond_; }
          set {
            diamond_ = value;
          }
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 7;
        private long gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Gold {
          get { return gold_; }
          set {
            gold_ = value;
          }
        }

        /// <summary>Field number for the "vipLv" field.</summary>
        public const int VipLvFieldNumber = 8;
        private int vipLv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VipLv {
          get { return vipLv_; }
          set {
            vipLv_ = value;
          }
        }

        /// <summary>Field number for the "ifOB" field.</summary>
        public const int IfOBFieldNumber = 9;
        private bool ifOB_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfOB {
          get { return ifOB_; }
          set {
            ifOB_ = value;
          }
        }

        /// <summary>Field number for the "ifGM" field.</summary>
        public const int IfGMFieldNumber = 10;
        private bool ifGM_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfGM {
          get { return ifGM_; }
          set {
            ifGM_ = value;
          }
        }

        /// <summary>Field number for the "canUseHeroList" field.</summary>
        public const int CanUseHeroListFieldNumber = 11;
        private static readonly pb::FieldCodec<int> _repeated_canUseHeroList_codec
            = pb::FieldCodec.ForInt32(90);
        private readonly pbc::RepeatedField<int> canUseHeroList_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> CanUseHeroList {
          get { return canUseHeroList_; }
        }

        /// <summary>Field number for the "runePages" field.</summary>
        public const int RunePagesFieldNumber = 12;
        private static readonly pb::FieldCodec<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage> _repeated_runePages_codec
            = pb::FieldCodec.ForMessage(98, global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Parser);
        private readonly pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage> runePages_ = new pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage> RunePages {
          get { return runePages_; }
        }

        /// <summary>Field number for the "ifAiRobot" field.</summary>
        public const int IfAiRobotFieldNumber = 13;
        private bool ifAiRobot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfAiRobot {
          get { return ifAiRobot_; }
          set {
            ifAiRobot_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CreateBattleUserInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateBattleUserInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Usernetinfo, other.Usernetinfo)) return false;
          if (Guid != other.Guid) return false;
          if (Seat != other.Seat) return false;
          if (GrpID != other.GrpID) return false;
          if (NickName != other.NickName) return false;
          if (Diamond != other.Diamond) return false;
          if (Gold != other.Gold) return false;
          if (VipLv != other.VipLv) return false;
          if (IfOB != other.IfOB) return false;
          if (IfGM != other.IfGM) return false;
          if(!canUseHeroList_.Equals(other.canUseHeroList_)) return false;
          if(!runePages_.Equals(other.runePages_)) return false;
          if (IfAiRobot != other.IfAiRobot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (usernetinfo_ != null) hash ^= Usernetinfo.GetHashCode();
          if (Guid != 0L) hash ^= Guid.GetHashCode();
          if (Seat != 0) hash ^= Seat.GetHashCode();
          if (GrpID != 0) hash ^= GrpID.GetHashCode();
          if (NickName.Length != 0) hash ^= NickName.GetHashCode();
          if (Diamond != 0L) hash ^= Diamond.GetHashCode();
          if (Gold != 0L) hash ^= Gold.GetHashCode();
          if (VipLv != 0) hash ^= VipLv.GetHashCode();
          if (IfOB != false) hash ^= IfOB.GetHashCode();
          if (IfGM != false) hash ^= IfGM.GetHashCode();
          hash ^= canUseHeroList_.GetHashCode();
          hash ^= runePages_.GetHashCode();
          if (IfAiRobot != false) hash ^= IfAiRobot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (usernetinfo_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Usernetinfo);
          }
          if (Guid != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Guid);
          }
          if (Seat != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Seat);
          }
          if (GrpID != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(GrpID);
          }
          if (NickName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(NickName);
          }
          if (Diamond != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Diamond);
          }
          if (Gold != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(Gold);
          }
          if (VipLv != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(VipLv);
          }
          if (IfOB != false) {
            output.WriteRawTag(72);
            output.WriteBool(IfOB);
          }
          if (IfGM != false) {
            output.WriteRawTag(80);
            output.WriteBool(IfGM);
          }
          canUseHeroList_.WriteTo(output, _repeated_canUseHeroList_codec);
          runePages_.WriteTo(output, _repeated_runePages_codec);
          if (IfAiRobot != false) {
            output.WriteRawTag(104);
            output.WriteBool(IfAiRobot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (usernetinfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usernetinfo);
          }
          if (Guid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
          }
          if (Seat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
          }
          if (GrpID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrpID);
          }
          if (NickName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
          }
          if (Diamond != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
          }
          if (Gold != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
          }
          if (VipLv != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLv);
          }
          if (IfOB != false) {
            size += 1 + 1;
          }
          if (IfGM != false) {
            size += 1 + 1;
          }
          size += canUseHeroList_.CalculateSize(_repeated_canUseHeroList_codec);
          size += runePages_.CalculateSize(_repeated_runePages_codec);
          if (IfAiRobot != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateBattleUserInfo other) {
          if (other == null) {
            return;
          }
          if (other.usernetinfo_ != null) {
            if (usernetinfo_ == null) {
              usernetinfo_ = new global::CSToSS.SUserNetInfo();
            }
            Usernetinfo.MergeFrom(other.Usernetinfo);
          }
          if (other.Guid != 0L) {
            Guid = other.Guid;
          }
          if (other.Seat != 0) {
            Seat = other.Seat;
          }
          if (other.GrpID != 0) {
            GrpID = other.GrpID;
          }
          if (other.NickName.Length != 0) {
            NickName = other.NickName;
          }
          if (other.Diamond != 0L) {
            Diamond = other.Diamond;
          }
          if (other.Gold != 0L) {
            Gold = other.Gold;
          }
          if (other.VipLv != 0) {
            VipLv = other.VipLv;
          }
          if (other.IfOB != false) {
            IfOB = other.IfOB;
          }
          if (other.IfGM != false) {
            IfGM = other.IfGM;
          }
          canUseHeroList_.Add(other.canUseHeroList_);
          runePages_.Add(other.runePages_);
          if (other.IfAiRobot != false) {
            IfAiRobot = other.IfAiRobot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (usernetinfo_ == null) {
                  usernetinfo_ = new global::CSToSS.SUserNetInfo();
                }
                input.ReadMessage(usernetinfo_);
                break;
              }
              case 16: {
                Guid = input.ReadInt64();
                break;
              }
              case 24: {
                Seat = input.ReadInt32();
                break;
              }
              case 32: {
                GrpID = input.ReadInt32();
                break;
              }
              case 42: {
                NickName = input.ReadString();
                break;
              }
              case 48: {
                Diamond = input.ReadInt64();
                break;
              }
              case 56: {
                Gold = input.ReadInt64();
                break;
              }
              case 64: {
                VipLv = input.ReadInt32();
                break;
              }
              case 72: {
                IfOB = input.ReadBool();
                break;
              }
              case 80: {
                IfGM = input.ReadBool();
                break;
              }
              case 90:
              case 88: {
                canUseHeroList_.AddEntriesFrom(input, _repeated_canUseHeroList_codec);
                break;
              }
              case 98: {
                runePages_.AddEntriesFrom(input, _repeated_runePages_codec);
                break;
              }
              case 104: {
                IfAiRobot = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CreateBattleUserInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class RunePage : pb::IMessage<RunePage> {
            private static readonly pb::MessageParser<RunePage> _parser = new pb::MessageParser<RunePage>(() => new RunePage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<RunePage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunePage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunePage(RunePage other) : this() {
              runePage_ = other.runePage_;
              runeEffects_ = other.runeEffects_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunePage Clone() {
              return new RunePage(this);
            }

            /// <summary>Field number for the "runePage" field.</summary>
            public const int RunePage_FieldNumber = 1;
            private int runePage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int RunePage_ {
              get { return runePage_; }
              set {
                runePage_ = value;
              }
            }

            /// <summary>Field number for the "runeEffects" field.</summary>
            public const int RuneEffectsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo> _repeated_runeEffects_codec
                = pb::FieldCodec.ForMessage(18, global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo.Parser);
            private readonly pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo> runeEffects_ = new pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Types.RuneInfo> RuneEffects {
              get { return runeEffects_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as RunePage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(RunePage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (RunePage_ != other.RunePage_) return false;
              if(!runeEffects_.Equals(other.runeEffects_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (RunePage_ != 0) hash ^= RunePage_.GetHashCode();
              hash ^= runeEffects_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (RunePage_ != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(RunePage_);
              }
              runeEffects_.WriteTo(output, _repeated_runeEffects_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (RunePage_ != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunePage_);
              }
              size += runeEffects_.CalculateSize(_repeated_runeEffects_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(RunePage other) {
              if (other == null) {
                return;
              }
              if (other.RunePage_ != 0) {
                RunePage_ = other.RunePage_;
              }
              runeEffects_.Add(other.runeEffects_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    RunePage_ = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    runeEffects_.AddEntriesFrom(input, _repeated_runeEffects_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the RunePage message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class RuneInfo : pb::IMessage<RuneInfo> {
                private static readonly pb::MessageParser<RuneInfo> _parser = new pb::MessageParser<RuneInfo>(() => new RuneInfo());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RuneInfo> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::CSToSS.CreateBattle.Types.CreateBattleUserInfo.Types.RunePage.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuneInfo() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuneInfo(RuneInfo other) : this() {
                  effectId_ = other.effectId_;
                  effectName_ = other.effectName_;
                  effectValue_ = other.effectValue_;
                  effectPer_ = other.effectPer_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuneInfo Clone() {
                  return new RuneInfo(this);
                }

                /// <summary>Field number for the "effectId" field.</summary>
                public const int EffectIdFieldNumber = 1;
                private int effectId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int EffectId {
                  get { return effectId_; }
                  set {
                    effectId_ = value;
                  }
                }

                /// <summary>Field number for the "effectName" field.</summary>
                public const int EffectNameFieldNumber = 2;
                private string effectName_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string EffectName {
                  get { return effectName_; }
                  set {
                    effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "effectValue" field.</summary>
                public const int EffectValueFieldNumber = 3;
                private float effectValue_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float EffectValue {
                  get { return effectValue_; }
                  set {
                    effectValue_ = value;
                  }
                }

                /// <summary>Field number for the "effectPer" field.</summary>
                public const int EffectPerFieldNumber = 4;
                private float effectPer_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float EffectPer {
                  get { return effectPer_; }
                  set {
                    effectPer_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as RuneInfo);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RuneInfo other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (EffectId != other.EffectId) return false;
                  if (EffectName != other.EffectName) return false;
                  if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EffectValue, other.EffectValue)) return false;
                  if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EffectPer, other.EffectPer)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (EffectId != 0) hash ^= EffectId.GetHashCode();
                  if (EffectName.Length != 0) hash ^= EffectName.GetHashCode();
                  if (EffectValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EffectValue);
                  if (EffectPer != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EffectPer);
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (EffectId != 0) {
                    output.WriteRawTag(8);
                    output.WriteInt32(EffectId);
                  }
                  if (EffectName.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(EffectName);
                  }
                  if (EffectValue != 0F) {
                    output.WriteRawTag(29);
                    output.WriteFloat(EffectValue);
                  }
                  if (EffectPer != 0F) {
                    output.WriteRawTag(37);
                    output.WriteFloat(EffectPer);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (EffectId != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
                  }
                  if (EffectName.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
                  }
                  if (EffectValue != 0F) {
                    size += 1 + 4;
                  }
                  if (EffectPer != 0F) {
                    size += 1 + 4;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RuneInfo other) {
                  if (other == null) {
                    return;
                  }
                  if (other.EffectId != 0) {
                    EffectId = other.EffectId;
                  }
                  if (other.EffectName.Length != 0) {
                    EffectName = other.EffectName;
                  }
                  if (other.EffectValue != 0F) {
                    EffectValue = other.EffectValue;
                  }
                  if (other.EffectPer != 0F) {
                    EffectPer = other.EffectPer;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        EffectId = input.ReadInt32();
                        break;
                      }
                      case 18: {
                        EffectName = input.ReadString();
                        break;
                      }
                      case 29: {
                        EffectValue = input.ReadFloat();
                        break;
                      }
                      case 37: {
                        EffectPer = input.ReadFloat();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class AiRobotInfo : pb::IMessage<AiRobotInfo> {
        private static readonly pb::MessageParser<AiRobotInfo> _parser = new pb::MessageParser<AiRobotInfo>(() => new AiRobotInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AiRobotInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToSS.CreateBattle.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AiRobotInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AiRobotInfo(AiRobotInfo other) : this() {
          seat_ = other.seat_;
          aitype_ = other.aitype_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AiRobotInfo Clone() {
          return new AiRobotInfo(this);
        }

        /// <summary>Field number for the "seat" field.</summary>
        public const int SeatFieldNumber = 1;
        private uint seat_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Seat {
          get { return seat_; }
          set {
            seat_ = value;
          }
        }

        /// <summary>Field number for the "aitype" field.</summary>
        public const int AitypeFieldNumber = 2;
        private uint aitype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Aitype {
          get { return aitype_; }
          set {
            aitype_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AiRobotInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AiRobotInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Seat != other.Seat) return false;
          if (Aitype != other.Aitype) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Seat != 0) hash ^= Seat.GetHashCode();
          if (Aitype != 0) hash ^= Aitype.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Seat != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Seat);
          }
          if (Aitype != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Aitype);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Seat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seat);
          }
          if (Aitype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Aitype);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AiRobotInfo other) {
          if (other == null) {
            return;
          }
          if (other.Seat != 0) {
            Seat = other.Seat;
          }
          if (other.Aitype != 0) {
            Aitype = other.Aitype;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Seat = input.ReadUInt32();
                break;
              }
              case 16: {
                Aitype = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class NotifyUserOnline : pb::IMessage<NotifyUserOnline> {
    private static readonly pb::MessageParser<NotifyUserOnline> _parser = new pb::MessageParser<NotifyUserOnline>(() => new NotifyUserOnline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserOnline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOnline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOnline(NotifyUserOnline other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      userguid_ = other.userguid_;
      usernetinfo_ = other.usernetinfo_ != null ? other.usernetinfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOnline Clone() {
      return new NotifyUserOnline(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "userguid" field.</summary>
    public const int UserguidFieldNumber = 3;
    private ulong userguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userguid {
      get { return userguid_; }
      set {
        userguid_ = value;
      }
    }

    /// <summary>Field number for the "usernetinfo" field.</summary>
    public const int UsernetinfoFieldNumber = 4;
    private global::CSToSS.SUserNetInfo usernetinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.SUserNetInfo Usernetinfo {
      get { return usernetinfo_; }
      set {
        usernetinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserOnline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserOnline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Userguid != other.Userguid) return false;
      if (!object.Equals(Usernetinfo, other.Usernetinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Userguid != 0UL) hash ^= Userguid.GetHashCode();
      if (usernetinfo_ != null) hash ^= Usernetinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Userguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userguid);
      }
      if (usernetinfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Usernetinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Userguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userguid);
      }
      if (usernetinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usernetinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserOnline other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Userguid != 0UL) {
        Userguid = other.Userguid;
      }
      if (other.usernetinfo_ != null) {
        if (usernetinfo_ == null) {
          usernetinfo_ = new global::CSToSS.SUserNetInfo();
        }
        Usernetinfo.MergeFrom(other.Usernetinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Userguid = input.ReadUInt64();
            break;
          }
          case 34: {
            if (usernetinfo_ == null) {
              usernetinfo_ = new global::CSToSS.SUserNetInfo();
            }
            input.ReadMessage(usernetinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUserOffline : pb::IMessage<NotifyUserOffline> {
    private static readonly pb::MessageParser<NotifyUserOffline> _parser = new pb::MessageParser<NotifyUserOffline>(() => new NotifyUserOffline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserOffline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOffline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOffline(NotifyUserOffline other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      userguid_ = other.userguid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserOffline Clone() {
      return new NotifyUserOffline(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "userguid" field.</summary>
    public const int UserguidFieldNumber = 3;
    private ulong userguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userguid {
      get { return userguid_; }
      set {
        userguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserOffline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserOffline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Userguid != other.Userguid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Userguid != 0UL) hash ^= Userguid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Userguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userguid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Userguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userguid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserOffline other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Userguid != 0UL) {
        Userguid = other.Userguid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Userguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishBattleResponse : pb::IMessage<FinishBattleResponse> {
    private static readonly pb::MessageParser<FinishBattleResponse> _parser = new pb::MessageParser<FinishBattleResponse>(() => new FinishBattleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishBattleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToSS.CSToSSReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattleResponse(FinishBattleResponse other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattleResponse Clone() {
      return new FinishBattleResponse(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToSS.MsgId msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToSS.MsgId Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 3;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishBattleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishBattleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Rst != false) {
        output.WriteRawTag(24);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishBattleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToSS.MsgId) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
