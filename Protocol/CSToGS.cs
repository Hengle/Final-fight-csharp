// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CSToGS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CSToGS {

  /// <summary>Holder for reflection information generated from CSToGS.proto</summary>
  public static partial class CSToGSReflection {

    #region Descriptor
    /// <summary>File descriptor for CSToGS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CSToGSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDU1RvR1MucHJvdG8SBkNTVG9HUyI1CgdBc2tQaW5nEhwKBW1nc2lkGAEg",
            "ASgOMg0uQ1NUb0dTLk1zZ0lEEgwKBHRpbWUYAiABKAMi0wEKDUFza1JlZ2lz",
            "dGVSZXQSHAoFbXNnaWQYASABKA4yDS5DU1RvR1MuTXNnSUQSDwoHcmVnaXN0",
            "ZRgCIAEoBRIPCgdjdXJ0aW1lGAMgASgDEhAKCHNzYmFzZWlkGAQgASgNEiwK",
            "BnNzaW5mbxgFIAMoCzIcLkNTVG9HUy5Bc2tSZWdpc3RlUmV0LlNTSW5mbxpC",
            "CgZTU0luZm8SDAoEc3NpZBgBIAEoBRIKCgJpcBgCIAEoCRIMCgRwb3J0GAMg",
            "ASgFEhAKCG5ldHN0YXRlGAQgASgFIrcBCg1PcmRlclBvc3RUb0dDEhwKBW1z",
            "Z2lkGAEgASgOMg0uQ1NUb0dTLk1zZ0lEEjYKC3VzZXJuZXRpbmZvGAIgAygL",
            "MiEuQ1NUb0dTLk9yZGVyUG9zdFRvR0MuVXNlck5ldEluZm8SEgoKb3RoZXJt",
            "c2dpZBgDIAEoBRIQCghvdGhlcm1zZxgEIAEoDBoqCgtVc2VyTmV0SW5mbxIM",
            "CgRnc2lkGAEgASgFEg0KBWdjbmlkGAIgASgFIj0KDk9yZGVyS2lja291dEdD",
            "EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb0dTLk1zZ0lEEg0KBWdjbmlkGAIgASgF",
            "IpcBCg5PbmVTU0Nvbm5lY3RlZBIcCgVtc2dpZBgBIAEoDjINLkNTVG9HUy5N",
            "c2dJRBINCgVzdGF0ZRgCIAEoBRIMCgR0aW1lGAMgASgDEgwKBHNzaWQYBCAB",
            "KAUSCgoCaXAYBSABKAkSDAoEcG9ydBgGIAEoBRIQCghuZXRzdGF0ZRgHIAEo",
            "BRIQCghiYXNlc3NpZBgIIAEoBSJeCg9Vc2VyQ29ubmVjdGVkU1MSHAoFbXNn",
            "aWQYASABKA4yDS5DU1RvR1MuTXNnSUQSDAoEc3NpZBgCIAEoBRINCgVnY25p",
            "ZBgDIAMoBRIQCghiYXR0bGVpZBgEIAEoBCJBChJVc2VyRGlzQ29ubmVjdGVk",
            "U1MSHAoFbXNnaWQYASABKA4yDS5DU1RvR1MuTXNnSUQSDQoFZ2NuaWQYAiAD",
            "KAUqmAMKBU1zZ0lEEgoKBnVua25vdxAAEhoKFGVNc2dUb0dTRnJvbUNTX0Jl",
            "Z2luEIDAARIfChllTXNnVG9HU0Zyb21DU19Bc2tQaW5nUmV0EIHAARIiChxl",
            "TXNnVG9HU0Zyb21DU19Bc2tSZWdpc3RlUmV0EILAARIkCh5lTXNnVG9HU0Zy",
            "b21DU19PcmRlck9wZW5MaXN0ZW4Qg8ABEiUKH2VNc2dUb0dTRnJvbUNTX09y",
            "ZGVyQ2xvc2VMaXN0ZW4QhMABEiIKHGVNc2dUb0dTRnJvbUNTX09yZGVyUG9z",
            "dFRvR0MQhcABEiMKHWVNc2dUb0dTRnJvbUNTX09yZGVyS2lja291dEdDEIbA",
            "ARIjCh1lTXNnVG9HU0Zyb21DU19PbmVTU0Nvbm5lY3RlZBCHwAESJAoeZU1z",
            "Z1RvR1NGcm9tQ1NfVXNlckNvbm5lY3RlZFNTEIjAARInCiFlTXNnVG9HU0Zy",
            "b21DU19Vc2VyRGlzQ29ubmVjdGVkU1MQicABEhgKEmVNc2dUb0dTRnJvbUNT",
            "X0VuZBCowwFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CSToGS.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.AskPing), global::CSToGS.AskPing.Parser, new[]{ "Mgsid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.AskRegisteRet), global::CSToGS.AskRegisteRet.Parser, new[]{ "Msgid", "Registe", "Curtime", "Ssbaseid", "Ssinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.AskRegisteRet.Types.SSInfo), global::CSToGS.AskRegisteRet.Types.SSInfo.Parser, new[]{ "Ssid", "Ip", "Port", "Netstate" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.OrderPostToGC), global::CSToGS.OrderPostToGC.Parser, new[]{ "Msgid", "Usernetinfo", "Othermsgid", "Othermsg" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.OrderPostToGC.Types.UserNetInfo), global::CSToGS.OrderPostToGC.Types.UserNetInfo.Parser, new[]{ "Gsid", "Gcnid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.OrderKickoutGC), global::CSToGS.OrderKickoutGC.Parser, new[]{ "Msgid", "Gcnid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.OneSSConnected), global::CSToGS.OneSSConnected.Parser, new[]{ "Msgid", "State", "Time", "Ssid", "Ip", "Port", "Netstate", "Basessid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.UserConnectedSS), global::CSToGS.UserConnectedSS.Parser, new[]{ "Msgid", "Ssid", "Gcnid", "Battleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToGS.UserDisConnectedSS), global::CSToGS.UserDisConnectedSS.Parser, new[]{ "Msgid", "Gcnid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eMsgToGSFromCS_Begin")] EMsgToGsfromCsBegin = 24576,
    [pbr::OriginalName("eMsgToGSFromCS_AskPingRet")] EMsgToGsfromCsAskPingRet = 24577,
    [pbr::OriginalName("eMsgToGSFromCS_AskRegisteRet")] EMsgToGsfromCsAskRegisteRet = 24578,
    [pbr::OriginalName("eMsgToGSFromCS_OrderOpenListen")] EMsgToGsfromCsOrderOpenListen = 24579,
    [pbr::OriginalName("eMsgToGSFromCS_OrderCloseListen")] EMsgToGsfromCsOrderCloseListen = 24580,
    [pbr::OriginalName("eMsgToGSFromCS_OrderPostToGC")] EMsgToGsfromCsOrderPostToGc = 24581,
    [pbr::OriginalName("eMsgToGSFromCS_OrderKickoutGC")] EMsgToGsfromCsOrderKickoutGc = 24582,
    [pbr::OriginalName("eMsgToGSFromCS_OneSSConnected")] EMsgToGsfromCsOneSsconnected = 24583,
    [pbr::OriginalName("eMsgToGSFromCS_UserConnectedSS")] EMsgToGsfromCsUserConnectedSs = 24584,
    [pbr::OriginalName("eMsgToGSFromCS_UserDisConnectedSS")] EMsgToGsfromCsUserDisConnectedSs = 24585,
    [pbr::OriginalName("eMsgToGSFromCS_End")] EMsgToGsfromCsEnd = 25000,
  }

  #endregion

  #region Messages
  public sealed partial class AskPing : pb::IMessage<AskPing> {
    private static readonly pb::MessageParser<AskPing> _parser = new pb::MessageParser<AskPing>(() => new AskPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing(AskPing other) : this() {
      mgsid_ = other.mgsid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing Clone() {
      return new AskPing(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToGS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPing other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRegisteRet : pb::IMessage<AskRegisteRet> {
    private static readonly pb::MessageParser<AskRegisteRet> _parser = new pb::MessageParser<AskRegisteRet>(() => new AskRegisteRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRegisteRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet(AskRegisteRet other) : this() {
      msgid_ = other.msgid_;
      registe_ = other.registe_;
      curtime_ = other.curtime_;
      ssbaseid_ = other.ssbaseid_;
      ssinfo_ = other.ssinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegisteRet Clone() {
      return new AskRegisteRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "registe" field.</summary>
    public const int RegisteFieldNumber = 2;
    private int registe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Registe {
      get { return registe_; }
      set {
        registe_ = value;
      }
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 3;
    private long curtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    /// <summary>Field number for the "ssbaseid" field.</summary>
    public const int SsbaseidFieldNumber = 4;
    private uint ssbaseid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ssbaseid {
      get { return ssbaseid_; }
      set {
        ssbaseid_ = value;
      }
    }

    /// <summary>Field number for the "ssinfo" field.</summary>
    public const int SsinfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CSToGS.AskRegisteRet.Types.SSInfo> _repeated_ssinfo_codec
        = pb::FieldCodec.ForMessage(42, global::CSToGS.AskRegisteRet.Types.SSInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToGS.AskRegisteRet.Types.SSInfo> ssinfo_ = new pbc::RepeatedField<global::CSToGS.AskRegisteRet.Types.SSInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToGS.AskRegisteRet.Types.SSInfo> Ssinfo {
      get { return ssinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRegisteRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRegisteRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Registe != other.Registe) return false;
      if (Curtime != other.Curtime) return false;
      if (Ssbaseid != other.Ssbaseid) return false;
      if(!ssinfo_.Equals(other.ssinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Registe != 0) hash ^= Registe.GetHashCode();
      if (Curtime != 0L) hash ^= Curtime.GetHashCode();
      if (Ssbaseid != 0) hash ^= Ssbaseid.GetHashCode();
      hash ^= ssinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Registe != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Registe);
      }
      if (Curtime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Curtime);
      }
      if (Ssbaseid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ssbaseid);
      }
      ssinfo_.WriteTo(output, _repeated_ssinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Registe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Registe);
      }
      if (Curtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curtime);
      }
      if (Ssbaseid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ssbaseid);
      }
      size += ssinfo_.CalculateSize(_repeated_ssinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRegisteRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Registe != 0) {
        Registe = other.Registe;
      }
      if (other.Curtime != 0L) {
        Curtime = other.Curtime;
      }
      if (other.Ssbaseid != 0) {
        Ssbaseid = other.Ssbaseid;
      }
      ssinfo_.Add(other.ssinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Registe = input.ReadInt32();
            break;
          }
          case 24: {
            Curtime = input.ReadInt64();
            break;
          }
          case 32: {
            Ssbaseid = input.ReadUInt32();
            break;
          }
          case 42: {
            ssinfo_.AddEntriesFrom(input, _repeated_ssinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AskRegisteRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SSInfo : pb::IMessage<SSInfo> {
        private static readonly pb::MessageParser<SSInfo> _parser = new pb::MessageParser<SSInfo>(() => new SSInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SSInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToGS.AskRegisteRet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SSInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SSInfo(SSInfo other) : this() {
          ssid_ = other.ssid_;
          ip_ = other.ip_;
          port_ = other.port_;
          netstate_ = other.netstate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SSInfo Clone() {
          return new SSInfo(this);
        }

        /// <summary>Field number for the "ssid" field.</summary>
        public const int SsidFieldNumber = 1;
        private int ssid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Ssid {
          get { return ssid_; }
          set {
            ssid_ = value;
          }
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 2;
        private string ip_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ip {
          get { return ip_; }
          set {
            ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 3;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "netstate" field.</summary>
        public const int NetstateFieldNumber = 4;
        private int netstate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Netstate {
          get { return netstate_; }
          set {
            netstate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SSInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SSInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Ssid != other.Ssid) return false;
          if (Ip != other.Ip) return false;
          if (Port != other.Port) return false;
          if (Netstate != other.Netstate) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Ssid != 0) hash ^= Ssid.GetHashCode();
          if (Ip.Length != 0) hash ^= Ip.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (Netstate != 0) hash ^= Netstate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Ssid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Ssid);
          }
          if (Ip.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ip);
          }
          if (Port != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Port);
          }
          if (Netstate != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Netstate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Ssid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
          }
          if (Ip.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (Netstate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netstate);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SSInfo other) {
          if (other == null) {
            return;
          }
          if (other.Ssid != 0) {
            Ssid = other.Ssid;
          }
          if (other.Ip.Length != 0) {
            Ip = other.Ip;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          if (other.Netstate != 0) {
            Netstate = other.Netstate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Ssid = input.ReadInt32();
                break;
              }
              case 18: {
                Ip = input.ReadString();
                break;
              }
              case 24: {
                Port = input.ReadInt32();
                break;
              }
              case 32: {
                Netstate = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class OrderPostToGC : pb::IMessage<OrderPostToGC> {
    private static readonly pb::MessageParser<OrderPostToGC> _parser = new pb::MessageParser<OrderPostToGC>(() => new OrderPostToGC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderPostToGC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderPostToGC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderPostToGC(OrderPostToGC other) : this() {
      msgid_ = other.msgid_;
      usernetinfo_ = other.usernetinfo_.Clone();
      othermsgid_ = other.othermsgid_;
      othermsg_ = other.othermsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderPostToGC Clone() {
      return new OrderPostToGC(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "usernetinfo" field.</summary>
    public const int UsernetinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CSToGS.OrderPostToGC.Types.UserNetInfo> _repeated_usernetinfo_codec
        = pb::FieldCodec.ForMessage(18, global::CSToGS.OrderPostToGC.Types.UserNetInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToGS.OrderPostToGC.Types.UserNetInfo> usernetinfo_ = new pbc::RepeatedField<global::CSToGS.OrderPostToGC.Types.UserNetInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToGS.OrderPostToGC.Types.UserNetInfo> Usernetinfo {
      get { return usernetinfo_; }
    }

    /// <summary>Field number for the "othermsgid" field.</summary>
    public const int OthermsgidFieldNumber = 3;
    private int othermsgid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Othermsgid {
      get { return othermsgid_; }
      set {
        othermsgid_ = value;
      }
    }

    /// <summary>Field number for the "othermsg" field.</summary>
    public const int OthermsgFieldNumber = 4;
    private pb::ByteString othermsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Othermsg {
      get { return othermsg_; }
      set {
        othermsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderPostToGC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderPostToGC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!usernetinfo_.Equals(other.usernetinfo_)) return false;
      if (Othermsgid != other.Othermsgid) return false;
      if (Othermsg != other.Othermsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= usernetinfo_.GetHashCode();
      if (Othermsgid != 0) hash ^= Othermsgid.GetHashCode();
      if (Othermsg.Length != 0) hash ^= Othermsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      usernetinfo_.WriteTo(output, _repeated_usernetinfo_codec);
      if (Othermsgid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Othermsgid);
      }
      if (Othermsg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Othermsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += usernetinfo_.CalculateSize(_repeated_usernetinfo_codec);
      if (Othermsgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Othermsgid);
      }
      if (Othermsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Othermsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderPostToGC other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      usernetinfo_.Add(other.usernetinfo_);
      if (other.Othermsgid != 0) {
        Othermsgid = other.Othermsgid;
      }
      if (other.Othermsg.Length != 0) {
        Othermsg = other.Othermsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            usernetinfo_.AddEntriesFrom(input, _repeated_usernetinfo_codec);
            break;
          }
          case 24: {
            Othermsgid = input.ReadInt32();
            break;
          }
          case 34: {
            Othermsg = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OrderPostToGC message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UserNetInfo : pb::IMessage<UserNetInfo> {
        private static readonly pb::MessageParser<UserNetInfo> _parser = new pb::MessageParser<UserNetInfo>(() => new UserNetInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserNetInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToGS.OrderPostToGC.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserNetInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserNetInfo(UserNetInfo other) : this() {
          gsid_ = other.gsid_;
          gcnid_ = other.gcnid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserNetInfo Clone() {
          return new UserNetInfo(this);
        }

        /// <summary>Field number for the "gsid" field.</summary>
        public const int GsidFieldNumber = 1;
        private int gsid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Gsid {
          get { return gsid_; }
          set {
            gsid_ = value;
          }
        }

        /// <summary>Field number for the "gcnid" field.</summary>
        public const int GcnidFieldNumber = 2;
        private int gcnid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Gcnid {
          get { return gcnid_; }
          set {
            gcnid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserNetInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserNetInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gsid != other.Gsid) return false;
          if (Gcnid != other.Gcnid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Gsid != 0) hash ^= Gsid.GetHashCode();
          if (Gcnid != 0) hash ^= Gcnid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Gsid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Gsid);
          }
          if (Gcnid != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Gcnid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Gsid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
          }
          if (Gcnid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserNetInfo other) {
          if (other == null) {
            return;
          }
          if (other.Gsid != 0) {
            Gsid = other.Gsid;
          }
          if (other.Gcnid != 0) {
            Gcnid = other.Gcnid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Gsid = input.ReadInt32();
                break;
              }
              case 16: {
                Gcnid = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class OrderKickoutGC : pb::IMessage<OrderKickoutGC> {
    private static readonly pb::MessageParser<OrderKickoutGC> _parser = new pb::MessageParser<OrderKickoutGC>(() => new OrderKickoutGC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderKickoutGC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderKickoutGC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderKickoutGC(OrderKickoutGC other) : this() {
      msgid_ = other.msgid_;
      gcnid_ = other.gcnid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderKickoutGC Clone() {
      return new OrderKickoutGC(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "gcnid" field.</summary>
    public const int GcnidFieldNumber = 2;
    private int gcnid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnid {
      get { return gcnid_; }
      set {
        gcnid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderKickoutGC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderKickoutGC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Gcnid != other.Gcnid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Gcnid != 0) hash ^= Gcnid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Gcnid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gcnid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Gcnid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderKickoutGC other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Gcnid != 0) {
        Gcnid = other.Gcnid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Gcnid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OneSSConnected : pb::IMessage<OneSSConnected> {
    private static readonly pb::MessageParser<OneSSConnected> _parser = new pb::MessageParser<OneSSConnected>(() => new OneSSConnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneSSConnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneSSConnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneSSConnected(OneSSConnected other) : this() {
      msgid_ = other.msgid_;
      state_ = other.state_;
      time_ = other.time_;
      ssid_ = other.ssid_;
      ip_ = other.ip_;
      port_ = other.port_;
      netstate_ = other.netstate_;
      basessid_ = other.basessid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneSSConnected Clone() {
      return new OneSSConnected(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 4;
    private int ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "netstate" field.</summary>
    public const int NetstateFieldNumber = 7;
    private int netstate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Netstate {
      get { return netstate_; }
      set {
        netstate_ = value;
      }
    }

    /// <summary>Field number for the "basessid" field.</summary>
    public const int BasessidFieldNumber = 8;
    private int basessid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Basessid {
      get { return basessid_; }
      set {
        basessid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneSSConnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneSSConnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (State != other.State) return false;
      if (Time != other.Time) return false;
      if (Ssid != other.Ssid) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Netstate != other.Netstate) return false;
      if (Basessid != other.Basessid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Netstate != 0) hash ^= Netstate.GetHashCode();
      if (Basessid != 0) hash ^= Basessid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (Ssid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ssid);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (Netstate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Netstate);
      }
      if (Basessid != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Basessid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Netstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netstate);
      }
      if (Basessid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Basessid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneSSConnected other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Netstate != 0) {
        Netstate = other.Netstate;
      }
      if (other.Basessid != 0) {
        Basessid = other.Basessid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            Ssid = input.ReadInt32();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
          case 56: {
            Netstate = input.ReadInt32();
            break;
          }
          case 64: {
            Basessid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserConnectedSS : pb::IMessage<UserConnectedSS> {
    private static readonly pb::MessageParser<UserConnectedSS> _parser = new pb::MessageParser<UserConnectedSS>(() => new UserConnectedSS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserConnectedSS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnectedSS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnectedSS(UserConnectedSS other) : this() {
      msgid_ = other.msgid_;
      ssid_ = other.ssid_;
      gcnid_ = other.gcnid_.Clone();
      battleid_ = other.battleid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserConnectedSS Clone() {
      return new UserConnectedSS(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 2;
    private int ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    /// <summary>Field number for the "gcnid" field.</summary>
    public const int GcnidFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_gcnid_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> gcnid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gcnid {
      get { return gcnid_; }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 4;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserConnectedSS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserConnectedSS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Ssid != other.Ssid) return false;
      if(!gcnid_.Equals(other.gcnid_)) return false;
      if (Battleid != other.Battleid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      hash ^= gcnid_.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Ssid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ssid);
      }
      gcnid_.WriteTo(output, _repeated_gcnid_codec);
      if (Battleid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Battleid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
      }
      size += gcnid_.CalculateSize(_repeated_gcnid_codec);
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserConnectedSS other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      gcnid_.Add(other.gcnid_);
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Ssid = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            gcnid_.AddEntriesFrom(input, _repeated_gcnid_codec);
            break;
          }
          case 32: {
            Battleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserDisConnectedSS : pb::IMessage<UserDisConnectedSS> {
    private static readonly pb::MessageParser<UserDisConnectedSS> _parser = new pb::MessageParser<UserDisConnectedSS>(() => new UserDisConnectedSS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDisConnectedSS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToGS.CSToGSReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDisConnectedSS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDisConnectedSS(UserDisConnectedSS other) : this() {
      msgid_ = other.msgid_;
      gcnid_ = other.gcnid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDisConnectedSS Clone() {
      return new UserDisConnectedSS(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToGS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToGS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "gcnid" field.</summary>
    public const int GcnidFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_gcnid_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> gcnid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gcnid {
      get { return gcnid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDisConnectedSS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDisConnectedSS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!gcnid_.Equals(other.gcnid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= gcnid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      gcnid_.WriteTo(output, _repeated_gcnid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += gcnid_.CalculateSize(_repeated_gcnid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDisConnectedSS other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      gcnid_.Add(other.gcnid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToGS.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            gcnid_.AddEntriesFrom(input, _repeated_gcnid_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
