// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CSToDB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CSToDB {

  /// <summary>Holder for reflection information generated from CSToDB.proto</summary>
  public static partial class CSToDBReflection {

    #region Descriptor
    /// <summary>File descriptor for CSToDB.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CSToDBReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDU1RvREIucHJvdG8SBkNTVG9EQiJACg9VcGRhdGVDREtleUluZm8SHAoF",
            "bXNnaWQYASABKA4yDS5DU1RvREIuTXNnSUQSDwoHc3FsX3N0chgCIAEoCSJA",
            "Cg9JbnNlcnRDREtleUluZm8SHAoFbXNnaWQYASABKA4yDS5DU1RvREIuTXNn",
            "SUQSDwoHc3FsX3N0chgCIAEoCSI8CgtDREtleUV2ZW50cxIcCgVtc2dpZBgB",
            "IAEoDjINLkNTVG9EQi5Nc2dJRBIPCgdzcWxfc3RyGAIgASgJIl0KDlVwZGF0",
            "ZVVzZXJNYWlsEhwKBW1zZ2lkGAEgASgOMg0uQ1NUb0RCLk1zZ0lEEg0KBW9i",
            "amlkGAIgASgDEg4KBm1haWxpZBgDIAEoBRIOCgZjc3RhdGUYBCABKAUi2AoK",
            "DVN0b3JlVXNlcmRhdGESEgoKdW42NE9iaklkeBgBIAEoAxIVCg1lVXNlclBs",
            "YXRmb3JtGAIgASgFEhQKDHVuMzJIZWFkZXJJRBgDIAEoBRINCgVuOFNleBgE",
            "IAEoBRISCgpuNjREaWFtb25kGAUgASgDEg8KB242NEdvbGQYBiABKAMSGwoT",
            "dFJlZ2lzdGVVVENNaWxsaXNlYxgHIAEoAxIdChV0TGFzdExvZ2luVVRDTWls",
            "bGlzZWMYCCABKAMSGgoSdExhc3RMb2dPdXRVVENUaW1lGAkgASgDEhAKCG42",
            "NFNjb3JlGAogASgDEhkKEXVuMzJUb3RhbEdhbWVJbm5zGAsgASgFEhgKEHVu",
            "MzJUb3RhbFdpbklubnMYDCABKAUSGgoSdW4zMlRvdGFsSGVyb0tpbGxzGA0g",
            "ASgFEiEKGXVuMzJUb3RhbERlc3RvcnlCdWlsZGluZ3MYDiABKAUSGgoSdW4z",
            "MlRvdGFsRGVhZFRpbWVzGA8gASgFEhcKD3VuMzJUb3RhbEFzc2lzdBgQIAEo",
            "BRISCgp1bjE2VXNlckx2GBEgASgFEhgKEHVuMzJVc2VyQ3VyTHZFeHAYEiAB",
            "KAUSGQoRdExhc3RGaXJzdFdpblRpbWUYEyABKAMSEgoKdW4xNkNsZGF5cxgU",
            "IAEoBRIbChN0TGFzdEdldExvZ2luUmV3YXJkGBUgASgJEhEKCXVuMTZWaXBM",
            "dhgWIAEoBRIQCgh2aXBTY29yZRgXIAEoBRITCgttR3VpZGVTdGVwcxgYIAEo",
            "CRI/ChBzU1VzZXJIZXJvREJEYXRhGBkgAygLMiUuQ1NUb0RCLlN0b3JlVXNl",
            "cmRhdGEuU1VzZXJIZXJvREJEYXRhEj8KCmZyaWVuZExpc3QYGiADKAsyKy5D",
            "U1RvREIuU3RvcmVVc2VyZGF0YS5TVXNlclJlbGF0aW9uc2hpcEluZm8SPgoJ",
            "YmxhY2tMaXN0GBsgAygLMisuQ1NUb0RCLlN0b3JlVXNlcmRhdGEuU1VzZXJS",
            "ZWxhdGlvbnNoaXBJbmZvEjUKCGl0ZW1saXN0GBwgAygLMiMuQ1NUb0RCLlN0",
            "b3JlVXNlcmRhdGEuU1VzZXJJdGVtSW5mbxI2CghtYWlsTGlzdBgdIAMoCzIk",
            "LkNTVG9EQi5TdG9yZVVzZXJkYXRhLlVzZXJNYWlsREJEYXRhEhAKCG5pY2tu",
            "YW1lGB4gASgJEhAKCHVzZXJuYW1lGB8gASgJEgsKA3B3ZBggIAEoCRIPCgdy",
            "dW5lc3RyGCEgASgJEg8KB3Nsb3RzdHIYIiABKAkaRwoPU1VzZXJIZXJvREJE",
            "YXRhEhIKCnVuMzJIZXJvSUQYASABKAUSDwoHZW5kVGltZRgCIAEoAxIPCgdi",
            "dXlUaW1lGAMgASgDGnUKFVNVc2VyUmVsYXRpb25zaGlwSW5mbxISCgpzdE5p",
            "Y2tOYW1lGAEgASgJEg8KB25IZWFkSWQYAiABKAUSDwoHZ3VpZGlkeBgDIAEo",
            "AxIVCg1lUmVsYXRpb25TaGlwGAQgASgFEg8KB3RNaWxTZWMYBSABKAMalAEK",
            "DVNVc2VySXRlbUluZm8SDwoHaXRlbV9pZBgBIAEoBRIPCgdpZnVzaW5nGAIg",
            "ASgIEhAKCGl0ZW1fbnVtGAMgASgFEhAKCGJ1eV90aW1lGAQgASgDEhAKCGVu",
            "ZF90aW1lGAYgASgDEhYKDm4zMkVmZmVjdFZhbHVlGAcgASgFEhMKC24zMkVm",
            "ZmVjdElEGAggASgFGjAKDlVzZXJNYWlsREJEYXRhEg4KBm1haWxJZBgBIAEo",
            "BRIOCgZtU3RhdGUYAiABKAUiKwoLUXVlcnlOb3RpY2USHAoFbXNnaWQYASAB",
            "KA4yDS5DU1RvREIuTXNnSUQiOAoLRXhlU1FMX0NhbGwSHAoFbXNnaWQYASAB",
            "KA4yDS5DU1RvREIuTXNnSUQSCwoDc3FsGAIgASgJIk4KDkNoYW5nZU5pY2tO",
            "YW1lEhwKBW1zZ2lkGAEgASgOMg0uQ1NUb0RCLk1zZ0lEEhAKCG5pY2tuYW1l",
            "GAIgASgJEgwKBGd1aWQYAyABKAMiOgoJQWx0ZXJJdGVtEhwKBW1nc2lkGAEg",
            "ASgOMg0uQ1NUb0RCLk1zZ0lEEg8KB3NxbF9zdHIYAiABKAkiOAoMRGVsZXRl",
            "Tm90aWNlEhwKBW1nc2lkGAEgASgOMg0uQ1NUb0RCLk1zZ0lEEgoKAmlkGAIg",
            "ASgNIj0KDEluc2VydE5vdGljZRIcCgVtZ3NpZBgBIAEoDjINLkNTVG9EQi5N",
            "c2dJRBIPCgdzcWxfc3RyGAIgASgJInQKDEFsdGVyU05TTGlzdBIcCgVtZ3Np",
            "ZBgBIAEoDjINLkNTVG9EQi5Nc2dJRBIPCgd1c2VyX2lkGAIgASgEEhIKCnJl",
            "bGF0ZWRfaWQYAyABKAQSDwoHcmVsYXRlZBgEIAEoDRIQCghvcHJhdGlvbhgF",
            "IAEoDSJuCg5RdWVyeU9iaklkeFJlcRIcCgVtc2dpZBgBIAEoDjINLkNTVG9E",
            "Qi5Nc2dJRBIRCglMb2dpbmluZm8YAiABKAkSDAoEZ3NpZBgDIAEoBRIPCgdn",
            "Y25ldGlkGAQgASgFEgwKBGNzaWQYBSABKAUisQEKEE5pY2tuYW1lQ29uZmxp",
            "Y3QSHAoFbWdzaWQYASABKA4yDS5DU1RvREIuTXNnSUQSEwoLbmV3bmlja25h",
            "bWUYAiABKAkSDAoEZ3NpZBgDIAEoBRIPCgdnY25ldGlkGAQgASgFEgwKBGd1",
            "aWQYBSABKAQSDQoFc2RraWQYBiABKAUSDAoEY3NpZBgHIAEoBRILCgNjZGsY",
            "CCABKAkSEwoLb2xkbmlja25hbWUYCSABKAkiPQoIQnV5R29vZHMSHAoFbWdz",
            "aWQYASABKA4yDS5DU1RvREIuTXNnSUQSEwoLYnV5Z29vZHNtYWcYAiABKAki",
            "8AEKDEdhbWVNYWlsSW5mbxIeCgR0eXBlGAEgASgOMhAuQ1NUb0RCLk1haWxU",
            "eXBlEg4KBm1haWxJZBgCIAEoBRIOCgZ1c2VyaWQYAyABKAMSKQoJY3VydHN0",
            "YXRlGAQgASgOMhYuQ1NUb0RCLkVNYWlsQ3VydFN0YXRlEg4KBnNka2lkeBgF",
            "IAEoBRINCgV0aXRsZRgGIAEoCRIPCgdjb250ZW50GAcgASgJEg8KB2dpZnRz",
            "dHIYCCABKAkSEgoKY3JlYXRldGltZRgJIAEoCRIQCghvdmVydGltZRgKIAEo",
            "CRIOCgZzZW5kZXIYCyABKAkiVgoOVXBkYXRlR2FtZU1haWwSHAoFbWdzaWQY",
            "ASABKA4yDS5DU1RvREIuTXNnSUQSJgoIbWFpbGxpc3QYAiADKAsyFC5DU1Rv",
            "REIuR2FtZU1haWxJbmZvIkgKCkluc2VydFVzZXISHAoFbWdzaWQYASABKA4y",
            "DS5DU1RvREIuTXNnSUQSDAoEZ3VpZBgCIAEoAxIOCgZzcWxzdHIYAyABKAki",
            "SAoKVXBkYXRlVXNlchIcCgVtZ3NpZBgBIAEoDjINLkNTVG9EQi5Nc2dJRBIM",
            "CgRndWlkGAIgASgDEg4KBnNxbHN0chgDIAEoCSKcAQoMQ2hlY2tOYW1lUmVx",
            "EhwKBW1nc2lkGAEgASgOMg0uQ1NUb0RCLk1zZ0lEEgwKBGdzaWQYAiABKAUS",
            "DwoHZ2NuZXRpZBgDIAEoBRIPCgdnc25ldGlkGAQgASgFEg0KBXNka2lkGAUg",
            "ASgFEgwKBGNzaWQYBiABKAUSCwoDY2RrGAcgASgJEhQKDGNvbXBsZXRlSW5m",
            "bxgIIAEoCSKKAQoMUXVlcnlVc2VyUmVxEhwKBW1zZ2lkGAEgASgOMg0uQ1NU",
            "b0RCLk1zZ0lEEhEKCUxvZ2luaW5mbxgCIAEoCRIMCgRnc2lkGAMgASgFEg8K",
            "B2djbmV0aWQYBCABKAUSDAoEY3NpZBgFIAEoBRINCgVvYmppZBgGIAEoAxIN",
            "CgV1bmFtZRgHIAEoCSq+BAoFTXNnSUQSCgoGdW5rbm93EAASHAoYZUNoZWNr",
            "Tmlja05hbWVEQkNhbGxCYWNrEGQSGQoVZVF1ZXJ5VXNlcl9EQkNhbGxCYWNr",
            "EGUSGAoUZUxvZ1N0b3JlX0RCQ2FsbEJhY2sQZhIaChZlVXBkYXRlVXNlcl9E",
            "QkNhbGxCYWNrEGcSGgoWZUluc2VydFVzZXJfREJDYWxsQmFjaxBoEh4KGmVV",
            "cGRhdGVHYW1lTWFpbF9EQkNhbGxCYWNrEGkSGAoUZUJ1eUdvb2RzX0RCQ2Fs",
            "bEJhY2sQahIgChxlTmlja25hbWVDb25mbGljdF9EQkNhbGxCYWNrEGsSGgoW",
            "ZVF1ZXJ5T2JqSWRfREJDYWxsQmFjaxBsEhgKFGVBbHRlclNOU0xpc3RfREJD",
            "YWxsEG0SGAoUZUluc2VydE5vdGljZV9EQkNhbGwQbhIYChRlRGVsZXRlTm90",
            "aWNlX0RCQ2FsbBBvEhUKEWVBbHRlckl0ZW1fREJDYWxsEHASGgoWZUNoYW5n",
            "ZU5pY2tOYW1lX0RCQ2FsbBBxEhAKDGVFeGVTUUxfQ2FsbBByEhcKE2VRdWVy",
            "eU5vdGljZV9EQkNhbGwQcxISCg5lU3RvcmVVc2VyRGF0YRB0EiIKHmVVcGRh",
            "dGVVc2VyR2FtZU1haWxfREJDYWxsQmFjaxB1EhYKEmVJbnNlcnRDREtleUV2",
            "ZW50cxB2EhQKEGVJbnNlcnRDREtleUluZm8QdxIUChBlVXBkYXRlQ0RLZXlJ",
            "bmZvEHgqXQoITWFpbFR5cGUSEQoNbWFpbFR5cGVfTm9uZRAAEg4KCm1haWxU",
            "eXBlXzEQARIOCgptYWlsVHlwZV8yEAISDgoKbWFpbFR5cGVfMxADEg4KCm1h",
            "aWxUeXBlXzQQBCqGAQoORU1haWxDdXJ0U3RhdGUSEwoPZU1haWxTdGF0ZV9O",
            "b25lEAASEgoOZU1haWxTdGF0ZV9OZXcQARIiCh5lTWFpbFN0YXRlX0xvb2tl",
            "ZEJ1dE5vdEdvdEdpZnQQAhITCg9lTWFpbFN0YXRlX0xvb2sQAxISCg5lTWFp",
            "bFN0YXRlX0RlbBAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CSToDB.MsgID), typeof(global::CSToDB.MailType), typeof(global::CSToDB.EMailCurtState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.UpdateCDKeyInfo), global::CSToDB.UpdateCDKeyInfo.Parser, new[]{ "Msgid", "SqlStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.InsertCDKeyInfo), global::CSToDB.InsertCDKeyInfo.Parser, new[]{ "Msgid", "SqlStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.CDKeyEvents), global::CSToDB.CDKeyEvents.Parser, new[]{ "Msgid", "SqlStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.UpdateUserMail), global::CSToDB.UpdateUserMail.Parser, new[]{ "Msgid", "Objid", "Mailid", "Cstate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.StoreUserdata), global::CSToDB.StoreUserdata.Parser, new[]{ "Un64ObjIdx", "EUserPlatform", "Un32HeaderID", "N8Sex", "N64Diamond", "N64Gold", "TRegisteUTCMillisec", "TLastLoginUTCMillisec", "TLastLogOutUTCTime", "N64Score", "Un32TotalGameInns", "Un32TotalWinInns", "Un32TotalHeroKills", "Un32TotalDestoryBuildings", "Un32TotalDeadTimes", "Un32TotalAssist", "Un16UserLv", "Un32UserCurLvExp", "TLastFirstWinTime", "Un16Cldays", "TLastGetLoginReward", "Un16VipLv", "VipScore", "MGuideSteps", "SSUserHeroDBData", "FriendList", "BlackList", "Itemlist", "MailList", "Nickname", "Username", "Pwd", "Runestr", "Slotstr" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.StoreUserdata.Types.SUserHeroDBData), global::CSToDB.StoreUserdata.Types.SUserHeroDBData.Parser, new[]{ "Un32HeroID", "EndTime", "BuyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo), global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo.Parser, new[]{ "StNickName", "NHeadId", "Guididx", "ERelationShip", "TMilSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.StoreUserdata.Types.SUserItemInfo), global::CSToDB.StoreUserdata.Types.SUserItemInfo.Parser, new[]{ "ItemId", "Ifusing", "ItemNum", "BuyTime", "EndTime", "N32EffectValue", "N32EffectID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.StoreUserdata.Types.UserMailDBData), global::CSToDB.StoreUserdata.Types.UserMailDBData.Parser, new[]{ "MailId", "MState" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.QueryNotice), global::CSToDB.QueryNotice.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.ExeSQL_Call), global::CSToDB.ExeSQL_Call.Parser, new[]{ "Msgid", "Sql" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.ChangeNickName), global::CSToDB.ChangeNickName.Parser, new[]{ "Msgid", "Nickname", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.AlterItem), global::CSToDB.AlterItem.Parser, new[]{ "Mgsid", "SqlStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.DeleteNotice), global::CSToDB.DeleteNotice.Parser, new[]{ "Mgsid", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.InsertNotice), global::CSToDB.InsertNotice.Parser, new[]{ "Mgsid", "SqlStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.AlterSNSList), global::CSToDB.AlterSNSList.Parser, new[]{ "Mgsid", "UserId", "RelatedId", "Related", "Opration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.QueryObjIdxReq), global::CSToDB.QueryObjIdxReq.Parser, new[]{ "Msgid", "Logininfo", "Gsid", "Gcnetid", "Csid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.NicknameConflict), global::CSToDB.NicknameConflict.Parser, new[]{ "Mgsid", "Newnickname", "Gsid", "Gcnetid", "Guid", "Sdkid", "Csid", "Cdk", "Oldnickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.BuyGoods), global::CSToDB.BuyGoods.Parser, new[]{ "Mgsid", "Buygoodsmag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.GameMailInfo), global::CSToDB.GameMailInfo.Parser, new[]{ "Type", "MailId", "Userid", "Curtstate", "Sdkidx", "Title", "Content", "Giftstr", "Createtime", "Overtime", "Sender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.UpdateGameMail), global::CSToDB.UpdateGameMail.Parser, new[]{ "Mgsid", "Maillist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.InsertUser), global::CSToDB.InsertUser.Parser, new[]{ "Mgsid", "Guid", "Sqlstr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.UpdateUser), global::CSToDB.UpdateUser.Parser, new[]{ "Mgsid", "Guid", "Sqlstr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.CheckNameReq), global::CSToDB.CheckNameReq.Parser, new[]{ "Mgsid", "Gsid", "Gcnetid", "Gsnetid", "Sdkid", "Csid", "Cdk", "CompleteInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToDB.QueryUserReq), global::CSToDB.QueryUserReq.Parser, new[]{ "Msgid", "Logininfo", "Gsid", "Gcnetid", "Csid", "Objid", "Uname" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eCheckNickNameDBCallBack")] ECheckNickNameDbcallBack = 100,
    [pbr::OriginalName("eQueryUser_DBCallBack")] EQueryUserDbcallBack = 101,
    [pbr::OriginalName("eLogStore_DBCallBack")] ELogStoreDbcallBack = 102,
    [pbr::OriginalName("eUpdateUser_DBCallBack")] EUpdateUserDbcallBack = 103,
    [pbr::OriginalName("eInsertUser_DBCallBack")] EInsertUserDbcallBack = 104,
    [pbr::OriginalName("eUpdateGameMail_DBCallBack")] EUpdateGameMailDbcallBack = 105,
    [pbr::OriginalName("eBuyGoods_DBCallBack")] EBuyGoodsDbcallBack = 106,
    [pbr::OriginalName("eNicknameConflict_DBCallBack")] ENicknameConflictDbcallBack = 107,
    [pbr::OriginalName("eQueryObjId_DBCallBack")] EQueryObjIdDbcallBack = 108,
    [pbr::OriginalName("eAlterSNSList_DBCall")] EAlterSnslistDbcall = 109,
    [pbr::OriginalName("eInsertNotice_DBCall")] EInsertNoticeDbcall = 110,
    [pbr::OriginalName("eDeleteNotice_DBCall")] EDeleteNoticeDbcall = 111,
    [pbr::OriginalName("eAlterItem_DBCall")] EAlterItemDbcall = 112,
    [pbr::OriginalName("eChangeNickName_DBCall")] EChangeNickNameDbcall = 113,
    [pbr::OriginalName("eExeSQL_Call")] EExeSqlCall = 114,
    [pbr::OriginalName("eQueryNotice_DBCall")] EQueryNoticeDbcall = 115,
    [pbr::OriginalName("eStoreUserData")] EStoreUserData = 116,
    [pbr::OriginalName("eUpdateUserGameMail_DBCallBack")] EUpdateUserGameMailDbcallBack = 117,
    [pbr::OriginalName("eInsertCDKeyEvents")] EInsertCdkeyEvents = 118,
    [pbr::OriginalName("eInsertCDKeyInfo")] EInsertCdkeyInfo = 119,
    [pbr::OriginalName("eUpdateCDKeyInfo")] EUpdateCdkeyInfo = 120,
  }

  public enum MailType {
    [pbr::OriginalName("mailType_None")] None = 0,
    [pbr::OriginalName("mailType_1")] _1 = 1,
    [pbr::OriginalName("mailType_2")] _2 = 2,
    [pbr::OriginalName("mailType_3")] _3 = 3,
    [pbr::OriginalName("mailType_4")] _4 = 4,
  }

  public enum EMailCurtState {
    [pbr::OriginalName("eMailState_None")] EMailStateNone = 0,
    [pbr::OriginalName("eMailState_New")] EMailStateNew = 1,
    [pbr::OriginalName("eMailState_LookedButNotGotGift")] EMailStateLookedButNotGotGift = 2,
    [pbr::OriginalName("eMailState_Look")] EMailStateLook = 3,
    [pbr::OriginalName("eMailState_Del")] EMailStateDel = 4,
  }

  #endregion

  #region Messages
  public sealed partial class UpdateCDKeyInfo : pb::IMessage<UpdateCDKeyInfo> {
    private static readonly pb::MessageParser<UpdateCDKeyInfo> _parser = new pb::MessageParser<UpdateCDKeyInfo>(() => new UpdateCDKeyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCDKeyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCDKeyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCDKeyInfo(UpdateCDKeyInfo other) : this() {
      msgid_ = other.msgid_;
      sqlStr_ = other.sqlStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCDKeyInfo Clone() {
      return new UpdateCDKeyInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "sql_str" field.</summary>
    public const int SqlStrFieldNumber = 2;
    private string sqlStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlStr {
      get { return sqlStr_; }
      set {
        sqlStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCDKeyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCDKeyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (SqlStr != other.SqlStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (SqlStr.Length != 0) hash ^= SqlStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SqlStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCDKeyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.SqlStr.Length != 0) {
        SqlStr = other.SqlStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            SqlStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertCDKeyInfo : pb::IMessage<InsertCDKeyInfo> {
    private static readonly pb::MessageParser<InsertCDKeyInfo> _parser = new pb::MessageParser<InsertCDKeyInfo>(() => new InsertCDKeyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertCDKeyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertCDKeyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertCDKeyInfo(InsertCDKeyInfo other) : this() {
      msgid_ = other.msgid_;
      sqlStr_ = other.sqlStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertCDKeyInfo Clone() {
      return new InsertCDKeyInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "sql_str" field.</summary>
    public const int SqlStrFieldNumber = 2;
    private string sqlStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlStr {
      get { return sqlStr_; }
      set {
        sqlStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertCDKeyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertCDKeyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (SqlStr != other.SqlStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (SqlStr.Length != 0) hash ^= SqlStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SqlStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertCDKeyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.SqlStr.Length != 0) {
        SqlStr = other.SqlStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            SqlStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eInsertCDKeyEvents
  /// </summary>
  public sealed partial class CDKeyEvents : pb::IMessage<CDKeyEvents> {
    private static readonly pb::MessageParser<CDKeyEvents> _parser = new pb::MessageParser<CDKeyEvents>(() => new CDKeyEvents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDKeyEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents(CDKeyEvents other) : this() {
      msgid_ = other.msgid_;
      sqlStr_ = other.sqlStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDKeyEvents Clone() {
      return new CDKeyEvents(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "sql_str" field.</summary>
    public const int SqlStrFieldNumber = 2;
    private string sqlStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlStr {
      get { return sqlStr_; }
      set {
        sqlStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDKeyEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDKeyEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (SqlStr != other.SqlStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (SqlStr.Length != 0) hash ^= SqlStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SqlStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (SqlStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDKeyEvents other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.SqlStr.Length != 0) {
        SqlStr = other.SqlStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            SqlStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eUpdateUserGameMail_DBCallBack
  /// </summary>
  public sealed partial class UpdateUserMail : pb::IMessage<UpdateUserMail> {
    private static readonly pb::MessageParser<UpdateUserMail> _parser = new pb::MessageParser<UpdateUserMail>(() => new UpdateUserMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUserMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserMail(UpdateUserMail other) : this() {
      msgid_ = other.msgid_;
      objid_ = other.objid_;
      mailid_ = other.mailid_;
      cstate_ = other.cstate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserMail Clone() {
      return new UpdateUserMail(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 2;
    private long objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 3;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "cstate" field.</summary>
    public const int CstateFieldNumber = 4;
    private int cstate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cstate {
      get { return cstate_; }
      set {
        cstate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUserMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUserMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objid != other.Objid) return false;
      if (Mailid != other.Mailid) return false;
      if (Cstate != other.Cstate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objid != 0L) hash ^= Objid.GetHashCode();
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (Cstate != 0) hash ^= Cstate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Objid);
      }
      if (Mailid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mailid);
      }
      if (Cstate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cstate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Objid);
      }
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (Cstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cstate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUserMail other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objid != 0L) {
        Objid = other.Objid;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.Cstate != 0) {
        Cstate = other.Cstate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objid = input.ReadInt64();
            break;
          }
          case 24: {
            Mailid = input.ReadInt32();
            break;
          }
          case 32: {
            Cstate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoreUserdata : pb::IMessage<StoreUserdata> {
    private static readonly pb::MessageParser<StoreUserdata> _parser = new pb::MessageParser<StoreUserdata>(() => new StoreUserdata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreUserdata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreUserdata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreUserdata(StoreUserdata other) : this() {
      un64ObjIdx_ = other.un64ObjIdx_;
      eUserPlatform_ = other.eUserPlatform_;
      un32HeaderID_ = other.un32HeaderID_;
      n8Sex_ = other.n8Sex_;
      n64Diamond_ = other.n64Diamond_;
      n64Gold_ = other.n64Gold_;
      tRegisteUTCMillisec_ = other.tRegisteUTCMillisec_;
      tLastLoginUTCMillisec_ = other.tLastLoginUTCMillisec_;
      tLastLogOutUTCTime_ = other.tLastLogOutUTCTime_;
      n64Score_ = other.n64Score_;
      un32TotalGameInns_ = other.un32TotalGameInns_;
      un32TotalWinInns_ = other.un32TotalWinInns_;
      un32TotalHeroKills_ = other.un32TotalHeroKills_;
      un32TotalDestoryBuildings_ = other.un32TotalDestoryBuildings_;
      un32TotalDeadTimes_ = other.un32TotalDeadTimes_;
      un32TotalAssist_ = other.un32TotalAssist_;
      un16UserLv_ = other.un16UserLv_;
      un32UserCurLvExp_ = other.un32UserCurLvExp_;
      tLastFirstWinTime_ = other.tLastFirstWinTime_;
      un16Cldays_ = other.un16Cldays_;
      tLastGetLoginReward_ = other.tLastGetLoginReward_;
      un16VipLv_ = other.un16VipLv_;
      vipScore_ = other.vipScore_;
      mGuideSteps_ = other.mGuideSteps_;
      sSUserHeroDBData_ = other.sSUserHeroDBData_.Clone();
      friendList_ = other.friendList_.Clone();
      blackList_ = other.blackList_.Clone();
      itemlist_ = other.itemlist_.Clone();
      mailList_ = other.mailList_.Clone();
      nickname_ = other.nickname_;
      username_ = other.username_;
      pwd_ = other.pwd_;
      runestr_ = other.runestr_;
      slotstr_ = other.slotstr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreUserdata Clone() {
      return new StoreUserdata(this);
    }

    /// <summary>Field number for the "un64ObjIdx" field.</summary>
    public const int Un64ObjIdxFieldNumber = 1;
    private long un64ObjIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Un64ObjIdx {
      get { return un64ObjIdx_; }
      set {
        un64ObjIdx_ = value;
      }
    }

    /// <summary>Field number for the "eUserPlatform" field.</summary>
    public const int EUserPlatformFieldNumber = 2;
    private int eUserPlatform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EUserPlatform {
      get { return eUserPlatform_; }
      set {
        eUserPlatform_ = value;
      }
    }

    /// <summary>Field number for the "un32HeaderID" field.</summary>
    public const int Un32HeaderIDFieldNumber = 3;
    private int un32HeaderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32HeaderID {
      get { return un32HeaderID_; }
      set {
        un32HeaderID_ = value;
      }
    }

    /// <summary>Field number for the "n8Sex" field.</summary>
    public const int N8SexFieldNumber = 4;
    private int n8Sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N8Sex {
      get { return n8Sex_; }
      set {
        n8Sex_ = value;
      }
    }

    /// <summary>Field number for the "n64Diamond" field.</summary>
    public const int N64DiamondFieldNumber = 5;
    private long n64Diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long N64Diamond {
      get { return n64Diamond_; }
      set {
        n64Diamond_ = value;
      }
    }

    /// <summary>Field number for the "n64Gold" field.</summary>
    public const int N64GoldFieldNumber = 6;
    private long n64Gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long N64Gold {
      get { return n64Gold_; }
      set {
        n64Gold_ = value;
      }
    }

    /// <summary>Field number for the "tRegisteUTCMillisec" field.</summary>
    public const int TRegisteUTCMillisecFieldNumber = 7;
    private long tRegisteUTCMillisec_;
    /// <summary>
    ///注册时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TRegisteUTCMillisec {
      get { return tRegisteUTCMillisec_; }
      set {
        tRegisteUTCMillisec_ = value;
      }
    }

    /// <summary>Field number for the "tLastLoginUTCMillisec" field.</summary>
    public const int TLastLoginUTCMillisecFieldNumber = 8;
    private long tLastLoginUTCMillisec_;
    /// <summary>
    ///上次登录时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TLastLoginUTCMillisec {
      get { return tLastLoginUTCMillisec_; }
      set {
        tLastLoginUTCMillisec_ = value;
      }
    }

    /// <summary>Field number for the "tLastLogOutUTCTime" field.</summary>
    public const int TLastLogOutUTCTimeFieldNumber = 9;
    private long tLastLogOutUTCTime_;
    /// <summary>
    ///下线时间(主动退出，断线s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TLastLogOutUTCTime {
      get { return tLastLogOutUTCTime_; }
      set {
        tLastLogOutUTCTime_ = value;
      }
    }

    /// <summary>Field number for the "n64Score" field.</summary>
    public const int N64ScoreFieldNumber = 10;
    private long n64Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long N64Score {
      get { return n64Score_; }
      set {
        n64Score_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalGameInns" field.</summary>
    public const int Un32TotalGameInnsFieldNumber = 11;
    private int un32TotalGameInns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalGameInns {
      get { return un32TotalGameInns_; }
      set {
        un32TotalGameInns_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalWinInns" field.</summary>
    public const int Un32TotalWinInnsFieldNumber = 12;
    private int un32TotalWinInns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalWinInns {
      get { return un32TotalWinInns_; }
      set {
        un32TotalWinInns_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalHeroKills" field.</summary>
    public const int Un32TotalHeroKillsFieldNumber = 13;
    private int un32TotalHeroKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalHeroKills {
      get { return un32TotalHeroKills_; }
      set {
        un32TotalHeroKills_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalDestoryBuildings" field.</summary>
    public const int Un32TotalDestoryBuildingsFieldNumber = 14;
    private int un32TotalDestoryBuildings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalDestoryBuildings {
      get { return un32TotalDestoryBuildings_; }
      set {
        un32TotalDestoryBuildings_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalDeadTimes" field.</summary>
    public const int Un32TotalDeadTimesFieldNumber = 15;
    private int un32TotalDeadTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalDeadTimes {
      get { return un32TotalDeadTimes_; }
      set {
        un32TotalDeadTimes_ = value;
      }
    }

    /// <summary>Field number for the "un32TotalAssist" field.</summary>
    public const int Un32TotalAssistFieldNumber = 16;
    private int un32TotalAssist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32TotalAssist {
      get { return un32TotalAssist_; }
      set {
        un32TotalAssist_ = value;
      }
    }

    /// <summary>Field number for the "un16UserLv" field.</summary>
    public const int Un16UserLvFieldNumber = 17;
    private int un16UserLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un16UserLv {
      get { return un16UserLv_; }
      set {
        un16UserLv_ = value;
      }
    }

    /// <summary>Field number for the "un32UserCurLvExp" field.</summary>
    public const int Un32UserCurLvExpFieldNumber = 18;
    private int un32UserCurLvExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un32UserCurLvExp {
      get { return un32UserCurLvExp_; }
      set {
        un32UserCurLvExp_ = value;
      }
    }

    /// <summary>Field number for the "tLastFirstWinTime" field.</summary>
    public const int TLastFirstWinTimeFieldNumber = 19;
    private long tLastFirstWinTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TLastFirstWinTime {
      get { return tLastFirstWinTime_; }
      set {
        tLastFirstWinTime_ = value;
      }
    }

    /// <summary>Field number for the "un16Cldays" field.</summary>
    public const int Un16CldaysFieldNumber = 20;
    private int un16Cldays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un16Cldays {
      get { return un16Cldays_; }
      set {
        un16Cldays_ = value;
      }
    }

    /// <summary>Field number for the "tLastGetLoginReward" field.</summary>
    public const int TLastGetLoginRewardFieldNumber = 21;
    private string tLastGetLoginReward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TLastGetLoginReward {
      get { return tLastGetLoginReward_; }
      set {
        tLastGetLoginReward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "un16VipLv" field.</summary>
    public const int Un16VipLvFieldNumber = 22;
    private int un16VipLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Un16VipLv {
      get { return un16VipLv_; }
      set {
        un16VipLv_ = value;
      }
    }

    /// <summary>Field number for the "vipScore" field.</summary>
    public const int VipScoreFieldNumber = 23;
    private int vipScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipScore {
      get { return vipScore_; }
      set {
        vipScore_ = value;
      }
    }

    /// <summary>Field number for the "mGuideSteps" field.</summary>
    public const int MGuideStepsFieldNumber = 24;
    private string mGuideSteps_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MGuideSteps {
      get { return mGuideSteps_; }
      set {
        mGuideSteps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sSUserHeroDBData" field.</summary>
    public const int SSUserHeroDBDataFieldNumber = 25;
    private static readonly pb::FieldCodec<global::CSToDB.StoreUserdata.Types.SUserHeroDBData> _repeated_sSUserHeroDBData_codec
        = pb::FieldCodec.ForMessage(202, global::CSToDB.StoreUserdata.Types.SUserHeroDBData.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserHeroDBData> sSUserHeroDBData_ = new pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserHeroDBData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserHeroDBData> SSUserHeroDBData {
      get { return sSUserHeroDBData_; }
    }

    /// <summary>Field number for the "friendList" field.</summary>
    public const int FriendListFieldNumber = 26;
    private static readonly pb::FieldCodec<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> _repeated_friendList_codec
        = pb::FieldCodec.ForMessage(210, global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> friendList_ = new pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> FriendList {
      get { return friendList_; }
    }

    /// <summary>Field number for the "blackList" field.</summary>
    public const int BlackListFieldNumber = 27;
    private static readonly pb::FieldCodec<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> _repeated_blackList_codec
        = pb::FieldCodec.ForMessage(218, global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> blackList_ = new pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserRelationshipInfo> BlackList {
      get { return blackList_; }
    }

    /// <summary>Field number for the "itemlist" field.</summary>
    public const int ItemlistFieldNumber = 28;
    private static readonly pb::FieldCodec<global::CSToDB.StoreUserdata.Types.SUserItemInfo> _repeated_itemlist_codec
        = pb::FieldCodec.ForMessage(226, global::CSToDB.StoreUserdata.Types.SUserItemInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserItemInfo> itemlist_ = new pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.SUserItemInfo> Itemlist {
      get { return itemlist_; }
    }

    /// <summary>Field number for the "mailList" field.</summary>
    public const int MailListFieldNumber = 29;
    private static readonly pb::FieldCodec<global::CSToDB.StoreUserdata.Types.UserMailDBData> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(234, global::CSToDB.StoreUserdata.Types.UserMailDBData.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.UserMailDBData> mailList_ = new pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.UserMailDBData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.StoreUserdata.Types.UserMailDBData> MailList {
      get { return mailList_; }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 30;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 31;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int PwdFieldNumber = 32;
    private string pwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runestr" field.</summary>
    public const int RunestrFieldNumber = 33;
    private string runestr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Runestr {
      get { return runestr_; }
      set {
        runestr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slotstr" field.</summary>
    public const int SlotstrFieldNumber = 34;
    private string slotstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Slotstr {
      get { return slotstr_; }
      set {
        slotstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreUserdata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreUserdata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Un64ObjIdx != other.Un64ObjIdx) return false;
      if (EUserPlatform != other.EUserPlatform) return false;
      if (Un32HeaderID != other.Un32HeaderID) return false;
      if (N8Sex != other.N8Sex) return false;
      if (N64Diamond != other.N64Diamond) return false;
      if (N64Gold != other.N64Gold) return false;
      if (TRegisteUTCMillisec != other.TRegisteUTCMillisec) return false;
      if (TLastLoginUTCMillisec != other.TLastLoginUTCMillisec) return false;
      if (TLastLogOutUTCTime != other.TLastLogOutUTCTime) return false;
      if (N64Score != other.N64Score) return false;
      if (Un32TotalGameInns != other.Un32TotalGameInns) return false;
      if (Un32TotalWinInns != other.Un32TotalWinInns) return false;
      if (Un32TotalHeroKills != other.Un32TotalHeroKills) return false;
      if (Un32TotalDestoryBuildings != other.Un32TotalDestoryBuildings) return false;
      if (Un32TotalDeadTimes != other.Un32TotalDeadTimes) return false;
      if (Un32TotalAssist != other.Un32TotalAssist) return false;
      if (Un16UserLv != other.Un16UserLv) return false;
      if (Un32UserCurLvExp != other.Un32UserCurLvExp) return false;
      if (TLastFirstWinTime != other.TLastFirstWinTime) return false;
      if (Un16Cldays != other.Un16Cldays) return false;
      if (TLastGetLoginReward != other.TLastGetLoginReward) return false;
      if (Un16VipLv != other.Un16VipLv) return false;
      if (VipScore != other.VipScore) return false;
      if (MGuideSteps != other.MGuideSteps) return false;
      if(!sSUserHeroDBData_.Equals(other.sSUserHeroDBData_)) return false;
      if(!friendList_.Equals(other.friendList_)) return false;
      if(!blackList_.Equals(other.blackList_)) return false;
      if(!itemlist_.Equals(other.itemlist_)) return false;
      if(!mailList_.Equals(other.mailList_)) return false;
      if (Nickname != other.Nickname) return false;
      if (Username != other.Username) return false;
      if (Pwd != other.Pwd) return false;
      if (Runestr != other.Runestr) return false;
      if (Slotstr != other.Slotstr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Un64ObjIdx != 0L) hash ^= Un64ObjIdx.GetHashCode();
      if (EUserPlatform != 0) hash ^= EUserPlatform.GetHashCode();
      if (Un32HeaderID != 0) hash ^= Un32HeaderID.GetHashCode();
      if (N8Sex != 0) hash ^= N8Sex.GetHashCode();
      if (N64Diamond != 0L) hash ^= N64Diamond.GetHashCode();
      if (N64Gold != 0L) hash ^= N64Gold.GetHashCode();
      if (TRegisteUTCMillisec != 0L) hash ^= TRegisteUTCMillisec.GetHashCode();
      if (TLastLoginUTCMillisec != 0L) hash ^= TLastLoginUTCMillisec.GetHashCode();
      if (TLastLogOutUTCTime != 0L) hash ^= TLastLogOutUTCTime.GetHashCode();
      if (N64Score != 0L) hash ^= N64Score.GetHashCode();
      if (Un32TotalGameInns != 0) hash ^= Un32TotalGameInns.GetHashCode();
      if (Un32TotalWinInns != 0) hash ^= Un32TotalWinInns.GetHashCode();
      if (Un32TotalHeroKills != 0) hash ^= Un32TotalHeroKills.GetHashCode();
      if (Un32TotalDestoryBuildings != 0) hash ^= Un32TotalDestoryBuildings.GetHashCode();
      if (Un32TotalDeadTimes != 0) hash ^= Un32TotalDeadTimes.GetHashCode();
      if (Un32TotalAssist != 0) hash ^= Un32TotalAssist.GetHashCode();
      if (Un16UserLv != 0) hash ^= Un16UserLv.GetHashCode();
      if (Un32UserCurLvExp != 0) hash ^= Un32UserCurLvExp.GetHashCode();
      if (TLastFirstWinTime != 0L) hash ^= TLastFirstWinTime.GetHashCode();
      if (Un16Cldays != 0) hash ^= Un16Cldays.GetHashCode();
      if (TLastGetLoginReward.Length != 0) hash ^= TLastGetLoginReward.GetHashCode();
      if (Un16VipLv != 0) hash ^= Un16VipLv.GetHashCode();
      if (VipScore != 0) hash ^= VipScore.GetHashCode();
      if (MGuideSteps.Length != 0) hash ^= MGuideSteps.GetHashCode();
      hash ^= sSUserHeroDBData_.GetHashCode();
      hash ^= friendList_.GetHashCode();
      hash ^= blackList_.GetHashCode();
      hash ^= itemlist_.GetHashCode();
      hash ^= mailList_.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (Runestr.Length != 0) hash ^= Runestr.GetHashCode();
      if (Slotstr.Length != 0) hash ^= Slotstr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Un64ObjIdx != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Un64ObjIdx);
      }
      if (EUserPlatform != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EUserPlatform);
      }
      if (Un32HeaderID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Un32HeaderID);
      }
      if (N8Sex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(N8Sex);
      }
      if (N64Diamond != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(N64Diamond);
      }
      if (N64Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(N64Gold);
      }
      if (TRegisteUTCMillisec != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TRegisteUTCMillisec);
      }
      if (TLastLoginUTCMillisec != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TLastLoginUTCMillisec);
      }
      if (TLastLogOutUTCTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TLastLogOutUTCTime);
      }
      if (N64Score != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(N64Score);
      }
      if (Un32TotalGameInns != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Un32TotalGameInns);
      }
      if (Un32TotalWinInns != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Un32TotalWinInns);
      }
      if (Un32TotalHeroKills != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Un32TotalHeroKills);
      }
      if (Un32TotalDestoryBuildings != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Un32TotalDestoryBuildings);
      }
      if (Un32TotalDeadTimes != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Un32TotalDeadTimes);
      }
      if (Un32TotalAssist != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Un32TotalAssist);
      }
      if (Un16UserLv != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Un16UserLv);
      }
      if (Un32UserCurLvExp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Un32UserCurLvExp);
      }
      if (TLastFirstWinTime != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(TLastFirstWinTime);
      }
      if (Un16Cldays != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Un16Cldays);
      }
      if (TLastGetLoginReward.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(TLastGetLoginReward);
      }
      if (Un16VipLv != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Un16VipLv);
      }
      if (VipScore != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(VipScore);
      }
      if (MGuideSteps.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(MGuideSteps);
      }
      sSUserHeroDBData_.WriteTo(output, _repeated_sSUserHeroDBData_codec);
      friendList_.WriteTo(output, _repeated_friendList_codec);
      blackList_.WriteTo(output, _repeated_blackList_codec);
      itemlist_.WriteTo(output, _repeated_itemlist_codec);
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (Nickname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Nickname);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Username);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Pwd);
      }
      if (Runestr.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Runestr);
      }
      if (Slotstr.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Slotstr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Un64ObjIdx != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Un64ObjIdx);
      }
      if (EUserPlatform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EUserPlatform);
      }
      if (Un32HeaderID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32HeaderID);
      }
      if (N8Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N8Sex);
      }
      if (N64Diamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Diamond);
      }
      if (N64Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Gold);
      }
      if (TRegisteUTCMillisec != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TRegisteUTCMillisec);
      }
      if (TLastLoginUTCMillisec != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TLastLoginUTCMillisec);
      }
      if (TLastLogOutUTCTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TLastLogOutUTCTime);
      }
      if (N64Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(N64Score);
      }
      if (Un32TotalGameInns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalGameInns);
      }
      if (Un32TotalWinInns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalWinInns);
      }
      if (Un32TotalHeroKills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalHeroKills);
      }
      if (Un32TotalDestoryBuildings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalDestoryBuildings);
      }
      if (Un32TotalDeadTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalDeadTimes);
      }
      if (Un32TotalAssist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32TotalAssist);
      }
      if (Un16UserLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un16UserLv);
      }
      if (Un32UserCurLvExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un32UserCurLvExp);
      }
      if (TLastFirstWinTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TLastFirstWinTime);
      }
      if (Un16Cldays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un16Cldays);
      }
      if (TLastGetLoginReward.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TLastGetLoginReward);
      }
      if (Un16VipLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Un16VipLv);
      }
      if (VipScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VipScore);
      }
      if (MGuideSteps.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MGuideSteps);
      }
      size += sSUserHeroDBData_.CalculateSize(_repeated_sSUserHeroDBData_codec);
      size += friendList_.CalculateSize(_repeated_friendList_codec);
      size += blackList_.CalculateSize(_repeated_blackList_codec);
      size += itemlist_.CalculateSize(_repeated_itemlist_codec);
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Username.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Pwd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (Runestr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Runestr);
      }
      if (Slotstr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Slotstr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreUserdata other) {
      if (other == null) {
        return;
      }
      if (other.Un64ObjIdx != 0L) {
        Un64ObjIdx = other.Un64ObjIdx;
      }
      if (other.EUserPlatform != 0) {
        EUserPlatform = other.EUserPlatform;
      }
      if (other.Un32HeaderID != 0) {
        Un32HeaderID = other.Un32HeaderID;
      }
      if (other.N8Sex != 0) {
        N8Sex = other.N8Sex;
      }
      if (other.N64Diamond != 0L) {
        N64Diamond = other.N64Diamond;
      }
      if (other.N64Gold != 0L) {
        N64Gold = other.N64Gold;
      }
      if (other.TRegisteUTCMillisec != 0L) {
        TRegisteUTCMillisec = other.TRegisteUTCMillisec;
      }
      if (other.TLastLoginUTCMillisec != 0L) {
        TLastLoginUTCMillisec = other.TLastLoginUTCMillisec;
      }
      if (other.TLastLogOutUTCTime != 0L) {
        TLastLogOutUTCTime = other.TLastLogOutUTCTime;
      }
      if (other.N64Score != 0L) {
        N64Score = other.N64Score;
      }
      if (other.Un32TotalGameInns != 0) {
        Un32TotalGameInns = other.Un32TotalGameInns;
      }
      if (other.Un32TotalWinInns != 0) {
        Un32TotalWinInns = other.Un32TotalWinInns;
      }
      if (other.Un32TotalHeroKills != 0) {
        Un32TotalHeroKills = other.Un32TotalHeroKills;
      }
      if (other.Un32TotalDestoryBuildings != 0) {
        Un32TotalDestoryBuildings = other.Un32TotalDestoryBuildings;
      }
      if (other.Un32TotalDeadTimes != 0) {
        Un32TotalDeadTimes = other.Un32TotalDeadTimes;
      }
      if (other.Un32TotalAssist != 0) {
        Un32TotalAssist = other.Un32TotalAssist;
      }
      if (other.Un16UserLv != 0) {
        Un16UserLv = other.Un16UserLv;
      }
      if (other.Un32UserCurLvExp != 0) {
        Un32UserCurLvExp = other.Un32UserCurLvExp;
      }
      if (other.TLastFirstWinTime != 0L) {
        TLastFirstWinTime = other.TLastFirstWinTime;
      }
      if (other.Un16Cldays != 0) {
        Un16Cldays = other.Un16Cldays;
      }
      if (other.TLastGetLoginReward.Length != 0) {
        TLastGetLoginReward = other.TLastGetLoginReward;
      }
      if (other.Un16VipLv != 0) {
        Un16VipLv = other.Un16VipLv;
      }
      if (other.VipScore != 0) {
        VipScore = other.VipScore;
      }
      if (other.MGuideSteps.Length != 0) {
        MGuideSteps = other.MGuideSteps;
      }
      sSUserHeroDBData_.Add(other.sSUserHeroDBData_);
      friendList_.Add(other.friendList_);
      blackList_.Add(other.blackList_);
      itemlist_.Add(other.itemlist_);
      mailList_.Add(other.mailList_);
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      if (other.Runestr.Length != 0) {
        Runestr = other.Runestr;
      }
      if (other.Slotstr.Length != 0) {
        Slotstr = other.Slotstr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Un64ObjIdx = input.ReadInt64();
            break;
          }
          case 16: {
            EUserPlatform = input.ReadInt32();
            break;
          }
          case 24: {
            Un32HeaderID = input.ReadInt32();
            break;
          }
          case 32: {
            N8Sex = input.ReadInt32();
            break;
          }
          case 40: {
            N64Diamond = input.ReadInt64();
            break;
          }
          case 48: {
            N64Gold = input.ReadInt64();
            break;
          }
          case 56: {
            TRegisteUTCMillisec = input.ReadInt64();
            break;
          }
          case 64: {
            TLastLoginUTCMillisec = input.ReadInt64();
            break;
          }
          case 72: {
            TLastLogOutUTCTime = input.ReadInt64();
            break;
          }
          case 80: {
            N64Score = input.ReadInt64();
            break;
          }
          case 88: {
            Un32TotalGameInns = input.ReadInt32();
            break;
          }
          case 96: {
            Un32TotalWinInns = input.ReadInt32();
            break;
          }
          case 104: {
            Un32TotalHeroKills = input.ReadInt32();
            break;
          }
          case 112: {
            Un32TotalDestoryBuildings = input.ReadInt32();
            break;
          }
          case 120: {
            Un32TotalDeadTimes = input.ReadInt32();
            break;
          }
          case 128: {
            Un32TotalAssist = input.ReadInt32();
            break;
          }
          case 136: {
            Un16UserLv = input.ReadInt32();
            break;
          }
          case 144: {
            Un32UserCurLvExp = input.ReadInt32();
            break;
          }
          case 152: {
            TLastFirstWinTime = input.ReadInt64();
            break;
          }
          case 160: {
            Un16Cldays = input.ReadInt32();
            break;
          }
          case 170: {
            TLastGetLoginReward = input.ReadString();
            break;
          }
          case 176: {
            Un16VipLv = input.ReadInt32();
            break;
          }
          case 184: {
            VipScore = input.ReadInt32();
            break;
          }
          case 194: {
            MGuideSteps = input.ReadString();
            break;
          }
          case 202: {
            sSUserHeroDBData_.AddEntriesFrom(input, _repeated_sSUserHeroDBData_codec);
            break;
          }
          case 210: {
            friendList_.AddEntriesFrom(input, _repeated_friendList_codec);
            break;
          }
          case 218: {
            blackList_.AddEntriesFrom(input, _repeated_blackList_codec);
            break;
          }
          case 226: {
            itemlist_.AddEntriesFrom(input, _repeated_itemlist_codec);
            break;
          }
          case 234: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 242: {
            Nickname = input.ReadString();
            break;
          }
          case 250: {
            Username = input.ReadString();
            break;
          }
          case 258: {
            Pwd = input.ReadString();
            break;
          }
          case 266: {
            Runestr = input.ReadString();
            break;
          }
          case 274: {
            Slotstr = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StoreUserdata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SUserHeroDBData : pb::IMessage<SUserHeroDBData> {
        private static readonly pb::MessageParser<SUserHeroDBData> _parser = new pb::MessageParser<SUserHeroDBData>(() => new SUserHeroDBData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SUserHeroDBData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToDB.StoreUserdata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserHeroDBData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserHeroDBData(SUserHeroDBData other) : this() {
          un32HeroID_ = other.un32HeroID_;
          endTime_ = other.endTime_;
          buyTime_ = other.buyTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserHeroDBData Clone() {
          return new SUserHeroDBData(this);
        }

        /// <summary>Field number for the "un32HeroID" field.</summary>
        public const int Un32HeroIDFieldNumber = 1;
        private int un32HeroID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Un32HeroID {
          get { return un32HeroID_; }
          set {
            un32HeroID_ = value;
          }
        }

        /// <summary>Field number for the "endTime" field.</summary>
        public const int EndTimeFieldNumber = 2;
        private long endTime_;
        /// <summary>
        /// time(NULL)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "buyTime" field.</summary>
        public const int BuyTimeFieldNumber = 3;
        private long buyTime_;
        /// <summary>
        ///购买时间   time(NULL)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long BuyTime {
          get { return buyTime_; }
          set {
            buyTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SUserHeroDBData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SUserHeroDBData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Un32HeroID != other.Un32HeroID) return false;
          if (EndTime != other.EndTime) return false;
          if (BuyTime != other.BuyTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Un32HeroID != 0) hash ^= Un32HeroID.GetHashCode();
          if (EndTime != 0L) hash ^= EndTime.GetHashCode();
          if (BuyTime != 0L) hash ^= BuyTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Un32HeroID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Un32HeroID);
          }
          if (EndTime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(EndTime);
          }
          if (BuyTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(BuyTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Un32HeroID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Un32HeroID);
          }
          if (EndTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
          }
          if (BuyTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SUserHeroDBData other) {
          if (other == null) {
            return;
          }
          if (other.Un32HeroID != 0) {
            Un32HeroID = other.Un32HeroID;
          }
          if (other.EndTime != 0L) {
            EndTime = other.EndTime;
          }
          if (other.BuyTime != 0L) {
            BuyTime = other.BuyTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Un32HeroID = input.ReadInt32();
                break;
              }
              case 16: {
                EndTime = input.ReadInt64();
                break;
              }
              case 24: {
                BuyTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SUserRelationshipInfo : pb::IMessage<SUserRelationshipInfo> {
        private static readonly pb::MessageParser<SUserRelationshipInfo> _parser = new pb::MessageParser<SUserRelationshipInfo>(() => new SUserRelationshipInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SUserRelationshipInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToDB.StoreUserdata.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRelationshipInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRelationshipInfo(SUserRelationshipInfo other) : this() {
          stNickName_ = other.stNickName_;
          nHeadId_ = other.nHeadId_;
          guididx_ = other.guididx_;
          eRelationShip_ = other.eRelationShip_;
          tMilSec_ = other.tMilSec_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserRelationshipInfo Clone() {
          return new SUserRelationshipInfo(this);
        }

        /// <summary>Field number for the "stNickName" field.</summary>
        public const int StNickNameFieldNumber = 1;
        private string stNickName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StNickName {
          get { return stNickName_; }
          set {
            stNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "nHeadId" field.</summary>
        public const int NHeadIdFieldNumber = 2;
        private int nHeadId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NHeadId {
          get { return nHeadId_; }
          set {
            nHeadId_ = value;
          }
        }

        /// <summary>Field number for the "guididx" field.</summary>
        public const int GuididxFieldNumber = 3;
        private long guididx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Guididx {
          get { return guididx_; }
          set {
            guididx_ = value;
          }
        }

        /// <summary>Field number for the "eRelationShip" field.</summary>
        public const int ERelationShipFieldNumber = 4;
        private int eRelationShip_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ERelationShip {
          get { return eRelationShip_; }
          set {
            eRelationShip_ = value;
          }
        }

        /// <summary>Field number for the "tMilSec" field.</summary>
        public const int TMilSecFieldNumber = 5;
        private long tMilSec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TMilSec {
          get { return tMilSec_; }
          set {
            tMilSec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SUserRelationshipInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SUserRelationshipInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StNickName != other.StNickName) return false;
          if (NHeadId != other.NHeadId) return false;
          if (Guididx != other.Guididx) return false;
          if (ERelationShip != other.ERelationShip) return false;
          if (TMilSec != other.TMilSec) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StNickName.Length != 0) hash ^= StNickName.GetHashCode();
          if (NHeadId != 0) hash ^= NHeadId.GetHashCode();
          if (Guididx != 0L) hash ^= Guididx.GetHashCode();
          if (ERelationShip != 0) hash ^= ERelationShip.GetHashCode();
          if (TMilSec != 0L) hash ^= TMilSec.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StNickName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(StNickName);
          }
          if (NHeadId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NHeadId);
          }
          if (Guididx != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Guididx);
          }
          if (ERelationShip != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ERelationShip);
          }
          if (TMilSec != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(TMilSec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StNickName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StNickName);
          }
          if (NHeadId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NHeadId);
          }
          if (Guididx != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guididx);
          }
          if (ERelationShip != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ERelationShip);
          }
          if (TMilSec != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TMilSec);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SUserRelationshipInfo other) {
          if (other == null) {
            return;
          }
          if (other.StNickName.Length != 0) {
            StNickName = other.StNickName;
          }
          if (other.NHeadId != 0) {
            NHeadId = other.NHeadId;
          }
          if (other.Guididx != 0L) {
            Guididx = other.Guididx;
          }
          if (other.ERelationShip != 0) {
            ERelationShip = other.ERelationShip;
          }
          if (other.TMilSec != 0L) {
            TMilSec = other.TMilSec;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                StNickName = input.ReadString();
                break;
              }
              case 16: {
                NHeadId = input.ReadInt32();
                break;
              }
              case 24: {
                Guididx = input.ReadInt64();
                break;
              }
              case 32: {
                ERelationShip = input.ReadInt32();
                break;
              }
              case 40: {
                TMilSec = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SUserItemInfo : pb::IMessage<SUserItemInfo> {
        private static readonly pb::MessageParser<SUserItemInfo> _parser = new pb::MessageParser<SUserItemInfo>(() => new SUserItemInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SUserItemInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToDB.StoreUserdata.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserItemInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserItemInfo(SUserItemInfo other) : this() {
          itemId_ = other.itemId_;
          ifusing_ = other.ifusing_;
          itemNum_ = other.itemNum_;
          buyTime_ = other.buyTime_;
          endTime_ = other.endTime_;
          n32EffectValue_ = other.n32EffectValue_;
          n32EffectID_ = other.n32EffectID_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SUserItemInfo Clone() {
          return new SUserItemInfo(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private int itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "ifusing" field.</summary>
        public const int IfusingFieldNumber = 2;
        private bool ifusing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Ifusing {
          get { return ifusing_; }
          set {
            ifusing_ = value;
          }
        }

        /// <summary>Field number for the "item_num" field.</summary>
        public const int ItemNumFieldNumber = 3;
        private int itemNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemNum {
          get { return itemNum_; }
          set {
            itemNum_ = value;
          }
        }

        /// <summary>Field number for the "buy_time" field.</summary>
        public const int BuyTimeFieldNumber = 4;
        private long buyTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long BuyTime {
          get { return buyTime_; }
          set {
            buyTime_ = value;
          }
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 6;
        private long endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "n32EffectValue" field.</summary>
        public const int N32EffectValueFieldNumber = 7;
        private int n32EffectValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32EffectValue {
          get { return n32EffectValue_; }
          set {
            n32EffectValue_ = value;
          }
        }

        /// <summary>Field number for the "n32EffectID" field.</summary>
        public const int N32EffectIDFieldNumber = 8;
        private int n32EffectID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int N32EffectID {
          get { return n32EffectID_; }
          set {
            n32EffectID_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SUserItemInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SUserItemInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (Ifusing != other.Ifusing) return false;
          if (ItemNum != other.ItemNum) return false;
          if (BuyTime != other.BuyTime) return false;
          if (EndTime != other.EndTime) return false;
          if (N32EffectValue != other.N32EffectValue) return false;
          if (N32EffectID != other.N32EffectID) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemId != 0) hash ^= ItemId.GetHashCode();
          if (Ifusing != false) hash ^= Ifusing.GetHashCode();
          if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
          if (BuyTime != 0L) hash ^= BuyTime.GetHashCode();
          if (EndTime != 0L) hash ^= EndTime.GetHashCode();
          if (N32EffectValue != 0) hash ^= N32EffectValue.GetHashCode();
          if (N32EffectID != 0) hash ^= N32EffectID.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemId);
          }
          if (Ifusing != false) {
            output.WriteRawTag(16);
            output.WriteBool(Ifusing);
          }
          if (ItemNum != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ItemNum);
          }
          if (BuyTime != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(BuyTime);
          }
          if (EndTime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(EndTime);
          }
          if (N32EffectValue != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(N32EffectValue);
          }
          if (N32EffectID != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(N32EffectID);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
          }
          if (Ifusing != false) {
            size += 1 + 1;
          }
          if (ItemNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
          }
          if (BuyTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyTime);
          }
          if (EndTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
          }
          if (N32EffectValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N32EffectValue);
          }
          if (N32EffectID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(N32EffectID);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SUserItemInfo other) {
          if (other == null) {
            return;
          }
          if (other.ItemId != 0) {
            ItemId = other.ItemId;
          }
          if (other.Ifusing != false) {
            Ifusing = other.Ifusing;
          }
          if (other.ItemNum != 0) {
            ItemNum = other.ItemNum;
          }
          if (other.BuyTime != 0L) {
            BuyTime = other.BuyTime;
          }
          if (other.EndTime != 0L) {
            EndTime = other.EndTime;
          }
          if (other.N32EffectValue != 0) {
            N32EffectValue = other.N32EffectValue;
          }
          if (other.N32EffectID != 0) {
            N32EffectID = other.N32EffectID;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadInt32();
                break;
              }
              case 16: {
                Ifusing = input.ReadBool();
                break;
              }
              case 24: {
                ItemNum = input.ReadInt32();
                break;
              }
              case 32: {
                BuyTime = input.ReadInt64();
                break;
              }
              case 48: {
                EndTime = input.ReadInt64();
                break;
              }
              case 56: {
                N32EffectValue = input.ReadInt32();
                break;
              }
              case 64: {
                N32EffectID = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UserMailDBData : pb::IMessage<UserMailDBData> {
        private static readonly pb::MessageParser<UserMailDBData> _parser = new pb::MessageParser<UserMailDBData>(() => new UserMailDBData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserMailDBData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToDB.StoreUserdata.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserMailDBData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserMailDBData(UserMailDBData other) : this() {
          mailId_ = other.mailId_;
          mState_ = other.mState_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserMailDBData Clone() {
          return new UserMailDBData(this);
        }

        /// <summary>Field number for the "mailId" field.</summary>
        public const int MailIdFieldNumber = 1;
        private int mailId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MailId {
          get { return mailId_; }
          set {
            mailId_ = value;
          }
        }

        /// <summary>Field number for the "mState" field.</summary>
        public const int MStateFieldNumber = 2;
        private int mState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MState {
          get { return mState_; }
          set {
            mState_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserMailDBData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserMailDBData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MailId != other.MailId) return false;
          if (MState != other.MState) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MailId != 0) hash ^= MailId.GetHashCode();
          if (MState != 0) hash ^= MState.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MailId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MailId);
          }
          if (MState != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MailId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailId);
          }
          if (MState != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MState);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserMailDBData other) {
          if (other == null) {
            return;
          }
          if (other.MailId != 0) {
            MailId = other.MailId;
          }
          if (other.MState != 0) {
            MState = other.MState;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MailId = input.ReadInt32();
                break;
              }
              case 16: {
                MState = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class QueryNotice : pb::IMessage<QueryNotice> {
    private static readonly pb::MessageParser<QueryNotice> _parser = new pb::MessageParser<QueryNotice>(() => new QueryNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice(QueryNotice other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryNotice Clone() {
      return new QueryNotice(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryNotice other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExeSQL_Call : pb::IMessage<ExeSQL_Call> {
    private static readonly pb::MessageParser<ExeSQL_Call> _parser = new pb::MessageParser<ExeSQL_Call>(() => new ExeSQL_Call());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExeSQL_Call> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExeSQL_Call() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExeSQL_Call(ExeSQL_Call other) : this() {
      msgid_ = other.msgid_;
      sql_ = other.sql_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExeSQL_Call Clone() {
      return new ExeSQL_Call(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExeSQL_Call);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExeSQL_Call other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Sql != other.Sql) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExeSQL_Call other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeNickName : pb::IMessage<ChangeNickName> {
    private static readonly pb::MessageParser<ChangeNickName> _parser = new pb::MessageParser<ChangeNickName>(() => new ChangeNickName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNickName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickName(ChangeNickName other) : this() {
      msgid_ = other.msgid_;
      nickname_ = other.nickname_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNickName Clone() {
      return new ChangeNickName(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNickName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNickName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Nickname != other.Nickname) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (Guid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNickName other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 24: {
            Guid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlterItem : pb::IMessage<AlterItem> {
    private static readonly pb::MessageParser<AlterItem> _parser = new pb::MessageParser<AlterItem>(() => new AlterItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlterItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterItem(AlterItem other) : this() {
      mgsid_ = other.mgsid_;
      sqlStr_ = other.sqlStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterItem Clone() {
      return new AlterItem(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "sql_str" field.</summary>
    public const int SqlStrFieldNumber = 2;
    private string sqlStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlStr {
      get { return sqlStr_; }
      set {
        sqlStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlterItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlterItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (SqlStr != other.SqlStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (SqlStr.Length != 0) hash ^= SqlStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (SqlStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SqlStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (SqlStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlterItem other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.SqlStr.Length != 0) {
        SqlStr = other.SqlStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            SqlStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteNotice : pb::IMessage<DeleteNotice> {
    private static readonly pb::MessageParser<DeleteNotice> _parser = new pb::MessageParser<DeleteNotice>(() => new DeleteNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotice(DeleteNotice other) : this() {
      mgsid_ = other.mgsid_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotice Clone() {
      return new DeleteNotice(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNotice other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertNotice : pb::IMessage<InsertNotice> {
    private static readonly pb::MessageParser<InsertNotice> _parser = new pb::MessageParser<InsertNotice>(() => new InsertNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertNotice(InsertNotice other) : this() {
      mgsid_ = other.mgsid_;
      sqlStr_ = other.sqlStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertNotice Clone() {
      return new InsertNotice(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "sql_str" field.</summary>
    public const int SqlStrFieldNumber = 2;
    private string sqlStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlStr {
      get { return sqlStr_; }
      set {
        sqlStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (SqlStr != other.SqlStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (SqlStr.Length != 0) hash ^= SqlStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (SqlStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SqlStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (SqlStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertNotice other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.SqlStr.Length != 0) {
        SqlStr = other.SqlStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            SqlStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlterSNSList : pb::IMessage<AlterSNSList> {
    private static readonly pb::MessageParser<AlterSNSList> _parser = new pb::MessageParser<AlterSNSList>(() => new AlterSNSList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlterSNSList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterSNSList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterSNSList(AlterSNSList other) : this() {
      mgsid_ = other.mgsid_;
      userId_ = other.userId_;
      relatedId_ = other.relatedId_;
      related_ = other.related_;
      opration_ = other.opration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlterSNSList Clone() {
      return new AlterSNSList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "related_id" field.</summary>
    public const int RelatedIdFieldNumber = 3;
    private ulong relatedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RelatedId {
      get { return relatedId_; }
      set {
        relatedId_ = value;
      }
    }

    /// <summary>Field number for the "related" field.</summary>
    public const int RelatedFieldNumber = 4;
    private uint related_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Related {
      get { return related_; }
      set {
        related_ = value;
      }
    }

    /// <summary>Field number for the "opration" field.</summary>
    public const int OprationFieldNumber = 5;
    private uint opration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Opration {
      get { return opration_; }
      set {
        opration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlterSNSList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlterSNSList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (UserId != other.UserId) return false;
      if (RelatedId != other.RelatedId) return false;
      if (Related != other.Related) return false;
      if (Opration != other.Opration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (RelatedId != 0UL) hash ^= RelatedId.GetHashCode();
      if (Related != 0) hash ^= Related.GetHashCode();
      if (Opration != 0) hash ^= Opration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
      if (RelatedId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RelatedId);
      }
      if (Related != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Related);
      }
      if (Opration != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Opration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (RelatedId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RelatedId);
      }
      if (Related != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Related);
      }
      if (Opration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Opration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlterSNSList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.RelatedId != 0UL) {
        RelatedId = other.RelatedId;
      }
      if (other.Related != 0) {
        Related = other.Related;
      }
      if (other.Opration != 0) {
        Opration = other.Opration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
          case 24: {
            RelatedId = input.ReadUInt64();
            break;
          }
          case 32: {
            Related = input.ReadUInt32();
            break;
          }
          case 40: {
            Opration = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eQueryObjId_DBCallBack
  /// </summary>
  public sealed partial class QueryObjIdxReq : pb::IMessage<QueryObjIdxReq> {
    private static readonly pb::MessageParser<QueryObjIdxReq> _parser = new pb::MessageParser<QueryObjIdxReq>(() => new QueryObjIdxReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryObjIdxReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryObjIdxReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryObjIdxReq(QueryObjIdxReq other) : this() {
      msgid_ = other.msgid_;
      logininfo_ = other.logininfo_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      csid_ = other.csid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryObjIdxReq Clone() {
      return new QueryObjIdxReq(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "Logininfo" field.</summary>
    public const int LogininfoFieldNumber = 2;
    private string logininfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logininfo {
      get { return logininfo_; }
      set {
        logininfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 3;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 4;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "csid" field.</summary>
    public const int CsidFieldNumber = 5;
    private int csid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Csid {
      get { return csid_; }
      set {
        csid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryObjIdxReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryObjIdxReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Logininfo != other.Logininfo) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Csid != other.Csid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Logininfo.Length != 0) hash ^= Logininfo.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Csid != 0) hash ^= Csid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Logininfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logininfo);
      }
      if (Gsid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gcnetid);
      }
      if (Csid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Csid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Logininfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logininfo);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Csid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Csid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryObjIdxReq other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Logininfo.Length != 0) {
        Logininfo = other.Logininfo;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Csid != 0) {
        Csid = other.Csid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Logininfo = input.ReadString();
            break;
          }
          case 24: {
            Gsid = input.ReadInt32();
            break;
          }
          case 32: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 40: {
            Csid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NicknameConflict : pb::IMessage<NicknameConflict> {
    private static readonly pb::MessageParser<NicknameConflict> _parser = new pb::MessageParser<NicknameConflict>(() => new NicknameConflict());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NicknameConflict> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NicknameConflict() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NicknameConflict(NicknameConflict other) : this() {
      mgsid_ = other.mgsid_;
      newnickname_ = other.newnickname_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      guid_ = other.guid_;
      sdkid_ = other.sdkid_;
      csid_ = other.csid_;
      cdk_ = other.cdk_;
      oldnickname_ = other.oldnickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NicknameConflict Clone() {
      return new NicknameConflict(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "newnickname" field.</summary>
    public const int NewnicknameFieldNumber = 2;
    private string newnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newnickname {
      get { return newnickname_; }
      set {
        newnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 3;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 4;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 5;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "sdkid" field.</summary>
    public const int SdkidFieldNumber = 6;
    private int sdkid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sdkid {
      get { return sdkid_; }
      set {
        sdkid_ = value;
      }
    }

    /// <summary>Field number for the "csid" field.</summary>
    public const int CsidFieldNumber = 7;
    private int csid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Csid {
      get { return csid_; }
      set {
        csid_ = value;
      }
    }

    /// <summary>Field number for the "cdk" field.</summary>
    public const int CdkFieldNumber = 8;
    private string cdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cdk {
      get { return cdk_; }
      set {
        cdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oldnickname" field.</summary>
    public const int OldnicknameFieldNumber = 9;
    private string oldnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oldnickname {
      get { return oldnickname_; }
      set {
        oldnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NicknameConflict);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NicknameConflict other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Newnickname != other.Newnickname) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Guid != other.Guid) return false;
      if (Sdkid != other.Sdkid) return false;
      if (Csid != other.Csid) return false;
      if (Cdk != other.Cdk) return false;
      if (Oldnickname != other.Oldnickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Newnickname.Length != 0) hash ^= Newnickname.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Sdkid != 0) hash ^= Sdkid.GetHashCode();
      if (Csid != 0) hash ^= Csid.GetHashCode();
      if (Cdk.Length != 0) hash ^= Cdk.GetHashCode();
      if (Oldnickname.Length != 0) hash ^= Oldnickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Newnickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Newnickname);
      }
      if (Gsid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gcnetid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Guid);
      }
      if (Sdkid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sdkid);
      }
      if (Csid != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Csid);
      }
      if (Cdk.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cdk);
      }
      if (Oldnickname.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Oldnickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Newnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newnickname);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Sdkid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sdkid);
      }
      if (Csid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Csid);
      }
      if (Cdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cdk);
      }
      if (Oldnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oldnickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NicknameConflict other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Newnickname.Length != 0) {
        Newnickname = other.Newnickname;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Sdkid != 0) {
        Sdkid = other.Sdkid;
      }
      if (other.Csid != 0) {
        Csid = other.Csid;
      }
      if (other.Cdk.Length != 0) {
        Cdk = other.Cdk;
      }
      if (other.Oldnickname.Length != 0) {
        Oldnickname = other.Oldnickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Newnickname = input.ReadString();
            break;
          }
          case 24: {
            Gsid = input.ReadInt32();
            break;
          }
          case 32: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 40: {
            Guid = input.ReadUInt64();
            break;
          }
          case 48: {
            Sdkid = input.ReadInt32();
            break;
          }
          case 56: {
            Csid = input.ReadInt32();
            break;
          }
          case 66: {
            Cdk = input.ReadString();
            break;
          }
          case 74: {
            Oldnickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyGoods : pb::IMessage<BuyGoods> {
    private static readonly pb::MessageParser<BuyGoods> _parser = new pb::MessageParser<BuyGoods>(() => new BuyGoods());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyGoods> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods(BuyGoods other) : this() {
      mgsid_ = other.mgsid_;
      buygoodsmag_ = other.buygoodsmag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyGoods Clone() {
      return new BuyGoods(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "buygoodsmag" field.</summary>
    public const int BuygoodsmagFieldNumber = 2;
    private string buygoodsmag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Buygoodsmag {
      get { return buygoodsmag_; }
      set {
        buygoodsmag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyGoods);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyGoods other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Buygoodsmag != other.Buygoodsmag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Buygoodsmag.Length != 0) hash ^= Buygoodsmag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Buygoodsmag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Buygoodsmag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Buygoodsmag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Buygoodsmag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyGoods other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Buygoodsmag.Length != 0) {
        Buygoodsmag = other.Buygoodsmag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Buygoodsmag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameMailInfo : pb::IMessage<GameMailInfo> {
    private static readonly pb::MessageParser<GameMailInfo> _parser = new pb::MessageParser<GameMailInfo>(() => new GameMailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMailInfo(GameMailInfo other) : this() {
      type_ = other.type_;
      mailId_ = other.mailId_;
      userid_ = other.userid_;
      curtstate_ = other.curtstate_;
      sdkidx_ = other.sdkidx_;
      title_ = other.title_;
      content_ = other.content_;
      giftstr_ = other.giftstr_;
      createtime_ = other.createtime_;
      overtime_ = other.overtime_;
      sender_ = other.sender_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMailInfo Clone() {
      return new GameMailInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::CSToDB.MailType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MailType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mailId" field.</summary>
    public const int MailIdFieldNumber = 2;
    private int mailId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 3;
    private long userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "curtstate" field.</summary>
    public const int CurtstateFieldNumber = 4;
    private global::CSToDB.EMailCurtState curtstate_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.EMailCurtState Curtstate {
      get { return curtstate_; }
      set {
        curtstate_ = value;
      }
    }

    /// <summary>Field number for the "sdkidx" field.</summary>
    public const int SdkidxFieldNumber = 5;
    private int sdkidx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sdkidx {
      get { return sdkidx_; }
      set {
        sdkidx_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "giftstr" field.</summary>
    public const int GiftstrFieldNumber = 8;
    private string giftstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Giftstr {
      get { return giftstr_; }
      set {
        giftstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createtime" field.</summary>
    public const int CreatetimeFieldNumber = 9;
    private string createtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Createtime {
      get { return createtime_; }
      set {
        createtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overtime" field.</summary>
    public const int OvertimeFieldNumber = 10;
    private string overtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Overtime {
      get { return overtime_; }
      set {
        overtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 11;
    private string sender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MailId != other.MailId) return false;
      if (Userid != other.Userid) return false;
      if (Curtstate != other.Curtstate) return false;
      if (Sdkidx != other.Sdkidx) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Giftstr != other.Giftstr) return false;
      if (Createtime != other.Createtime) return false;
      if (Overtime != other.Overtime) return false;
      if (Sender != other.Sender) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MailId != 0) hash ^= MailId.GetHashCode();
      if (Userid != 0L) hash ^= Userid.GetHashCode();
      if (Curtstate != 0) hash ^= Curtstate.GetHashCode();
      if (Sdkidx != 0) hash ^= Sdkidx.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Giftstr.Length != 0) hash ^= Giftstr.GetHashCode();
      if (Createtime.Length != 0) hash ^= Createtime.GetHashCode();
      if (Overtime.Length != 0) hash ^= Overtime.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MailId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailId);
      }
      if (Userid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Userid);
      }
      if (Curtstate != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Curtstate);
      }
      if (Sdkidx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sdkidx);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Giftstr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Giftstr);
      }
      if (Createtime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Createtime);
      }
      if (Overtime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Overtime);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Sender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MailId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailId);
      }
      if (Userid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Userid);
      }
      if (Curtstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Curtstate);
      }
      if (Sdkidx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sdkidx);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Giftstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Giftstr);
      }
      if (Createtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Createtime);
      }
      if (Overtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Overtime);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MailId != 0) {
        MailId = other.MailId;
      }
      if (other.Userid != 0L) {
        Userid = other.Userid;
      }
      if (other.Curtstate != 0) {
        Curtstate = other.Curtstate;
      }
      if (other.Sdkidx != 0) {
        Sdkidx = other.Sdkidx;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Giftstr.Length != 0) {
        Giftstr = other.Giftstr;
      }
      if (other.Createtime.Length != 0) {
        Createtime = other.Createtime;
      }
      if (other.Overtime.Length != 0) {
        Overtime = other.Overtime;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::CSToDB.MailType) input.ReadEnum();
            break;
          }
          case 16: {
            MailId = input.ReadInt32();
            break;
          }
          case 24: {
            Userid = input.ReadInt64();
            break;
          }
          case 32: {
            curtstate_ = (global::CSToDB.EMailCurtState) input.ReadEnum();
            break;
          }
          case 40: {
            Sdkidx = input.ReadInt32();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 66: {
            Giftstr = input.ReadString();
            break;
          }
          case 74: {
            Createtime = input.ReadString();
            break;
          }
          case 82: {
            Overtime = input.ReadString();
            break;
          }
          case 90: {
            Sender = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eUpdateGameMail_DBCallBack
  /// </summary>
  public sealed partial class UpdateGameMail : pb::IMessage<UpdateGameMail> {
    private static readonly pb::MessageParser<UpdateGameMail> _parser = new pb::MessageParser<UpdateGameMail>(() => new UpdateGameMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateGameMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameMail(UpdateGameMail other) : this() {
      mgsid_ = other.mgsid_;
      maillist_ = other.maillist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameMail Clone() {
      return new UpdateGameMail(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "maillist" field.</summary>
    public const int MaillistFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CSToDB.GameMailInfo> _repeated_maillist_codec
        = pb::FieldCodec.ForMessage(18, global::CSToDB.GameMailInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToDB.GameMailInfo> maillist_ = new pbc::RepeatedField<global::CSToDB.GameMailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToDB.GameMailInfo> Maillist {
      get { return maillist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateGameMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateGameMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!maillist_.Equals(other.maillist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= maillist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      maillist_.WriteTo(output, _repeated_maillist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += maillist_.CalculateSize(_repeated_maillist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateGameMail other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      maillist_.Add(other.maillist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            maillist_.AddEntriesFrom(input, _repeated_maillist_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertUser : pb::IMessage<InsertUser> {
    private static readonly pb::MessageParser<InsertUser> _parser = new pb::MessageParser<InsertUser>(() => new InsertUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUser(InsertUser other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      sqlstr_ = other.sqlstr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUser Clone() {
      return new InsertUser(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "sqlstr" field.</summary>
    public const int SqlstrFieldNumber = 3;
    private string sqlstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sqlstr {
      get { return sqlstr_; }
      set {
        sqlstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Sqlstr != other.Sqlstr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Sqlstr.Length != 0) hash ^= Sqlstr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Sqlstr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sqlstr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Sqlstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sqlstr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertUser other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Sqlstr.Length != 0) {
        Sqlstr = other.Sqlstr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 26: {
            Sqlstr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateUser : pb::IMessage<UpdateUser> {
    private static readonly pb::MessageParser<UpdateUser> _parser = new pb::MessageParser<UpdateUser>(() => new UpdateUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUser(UpdateUser other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      sqlstr_ = other.sqlstr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUser Clone() {
      return new UpdateUser(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "sqlstr" field.</summary>
    public const int SqlstrFieldNumber = 3;
    private string sqlstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sqlstr {
      get { return sqlstr_; }
      set {
        sqlstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Sqlstr != other.Sqlstr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Sqlstr.Length != 0) hash ^= Sqlstr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Sqlstr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sqlstr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Sqlstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sqlstr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUser other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Sqlstr.Length != 0) {
        Sqlstr = other.Sqlstr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 26: {
            Sqlstr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckNameReq : pb::IMessage<CheckNameReq> {
    private static readonly pb::MessageParser<CheckNameReq> _parser = new pb::MessageParser<CheckNameReq>(() => new CheckNameReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckNameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameReq(CheckNameReq other) : this() {
      mgsid_ = other.mgsid_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      gsnetid_ = other.gsnetid_;
      sdkid_ = other.sdkid_;
      csid_ = other.csid_;
      cdk_ = other.cdk_;
      completeInfo_ = other.completeInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckNameReq Clone() {
      return new CheckNameReq(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::CSToDB.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 2;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 3;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "gsnetid" field.</summary>
    public const int GsnetidFieldNumber = 4;
    private int gsnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsnetid {
      get { return gsnetid_; }
      set {
        gsnetid_ = value;
      }
    }

    /// <summary>Field number for the "sdkid" field.</summary>
    public const int SdkidFieldNumber = 5;
    private int sdkid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sdkid {
      get { return sdkid_; }
      set {
        sdkid_ = value;
      }
    }

    /// <summary>Field number for the "csid" field.</summary>
    public const int CsidFieldNumber = 6;
    private int csid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Csid {
      get { return csid_; }
      set {
        csid_ = value;
      }
    }

    /// <summary>Field number for the "cdk" field.</summary>
    public const int CdkFieldNumber = 7;
    private string cdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cdk {
      get { return cdk_; }
      set {
        cdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completeInfo" field.</summary>
    public const int CompleteInfoFieldNumber = 8;
    private string completeInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompleteInfo {
      get { return completeInfo_; }
      set {
        completeInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckNameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckNameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Gsnetid != other.Gsnetid) return false;
      if (Sdkid != other.Sdkid) return false;
      if (Csid != other.Csid) return false;
      if (Cdk != other.Cdk) return false;
      if (CompleteInfo != other.CompleteInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Gsnetid != 0) hash ^= Gsnetid.GetHashCode();
      if (Sdkid != 0) hash ^= Sdkid.GetHashCode();
      if (Csid != 0) hash ^= Csid.GetHashCode();
      if (Cdk.Length != 0) hash ^= Cdk.GetHashCode();
      if (CompleteInfo.Length != 0) hash ^= CompleteInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Gsid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gcnetid);
      }
      if (Gsnetid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gsnetid);
      }
      if (Sdkid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sdkid);
      }
      if (Csid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Csid);
      }
      if (Cdk.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cdk);
      }
      if (CompleteInfo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CompleteInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Gsnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsnetid);
      }
      if (Sdkid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sdkid);
      }
      if (Csid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Csid);
      }
      if (Cdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cdk);
      }
      if (CompleteInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckNameReq other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Gsnetid != 0) {
        Gsnetid = other.Gsnetid;
      }
      if (other.Sdkid != 0) {
        Sdkid = other.Sdkid;
      }
      if (other.Csid != 0) {
        Csid = other.Csid;
      }
      if (other.Cdk.Length != 0) {
        Cdk = other.Cdk;
      }
      if (other.CompleteInfo.Length != 0) {
        CompleteInfo = other.CompleteInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Gsid = input.ReadInt32();
            break;
          }
          case 24: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 32: {
            Gsnetid = input.ReadInt32();
            break;
          }
          case 40: {
            Sdkid = input.ReadInt32();
            break;
          }
          case 48: {
            Csid = input.ReadInt32();
            break;
          }
          case 58: {
            Cdk = input.ReadString();
            break;
          }
          case 66: {
            CompleteInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryUserReq : pb::IMessage<QueryUserReq> {
    private static readonly pb::MessageParser<QueryUserReq> _parser = new pb::MessageParser<QueryUserReq>(() => new QueryUserReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToDB.CSToDBReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq(QueryUserReq other) : this() {
      msgid_ = other.msgid_;
      logininfo_ = other.logininfo_;
      gsid_ = other.gsid_;
      gcnetid_ = other.gcnetid_;
      csid_ = other.csid_;
      objid_ = other.objid_;
      uname_ = other.uname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq Clone() {
      return new QueryUserReq(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToDB.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToDB.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "Logininfo" field.</summary>
    public const int LogininfoFieldNumber = 2;
    private string logininfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logininfo {
      get { return logininfo_; }
      set {
        logininfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 3;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnetid" field.</summary>
    public const int GcnetidFieldNumber = 4;
    private int gcnetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnetid {
      get { return gcnetid_; }
      set {
        gcnetid_ = value;
      }
    }

    /// <summary>Field number for the "csid" field.</summary>
    public const int CsidFieldNumber = 5;
    private int csid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Csid {
      get { return csid_; }
      set {
        csid_ = value;
      }
    }

    /// <summary>Field number for the "objid" field.</summary>
    public const int ObjidFieldNumber = 6;
    private long objid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Objid {
      get { return objid_; }
      set {
        objid_ = value;
      }
    }

    /// <summary>Field number for the "uname" field.</summary>
    public const int UnameFieldNumber = 7;
    private string uname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uname {
      get { return uname_; }
      set {
        uname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Logininfo != other.Logininfo) return false;
      if (Gsid != other.Gsid) return false;
      if (Gcnetid != other.Gcnetid) return false;
      if (Csid != other.Csid) return false;
      if (Objid != other.Objid) return false;
      if (Uname != other.Uname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Logininfo.Length != 0) hash ^= Logininfo.GetHashCode();
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnetid != 0) hash ^= Gcnetid.GetHashCode();
      if (Csid != 0) hash ^= Csid.GetHashCode();
      if (Objid != 0L) hash ^= Objid.GetHashCode();
      if (Uname.Length != 0) hash ^= Uname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Logininfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logininfo);
      }
      if (Gsid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gsid);
      }
      if (Gcnetid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gcnetid);
      }
      if (Csid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Csid);
      }
      if (Objid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Objid);
      }
      if (Uname.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Logininfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logininfo);
      }
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnetid);
      }
      if (Csid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Csid);
      }
      if (Objid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Objid);
      }
      if (Uname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUserReq other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Logininfo.Length != 0) {
        Logininfo = other.Logininfo;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnetid != 0) {
        Gcnetid = other.Gcnetid;
      }
      if (other.Csid != 0) {
        Csid = other.Csid;
      }
      if (other.Objid != 0L) {
        Objid = other.Objid;
      }
      if (other.Uname.Length != 0) {
        Uname = other.Uname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToDB.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Logininfo = input.ReadString();
            break;
          }
          case 24: {
            Gsid = input.ReadInt32();
            break;
          }
          case 32: {
            Gcnetid = input.ReadInt32();
            break;
          }
          case 40: {
            Csid = input.ReadInt32();
            break;
          }
          case 48: {
            Objid = input.ReadInt64();
            break;
          }
          case 58: {
            Uname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
