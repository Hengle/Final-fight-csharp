// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CSToRC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CSToRC {

  /// <summary>Holder for reflection information generated from CSToRC.proto</summary>
  public static partial class CSToRCReflection {

    #region Descriptor
    /// <summary>File descriptor for CSToRC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CSToRCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDU1RvUkMucHJvdG8SBkNTVG9SQyLmAQoSUXVlcnlDRGtleUluZm9SZXNw",
            "EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1JDLk1zZ0lEEjMKBGluZm8YAiADKAsy",
            "JS5DU1RvUkMuUXVlcnlDRGtleUluZm9SZXNwLkNES2V5X0luZm8afQoKQ0RL",
            "ZXlfSW5mbxIKCgJpZBgBIAEoBRINCgV0aXRsZRgCIAEoCRIQCghwbGF0Zm9y",
            "bRgDIAEoBRIQCghlbmRfdGllbRgEIAEoAxIQCghjb2RlX251bRgFIAEoBRIQ",
            "Cghjb2RlX2xlbhgGIAEoBRIMCgR0eXBlGAcgASgFIjgKC0FkZE1haWxSZXNw",
            "EhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1JDLk1zZ0lEEgsKA3JzdBgCIAEoCCI5",
            "CgxBc2tSZWdpc3RSc3ASHAoFbXNnaWQYASABKA4yDS5DU1RvUkMuTXNnSUQS",
            "CwoDcnN0GAIgASgIIqgBCg1BbGxTZXJ2ZXJJbmZvEhwKBW1zZ2lkGAEgASgO",
            "Mg0uQ1NUb1JDLk1zZ0lEEhIKCnNlcnZlcm5hbWUYAiABKAwSEwoLcm9vbVVz",
            "ZXJOdW0YAyABKAUSFQoNYmF0dGxlVXNlck51bRgEIAEoBRITCgtsb2FkRmFj",
            "dG9yeRgFIAEoAhISCgphbGxVc2VyTnVtGAYgASgFEhAKCGN1cnR0aW1lGAcg",
            "ASgJIkIKDlNlcnZlclVzZXJJbmZvEhwKBW1zZ2lkGAEgASgOMg0uQ1NUb1JD",
            "Lk1zZ0lEEhIKCmFsbFVzZXJOdW0YAiABKAUiHAoKTm90aWNlSW5mbxIOCgZu",
            "b3RpY2UYASABKAwiUgoNQWxsTm90aWNlSW5mbxIcCgVtc2dpZBgBIAEoDjIN",
            "LkNTVG9SQy5Nc2dJRBIjCgdub3RpY2VzGAIgAygLMhIuQ1NUb1JDLk5vdGlj",
            "ZUluZm8iOgoNQWRkTm90aWNlUmVzcBIcCgVtc2dpZBgBIAEoDjINLkNTVG9S",
            "Qy5Nc2dJRBILCgNyc3QYAiABKAgiPQoQRGVsZXRlTm90aWNlUmVzcBIcCgVt",
            "c2dpZBgBIAEoDjINLkNTVG9SQy5Nc2dJRBILCgNyc3QYAiABKAgqwgIKBU1z",
            "Z0lEEgoKBnVua25vdxAAEhUKD2VNc2dDUzJSQ19CZWdpbhDchQISHAoWZU1z",
            "Z0NTMlJDX0Fza1JlZ2lzdFJzcBDdhQISHQoXZU1zZ0NTMlJDX0FsbFNlcnZl",
            "ckluZm8Q3oUCEh4KGGVNc2dDUzJSQ19TZXJ2ZXJVc2VySW5mbxDfhQISHQoX",
            "ZU1zZ0NTMlJDX0FsbE5vdGljZUluZm8Q4IUCEh0KF2VNc2dDUzJSQ19BZGRO",
            "b3RpY2VSZXNwEOGFAhIgChplTXNnQ1MyUkNfRGVsZXRlTm90aWNlUmVzcBDi",
            "hQISIQobZU1zZ0NTMlJDX0Fza0FkZE9uZU1haWxSZXNwEOOFAhIhChtlTXNn",
            "Q1MyUkNfQXNrUXVlcnlDRGtleVJlc3AQ5IUCEhMKDWVNc2dDUzJSQ19FbmQQ",
            "z4kCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CSToRC.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.QueryCDkeyInfoResp), global::CSToRC.QueryCDkeyInfoResp.Parser, new[]{ "Msgid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info), global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info.Parser, new[]{ "Id", "Title", "Platform", "EndTiem", "CodeNum", "CodeLen", "Type" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.AddMailResp), global::CSToRC.AddMailResp.Parser, new[]{ "Msgid", "Rst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.AskRegistRsp), global::CSToRC.AskRegistRsp.Parser, new[]{ "Msgid", "Rst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.AllServerInfo), global::CSToRC.AllServerInfo.Parser, new[]{ "Msgid", "Servername", "RoomUserNum", "BattleUserNum", "LoadFactory", "AllUserNum", "Curttime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.ServerUserInfo), global::CSToRC.ServerUserInfo.Parser, new[]{ "Msgid", "AllUserNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.NoticeInfo), global::CSToRC.NoticeInfo.Parser, new[]{ "Notice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.AllNoticeInfo), global::CSToRC.AllNoticeInfo.Parser, new[]{ "Msgid", "Notices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.AddNoticeResp), global::CSToRC.AddNoticeResp.Parser, new[]{ "Msgid", "Rst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CSToRC.DeleteNoticeResp), global::CSToRC.DeleteNoticeResp.Parser, new[]{ "Msgid", "Rst" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eMsgCS2RC_Begin")] EMsgCs2RcBegin = 33500,
    [pbr::OriginalName("eMsgCS2RC_AskRegistRsp")] EMsgCs2RcAskRegistRsp = 33501,
    [pbr::OriginalName("eMsgCS2RC_AllServerInfo")] EMsgCs2RcAllServerInfo = 33502,
    [pbr::OriginalName("eMsgCS2RC_ServerUserInfo")] EMsgCs2RcServerUserInfo = 33503,
    [pbr::OriginalName("eMsgCS2RC_AllNoticeInfo")] EMsgCs2RcAllNoticeInfo = 33504,
    [pbr::OriginalName("eMsgCS2RC_AddNoticeResp")] EMsgCs2RcAddNoticeResp = 33505,
    [pbr::OriginalName("eMsgCS2RC_DeleteNoticeResp")] EMsgCs2RcDeleteNoticeResp = 33506,
    [pbr::OriginalName("eMsgCS2RC_AskAddOneMailResp")] EMsgCs2RcAskAddOneMailResp = 33507,
    [pbr::OriginalName("eMsgCS2RC_AskQueryCDkeyResp")] EMsgCs2RcAskQueryCdkeyResp = 33508,
    [pbr::OriginalName("eMsgCS2RC_End")] EMsgCs2RcEnd = 33999,
  }

  #endregion

  #region Messages
  /// <summary>
  ///eMsgCS2CS_AskQueryCDkeyResp
  /// </summary>
  public sealed partial class QueryCDkeyInfoResp : pb::IMessage<QueryCDkeyInfoResp> {
    private static readonly pb::MessageParser<QueryCDkeyInfoResp> _parser = new pb::MessageParser<QueryCDkeyInfoResp>(() => new QueryCDkeyInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCDkeyInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDkeyInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDkeyInfoResp(QueryCDkeyInfoResp other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDkeyInfoResp Clone() {
      return new QueryCDkeyInfoResp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info.Parser);
    private readonly pbc::RepeatedField<global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info> info_ = new pbc::RepeatedField<global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToRC.QueryCDkeyInfoResp.Types.CDKey_Info> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCDkeyInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCDkeyInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCDkeyInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QueryCDkeyInfoResp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CDKey_Info : pb::IMessage<CDKey_Info> {
        private static readonly pb::MessageParser<CDKey_Info> _parser = new pb::MessageParser<CDKey_Info>(() => new CDKey_Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CDKey_Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CSToRC.QueryCDkeyInfoResp.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDKey_Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDKey_Info(CDKey_Info other) : this() {
          id_ = other.id_;
          title_ = other.title_;
          platform_ = other.platform_;
          endTiem_ = other.endTiem_;
          codeNum_ = other.codeNum_;
          codeLen_ = other.codeLen_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CDKey_Info Clone() {
          return new CDKey_Info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 3;
        private int platform_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Platform {
          get { return platform_; }
          set {
            platform_ = value;
          }
        }

        /// <summary>Field number for the "end_tiem" field.</summary>
        public const int EndTiemFieldNumber = 4;
        private long endTiem_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTiem {
          get { return endTiem_; }
          set {
            endTiem_ = value;
          }
        }

        /// <summary>Field number for the "code_num" field.</summary>
        public const int CodeNumFieldNumber = 5;
        private int codeNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CodeNum {
          get { return codeNum_; }
          set {
            codeNum_ = value;
          }
        }

        /// <summary>Field number for the "code_len" field.</summary>
        public const int CodeLenFieldNumber = 6;
        private int codeLen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CodeLen {
          get { return codeLen_; }
          set {
            codeLen_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 7;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CDKey_Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CDKey_Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Title != other.Title) return false;
          if (Platform != other.Platform) return false;
          if (EndTiem != other.EndTiem) return false;
          if (CodeNum != other.CodeNum) return false;
          if (CodeLen != other.CodeLen) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Platform != 0) hash ^= Platform.GetHashCode();
          if (EndTiem != 0L) hash ^= EndTiem.GetHashCode();
          if (CodeNum != 0) hash ^= CodeNum.GetHashCode();
          if (CodeLen != 0) hash ^= CodeLen.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Title);
          }
          if (Platform != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Platform);
          }
          if (EndTiem != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(EndTiem);
          }
          if (CodeNum != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CodeNum);
          }
          if (CodeLen != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(CodeLen);
          }
          if (Type != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Platform != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
          }
          if (EndTiem != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTiem);
          }
          if (CodeNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeNum);
          }
          if (CodeLen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeLen);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CDKey_Info other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Platform != 0) {
            Platform = other.Platform;
          }
          if (other.EndTiem != 0L) {
            EndTiem = other.EndTiem;
          }
          if (other.CodeNum != 0) {
            CodeNum = other.CodeNum;
          }
          if (other.CodeLen != 0) {
            CodeLen = other.CodeLen;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Title = input.ReadString();
                break;
              }
              case 24: {
                Platform = input.ReadInt32();
                break;
              }
              case 32: {
                EndTiem = input.ReadInt64();
                break;
              }
              case 40: {
                CodeNum = input.ReadInt32();
                break;
              }
              case 48: {
                CodeLen = input.ReadInt32();
                break;
              }
              case 56: {
                Type = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgCS2CS_AskAddOneMailResp
  /// </summary>
  public sealed partial class AddMailResp : pb::IMessage<AddMailResp> {
    private static readonly pb::MessageParser<AddMailResp> _parser = new pb::MessageParser<AddMailResp>(() => new AddMailResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMailResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMailResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMailResp(AddMailResp other) : this() {
      msgid_ = other.msgid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMailResp Clone() {
      return new AddMailResp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 2;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMailResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMailResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Rst != false) {
        output.WriteRawTag(16);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMailResp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRegistRsp : pb::IMessage<AskRegistRsp> {
    private static readonly pb::MessageParser<AskRegistRsp> _parser = new pb::MessageParser<AskRegistRsp>(() => new AskRegistRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRegistRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegistRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegistRsp(AskRegistRsp other) : this() {
      msgid_ = other.msgid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegistRsp Clone() {
      return new AskRegistRsp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 2;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRegistRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRegistRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Rst != false) {
        output.WriteRawTag(16);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRegistRsp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllServerInfo : pb::IMessage<AllServerInfo> {
    private static readonly pb::MessageParser<AllServerInfo> _parser = new pb::MessageParser<AllServerInfo>(() => new AllServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllServerInfo(AllServerInfo other) : this() {
      msgid_ = other.msgid_;
      servername_ = other.servername_;
      roomUserNum_ = other.roomUserNum_;
      battleUserNum_ = other.battleUserNum_;
      loadFactory_ = other.loadFactory_;
      allUserNum_ = other.allUserNum_;
      curttime_ = other.curttime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllServerInfo Clone() {
      return new AllServerInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "servername" field.</summary>
    public const int ServernameFieldNumber = 2;
    private pb::ByteString servername_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Servername {
      get { return servername_; }
      set {
        servername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomUserNum" field.</summary>
    public const int RoomUserNumFieldNumber = 3;
    private int roomUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomUserNum {
      get { return roomUserNum_; }
      set {
        roomUserNum_ = value;
      }
    }

    /// <summary>Field number for the "battleUserNum" field.</summary>
    public const int BattleUserNumFieldNumber = 4;
    private int battleUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleUserNum {
      get { return battleUserNum_; }
      set {
        battleUserNum_ = value;
      }
    }

    /// <summary>Field number for the "loadFactory" field.</summary>
    public const int LoadFactoryFieldNumber = 5;
    private float loadFactory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoadFactory {
      get { return loadFactory_; }
      set {
        loadFactory_ = value;
      }
    }

    /// <summary>Field number for the "allUserNum" field.</summary>
    public const int AllUserNumFieldNumber = 6;
    private int allUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllUserNum {
      get { return allUserNum_; }
      set {
        allUserNum_ = value;
      }
    }

    /// <summary>Field number for the "curttime" field.</summary>
    public const int CurttimeFieldNumber = 7;
    private string curttime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Curttime {
      get { return curttime_; }
      set {
        curttime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Servername != other.Servername) return false;
      if (RoomUserNum != other.RoomUserNum) return false;
      if (BattleUserNum != other.BattleUserNum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadFactory, other.LoadFactory)) return false;
      if (AllUserNum != other.AllUserNum) return false;
      if (Curttime != other.Curttime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Servername.Length != 0) hash ^= Servername.GetHashCode();
      if (RoomUserNum != 0) hash ^= RoomUserNum.GetHashCode();
      if (BattleUserNum != 0) hash ^= BattleUserNum.GetHashCode();
      if (LoadFactory != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadFactory);
      if (AllUserNum != 0) hash ^= AllUserNum.GetHashCode();
      if (Curttime.Length != 0) hash ^= Curttime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Servername.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Servername);
      }
      if (RoomUserNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomUserNum);
      }
      if (BattleUserNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleUserNum);
      }
      if (LoadFactory != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(LoadFactory);
      }
      if (AllUserNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AllUserNum);
      }
      if (Curttime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Curttime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Servername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Servername);
      }
      if (RoomUserNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomUserNum);
      }
      if (BattleUserNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleUserNum);
      }
      if (LoadFactory != 0F) {
        size += 1 + 4;
      }
      if (AllUserNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllUserNum);
      }
      if (Curttime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Curttime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Servername.Length != 0) {
        Servername = other.Servername;
      }
      if (other.RoomUserNum != 0) {
        RoomUserNum = other.RoomUserNum;
      }
      if (other.BattleUserNum != 0) {
        BattleUserNum = other.BattleUserNum;
      }
      if (other.LoadFactory != 0F) {
        LoadFactory = other.LoadFactory;
      }
      if (other.AllUserNum != 0) {
        AllUserNum = other.AllUserNum;
      }
      if (other.Curttime.Length != 0) {
        Curttime = other.Curttime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Servername = input.ReadBytes();
            break;
          }
          case 24: {
            RoomUserNum = input.ReadInt32();
            break;
          }
          case 32: {
            BattleUserNum = input.ReadInt32();
            break;
          }
          case 45: {
            LoadFactory = input.ReadFloat();
            break;
          }
          case 48: {
            AllUserNum = input.ReadInt32();
            break;
          }
          case 58: {
            Curttime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerUserInfo : pb::IMessage<ServerUserInfo> {
    private static readonly pb::MessageParser<ServerUserInfo> _parser = new pb::MessageParser<ServerUserInfo>(() => new ServerUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserInfo(ServerUserInfo other) : this() {
      msgid_ = other.msgid_;
      allUserNum_ = other.allUserNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserInfo Clone() {
      return new ServerUserInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "allUserNum" field.</summary>
    public const int AllUserNumFieldNumber = 2;
    private int allUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllUserNum {
      get { return allUserNum_; }
      set {
        allUserNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (AllUserNum != other.AllUserNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (AllUserNum != 0) hash ^= AllUserNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (AllUserNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AllUserNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (AllUserNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllUserNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.AllUserNum != 0) {
        AllUserNum = other.AllUserNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            AllUserNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeInfo : pb::IMessage<NoticeInfo> {
    private static readonly pb::MessageParser<NoticeInfo> _parser = new pb::MessageParser<NoticeInfo>(() => new NoticeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfo(NoticeInfo other) : this() {
      notice_ = other.notice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfo Clone() {
      return new NoticeInfo(this);
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Notice != other.Notice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllNoticeInfo : pb::IMessage<AllNoticeInfo> {
    private static readonly pb::MessageParser<AllNoticeInfo> _parser = new pb::MessageParser<AllNoticeInfo>(() => new AllNoticeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllNoticeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllNoticeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllNoticeInfo(AllNoticeInfo other) : this() {
      msgid_ = other.msgid_;
      notices_ = other.notices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllNoticeInfo Clone() {
      return new AllNoticeInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "notices" field.</summary>
    public const int NoticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CSToRC.NoticeInfo> _repeated_notices_codec
        = pb::FieldCodec.ForMessage(18, global::CSToRC.NoticeInfo.Parser);
    private readonly pbc::RepeatedField<global::CSToRC.NoticeInfo> notices_ = new pbc::RepeatedField<global::CSToRC.NoticeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CSToRC.NoticeInfo> Notices {
      get { return notices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllNoticeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllNoticeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!notices_.Equals(other.notices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= notices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      notices_.WriteTo(output, _repeated_notices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += notices_.CalculateSize(_repeated_notices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllNoticeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      notices_.Add(other.notices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            notices_.AddEntriesFrom(input, _repeated_notices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddNoticeResp : pb::IMessage<AddNoticeResp> {
    private static readonly pb::MessageParser<AddNoticeResp> _parser = new pb::MessageParser<AddNoticeResp>(() => new AddNoticeResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddNoticeResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddNoticeResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddNoticeResp(AddNoticeResp other) : this() {
      msgid_ = other.msgid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddNoticeResp Clone() {
      return new AddNoticeResp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 2;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddNoticeResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddNoticeResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Rst != false) {
        output.WriteRawTag(16);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddNoticeResp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteNoticeResp : pb::IMessage<DeleteNoticeResp> {
    private static readonly pb::MessageParser<DeleteNoticeResp> _parser = new pb::MessageParser<DeleteNoticeResp>(() => new DeleteNoticeResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoticeResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CSToRC.CSToRCReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoticeResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoticeResp(DeleteNoticeResp other) : this() {
      msgid_ = other.msgid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoticeResp Clone() {
      return new DeleteNoticeResp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::CSToRC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CSToRC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 2;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoticeResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoticeResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Rst != false) {
        output.WriteRawTag(16);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoticeResp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::CSToRC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
