// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GSToGC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GSToGC {

  /// <summary>Holder for reflection information generated from GSToGC.proto</summary>
  public static partial class GSToGCReflection {

    #region Descriptor
    /// <summary>File descriptor for GSToGC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GSToGCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxHU1RvR0MucHJvdG8SBkdTVG9HQyJFCghUYXNrRGF0YRIPCgd0YXNrX2lk",
            "GAEgASgNEhEKCXRhc2tfZ3VpZBgCIAEoDRIVCg10YXNrX2N1ckNvdW50GAMg",
            "ASgNIlcKE05vdGlmeVVwZGF0ZUFsbFRhc2sSHAoFbXNnaWQYASABKA4yDS5H",
            "U1RvR0MuTXNnSUQSIgoIdGFza0xpc3QYAiADKAsyEC5HU1RvR0MuVGFza0Rh",
            "dGEiXAoYTm90aWZ5VXBkYXRlQWxsRGFpbHlUYXNrEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEiIKCHRhc2tMaXN0GAIgAygLMhAuR1NUb0dDLlRh",
            "c2tEYXRhIlMKEE5vdGlmeUFkZE9uZVRhc2sSHAoFbXNnaWQYASABKA4yDS5H",
            "U1RvR0MuTXNnSUQSIQoHb25lVGFzaxgCIAEoCzIQLkdTVG9HQy5UYXNrRGF0",
            "YSJWChNOb3RpZnlVcGRhdGVPbmVUYXNrEhwKBW1zZ2lkGAEgASgOMg0uR1NU",
            "b0dDLk1zZ0lEEiEKB29uZVRhc2sYAiABKAsyEC5HU1RvR0MuVGFza0RhdGEi",
            "QwoQTm90aWZ5RGVsT25lVGFzaxIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5N",
            "c2dJRBIRCgl0YXNrX2d1aWQYAiABKA0iRwoUTm90aWZ5UmV3YXJkc09uZVRh",
            "c2sSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSEQoJdGFza19ndWlk",
            "GAIgASgNIk4KDU5vdGlmeU1haWxSZXQSHAoFbXNnaWQYASABKA4yDS5HU1Rv",
            "R0MuTXNnSUQSDgoGbWFpbGlkGAIgASgFEg8KB2VycmNvZGUYAyABKAUiOgoM",
            "Tm90aWZ5SXNPblNTEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwK",
            "BHNzaWQYAiABKA0irgEKE05vdGlmeU90aGVySXRlbUluZm8SHAoFbXNnaWQY",
            "ASABKA4yDS5HU1RvR0MuTXNnSUQSMwoEaXRlbRgCIAMoCzIlLkdTVG9HQy5O",
            "b3RpZnlPdGhlckl0ZW1JbmZvLk90aGVySXRlbRpECglPdGhlckl0ZW0SDwoH",
            "aXRlbV9pZBgBIAEoDRIQCghpdGVtX251bRgCIAEoDRIUCgxleHBpcmVkX3Rp",
            "bWUYAyABKAMiPgoNUmVjb2luUnVuZVJldBIcCgVtc2dpZBgBIAEoDjINLkdT",
            "VG9HQy5Nc2dJRBIPCgdydW5lX2lkGAIgASgNIkUKClVubG9hZFJ1bmUSHAoF",
            "bXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEcGFnZRgCIAEoBRILCgNw",
            "b3MYAyABKAUiUAoPR3VpZGVDU1N0ZXBJbmZvEhwKBW1zZ2lkGAEgASgOMg0u",
            "R1NUb0dDLk1zZ0lEEg8KB2FsbGNvbXAYAiABKAgSDgoGdGFza2lkGAMgAygN",
            "IuQBCgpHdWlkZUF3YXJkEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lE",
            "Ei8KCWF3YXJkbGlzdBgCIAMoCzIcLkdTVG9HQy5HdWlkZUF3YXJkLmF3YXJk",
            "dHlwZRo/Cglhd2FyZHR5cGUSJAoCZHQYASABKA4yGC5HU1RvR0MuR3VpZGVB",
            "d2FyZC5kdHlwZRIMCgRpZHhuGAIgASgNIkYKBWR0eXBlEgoKBnVua25vdxAA",
            "Eg0KCXR5cGVfZ29sZBABEhAKDHR5cGVfZGlhbW9uZBACEhAKDHR5cGVfZ29v",
            "ZHNpZBADIk0KDkd1aWRlS2lsbHNJbmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NU",
            "b0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDwoHbnBjdHlwZRgDIAEoBSJPChBO",
            "b3RpZnlVc2VyTHZJbmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lE",
            "Eg0KBWN1cmx2GAIgASgNEg4KBmN1cmV4cBgDIAEoDSJUChFOb3RpZnlOZXdI",
            "ZWFkZXJpZBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlk",
            "GAIgASgEEhMKC25ld2hlYWRlcmlkGAMgASgNIlUKFU5vdGlmeU9uZU1hdGNo",
            "TmVlZE9uZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBINCgVtYXBp",
            "ZBgCIAEoDRIPCgdmaWdodGlkGAMgASgNIlQKEU5vdGlmeU5ld05pY2tuYW1l",
            "EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQS",
            "EwoLbmV3bmlja25hbWUYAyABKAkiOgoJUnVuZXNTbG90Eg8KB3Nsb3Rwb3MY",
            "ASABKAUSDgoGcnVuZWlkGAIgASgNEgwKBHBhZ2UYAyABKAUiPAoMUnVuZXNC",
            "YWdJbmZvEg4KBnJ1bmVpZBgBIAEoDRILCgNudW0YAiABKAUSDwoHZ290dGlt",
            "ZRgDIAEoAyKHAQoPTm90aWZ5UnVuZXNMaXN0EhwKBW1zZ2lkGAEgASgOMg0u",
            "R1NUb0dDLk1zZ0lEEioKDHJ1bmVzYmFnaW5mbxgCIAMoCzIULkdTVG9HQy5S",
            "dW5lc0JhZ0luZm8SKgoPcnVuZXNfc2xvdF9pbmZvGAMgAygLMhEuR1NUb0dD",
            "LlJ1bmVzU2xvdCJKChVOb3RpZnlSZW1vdmVDb21tb2RpdHkSHAoFbXNnaWQY",
            "ASABKA4yDS5HU1RvR0MuTXNnSUQSEwoLQ29tbW9kaXR5aWQYAiADKA0iSgoV",
            "Tm90aWZ5R2V0TmV3Q29tbW9kaXR5EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dD",
            "Lk1zZ0lEEhMKC0NvbW1vZGl0eWlkGAIgASgNImkKF05vdGlmeU1hdGNoVGVh",
            "bUJhc2VJbmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg4KBnRl",
            "YW1pZBgCIAEoDRIRCgltYXRjaHR5cGUYAyABKA0SDQoFbWFwaWQYBCABKA0i",
            "kQEKGU5vdGlmeU1hdGNoVGVhbVBsYXllckluZm8SHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSDwoHcG9zdGlvbhgCIAEoDRIQCghpc0luc2VydBgD",
            "IAEoCBIQCghuaWNrbmFtZRgEIAEoCRIOCgZoZWFkaWQYBSABKA0SEQoJdXNl",
            "cmxldmVsGAYgASgNIkgKFU5vdGlmeU1hdGNoVGVhbVN3aXRjaBIcCgVtc2dp",
            "ZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIRCglzdGFydGZsYWcYAiABKAgiRwoV",
            "Tm90aWZ5TWF0Y2hJbnZpdGVKb2luEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dD",
            "Lk1zZ0lEEhAKCG5pY2tuYW1lGAIgASgJIvcCCg9Ob3RpZnlIZXJvc0luZm8S",
            "HAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSMwoEaW5mbxgCIAMoCzIl",
            "LkdTVG9HQy5Ob3RpZnlIZXJvc0luZm8uaGVyb3BhbmVsaW5mbxqQAgoNaGVy",
            "b3BhbmVsaW5mbxIPCgdjYW1ncGlkGAEgASgFEgwKBGd1aWQYAiABKAMSDgoG",
            "aGVyb2x2GAMgASgFEhAKCG5pY2tuYW1lGAQgASgJEg8KB2tpbGxudW0YBSAB",
            "KAUSEQoJZGVhZHRpbWVzGAYgASgFEhAKCGFzc3RpbWVzGAcgASgFEg8KB2xh",
            "c3RoaXQYCCABKAUSPQoFZ29vZHMYCSADKAsyLi5HU1RvR0MuTm90aWZ5SGVy",
            "b3NJbmZvLmhlcm9wYW5lbGluZm8uZ29vZHNtc2cSDgoGaGVyb2lkGAogASgN",
            "GigKCGdvb2RzbXNnEgwKBGdyaWQYASABKAUSDgoGZ29vZGlkGAIgASgFIkgK",
            "Ek5vdGlmeUdvb2RzRXhwaXJlZBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5N",
            "c2dJRBIUCgxjb21tb25kaXR5aWQYAiADKAUifQoJU2hvcnRNYWlsEg4KBm1h",
            "aWxpZBgBIAEoBRIiCghtYWlsVHlwZRgCIAEoDjIQLkdTVG9HQy5NYWlsVHlw",
            "ZRIRCgltYWlsVGl0bGUYAyABKAkSKQoJbWFpbFN0YXRlGAQgASgOMhYuR1NU",
            "b0dDLkVNYWlsQ3VydFN0YXRlIl8KDkRlbEFuZFNvcnRNYWlsEhwKBW1zZ2lk",
            "GAEgASgOMg0uR1NUb0dDLk1zZ0lEEg4KBm1haWxpZBgCIAEoBRIRCgltYWls",
            "aWREZWwYAyABKAgSDAoEc29ydBgEIAEoCCKDAQoITWFpbEluZm8SHAoFbXNn",
            "aWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDgoGbWFpbGlkGAIgASgFEhMKC21h",
            "aWxjb250ZW50GAMgASgJEg4KBnNlbmRlchgEIAEoCRISCgpjcmVhdGVUaW1l",
            "GAUgASgJEhAKCG1haWxnaWZ0GAYgASgJIlMKDk5vdGlmeU1haWxMaXN0EhwK",
            "BW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEiMKCG1haWxMaXN0GAIgAygL",
            "MhEuR1NUb0dDLlNob3J0TWFpbCKDAgoMR29vZHNDZmdJbmZvEg4KBmdvb2Rp",
            "ZBgBIAEoBRItCgdjb25zdW1lGAIgAygLMhwuR1NUb0dDLkdvb2RzQ2ZnSW5m",
            "by5Db25zdW1lEi4KCGNmZ190eXBlGAMgASgOMhwuR1NUb0dDLkdvb2RzQ2Zn",
            "SW5mby5DZmdUeXBlGi0KB0NvbnN1bWUSEwoLY29uc3VtZXR5cGUYASABKAUS",
            "DQoFcHJpY2UYAiABKAUiVQoHQ2ZnVHlwZRISCg5DZmdUeXBlX0NvbW1vbhAA",
            "EhQKEENmZ1R5cGVfRGlzY291bnQQARIPCgtDZmdUeXBlX2hvdBACEg8KC0Nm",
            "Z1R5cGVfTmV3EAMiUwoPR29vZHNCdXlDZmdJbmZvEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEiIKBGluZm8YAiADKAsyFC5HU1RvR0MuR29vZHND",
            "ZmdJbmZvIugBCg5IZXJvQXR0cmlidXRlcxIcCgVtc2dpZBgBIAEoDjINLkdT",
            "VG9HQy5Nc2dJRBIMCgRndWlkGAIgASgEEhMKC1BsYXllclNwZWVkGAMgASgF",
            "EhYKDkF0dGFja0ludGVydmFsGAQgASgFEhMKC0F0dGFja1JhbmdlGAUgASgF",
            "EhYKDlJlc3VyZ2VuY2VUaW1lGAYgASgFEhQKDFBoeXNpY0F0dGFjaxgHIAEo",
            "BRIUCgxTcGVsbHNBdHRhY2sYCCABKAUSEQoJUGh5c2ljRGVmGAkgASgFEhEK",
            "CVNwZWxsc0RlZhgKIAEoBSJICgpIZXJvQXNzaXN0EhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDgoGYXNzaXN0GAMgASgF",
            "IlMKEkJhdHRsZU1hdGNoZXJDb3VudBIcCgVtc2dpZBgBIAEoDjINLkdTVG9H",
            "Qy5Nc2dJRBINCgVjb3VudBgCIAEoBRIQCghtYXhjb3VudBgDIAEoBSJACg5C",
            "YXR0bGVTcGFuVGltZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIQ",
            "CghzcGFuVGltZRgCIAEoAyJCCg9CYXR0bGVEZWxheVRpbWUSHAoFbXNnaWQY",
            "ASABKA4yDS5HU1RvR0MuTXNnSUQSEQoJZGVsYXlUaW1lGAIgASgDIjgKDFVz",
            "ZXJCYXNlVXBMdhIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIKCgJs",
            "dhgCIAEoBSKOAQoPU2Vjb25kR3VpZGVUYXNrEhwKBW1zZ2lkGAEgASgOMg0u",
            "R1NUb0dDLk1zZ0lEEjMKCHRhc2tpbmZvGAIgAygLMiEuR1NUb0dDLlNlY29u",
            "ZEd1aWRlVGFzay50YXNrX2luZm8aKAoJdGFza19pbmZvEg4KBnRhc2tpZBgB",
            "IAEoBRILCgNudW0YAiABKAUiSgoIR2FtZVRpcHMSHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSEAoIZXJyb2NvZGUYAiABKAUSDgoGY2FtcGlkGAMg",
            "ASgFIjoKGk5vdGlmeVVzZXJSZXR1cm5CYXR0bGVSb29tEhwKBW1zZ2lkGAEg",
            "ASgOMg0uR1NUb0dDLk1zZ0lEIrgDChdCcm9hZGNhc3RCYXR0bGVIZXJvSW5m",
            "bxIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBI6CghoZXJvaW5mbxgC",
            "IAMoCzIoLkdTVG9HQy5Ccm9hZGNhc3RCYXR0bGVIZXJvSW5mby5IZXJvSW5m",
            "bxJACglnb29kc2luZm8YAyADKAsyLS5HU1RvR0MuQnJvYWRjYXN0QmF0dGxl",
            "SGVyb0luZm8uQmFzZUdvb2RzSW5mbxrUAQoISGVyb0luZm8SDAoEZ3VpZBgB",
            "IAEoBBIQCghuaWNrbmFtZRgCIAEoCRINCgVsZXZlbBgDIAEoBRIRCglkZWFk",
            "dGltZXMYBCABKAUSDgoGY2FtcGlkGAUgASgFEg4KBmhlYWRpZBgGIAEoBRIK",
            "CgJocBgHIAEoBRIKCgJtcBgIIAEoBRILCgNwb3MYCSABKAUSEgoKbWFzdGVy",
            "Z3VpZBgKIAEoBBINCgVraWxscxgLIAEoBRIOCgZhc3Npc3QYDCABKAUSDgoG",
            "aGVyb2lkGA0gASgFGioKDUJhc2VHb29kc0luZm8SDQoFaW5kZXgYDSABKAUS",
            "CgoCaWQYDiABKAUiTQoNR3VpZGVMYXN0U3RlcBIcCgVtc2dpZBgBIAEoDjIN",
            "LkdTVG9HQy5Nc2dJRBIOCgZpZkNvbXAYAiABKAgSDgoGc3RlcGlkGAMgASgF",
            "IocBChBOb3RpZnlVc2VyQ0xEYXlzEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dD",
            "Lk1zZ0lEEg0KBW1vbnRoGAIgASgNEg0KBXRvZGF5GAMgASgNEhMKC3RvdGFs",
            "Q2xkYXlzGAQgASgNEg4KBmNsZGF5cxgFIAEoDRISCgppc1RvZGF5Q2FuGAYg",
            "ASgIIq4BCgpHYW1lTm90aWNlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1z",
            "Z0lEEikKBm5vdGljZRgCIAMoCzIZLkdTVG9HQy5HYW1lTm90aWNlLk5vdGlj",
            "ZRpXCgZOb3RpY2USDQoFdGl0bGUYASABKAkSDAoEZmxhZxgCIAEoDRIOCgZz",
            "dGF0dXMYAyABKA0SEAoIcHJpb3JpdHkYBCABKA0SDgoGbm90aWNlGAUgASgJ",
            "ImUKCkd1aWRlU3RlcHMSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQS",
            "DAoEZ3VpZBgCIAEoBBIMCgR0eXBlGAMgASgFEg4KBmlmQ29tcBgEIAEoCBIN",
            "CgVzdGVwcxgFIAEoCSJDCgdQaW5nUmV0EhwKBW1zZ2lkGAEgASgOMg0uR1NU",
            "b0dDLk1zZ0lEEgwKBHRpbWUYAiABKAMSDAoEZmxhZxgDIAEoBSKdAQoWTm90",
            "aWZ5UXVlcnlOaWNrTmFtZVJldBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5N",
            "c2dJRBI2CgRpbmZvGAIgAygLMiguR1NUb0dDLk5vdGlmeVF1ZXJ5Tmlja05h",
            "bWVSZXQuUXVlcnlJbmZvGi0KCVF1ZXJ5SW5mbxIQCghuaWNrbmFtZRgBIAEo",
            "CRIOCgZoZWFkaWQYAiABKAUiaQoHU05TSW5mbxIMCgR0eXBlGAEgASgFEhAK",
            "CG5pY2tuYW1lGAIgASgJEg4KBmhlYWRpZBgDIAEoDRIOCgZzdGF0dXMYBCAB",
            "KAUSDwoHZ3VpZGlkeBgFIAEoBBINCgV2aXBsdhgGIAEoDSJRChFOb3RpZnlV",
            "c2VyU05TTGlzdBIdCgZtc2dudW0YASABKA4yDS5HU1RvR0MuTXNnSUQSHQoE",
            "aW5mbxgCIAMoCzIPLkdTVG9HQy5TTlNJbmZvIjkKGU5vdGlmeUJhdHRsZU1h",
            "bmFnZXJDaGFuZ2USHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQidwoT",
            "Tm90aWZ5QmVBZGRGcmllbmRNcxIdCgZtc2dudW0YASABKA4yDS5HU1RvR0Mu",
            "TXNnSUQSFAoMc2VuZG5pY2tuYW1lGAIgASgJEhMKC3JlY25pY2tuYW1lGAMg",
            "ASgJEhYKDnNkbmRlcl9ndWlkaWR4GAQgASgEInYKEU5vdGlmeU1zZ0Zyb21V",
            "c2VyEh0KBm1zZ251bRgBIAEoDjINLkdTVG9HQy5Nc2dJRBIPCgdndWlkaWR4",
            "GAIgASgEEhAKCG5pY2tuYW1lGAMgASgJEg4KBmhlYWRpZBgEIAEoBRIPCgdj",
            "aGF0c3RyGAUgASgJIlcKF05vdGlmeVVzZXJTTlNMaXN0Q2hhbmdlEh0KBm1z",
            "Z251bRgBIAEoDjINLkdTVG9HQy5Nc2dJRBIPCgdndWlkaWR4GAIgASgEEgwK",
            "BHR5cGUYAyABKA0iZgoVVXNlckJlSW52aXRlZFRvQmF0dGxlEh0KBm1zZ251",
            "bRgBIAEoDjINLkdTVG9HQy5Nc2dJRBIQCghiYXR0bGVpZBgCIAEoBRILCgNw",
            "d2QYAyABKAkSDwoHSW52aXRvchgEIAEoCSLIBgoNTm90aWZ5QUZQRGF0YRId",
            "CgZtc2dudW0YASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIq",
            "CgRpbmZvGAMgAygLMhwuR1NUb0dDLk5vdGlmeUFGUERhdGEuRlBJbmZvGiUK",
            "BkZQSW5mbxIMCgR0eXBlGAEgASgFEg0KBXZhbHVlGAIgASgFIrYFCgpFbnVt",
            "RnBUeXBlEgoKBnVua25vdxAAEgsKB1BoeUh1cnQQARINCglNYWdpY0h1cnQQ",
            "AhIJCgVDdXJIUBADEgkKBUN1ck1QEAQSDQoJUGh5QXR0YWNrEAUSDwoLTWFn",
            "aWNBdHRhY2sQBhIOCgpQaHlEZWZlbnNlEAcSEAoMTWFnaWNEZWZlbnNlEAgS",
            "DQoJTW92ZVNwZWVkEAkSDwoLQXR0YWNrU3BlZWQQChIJCgVNYXhIUBALEgkK",
            "BU1heE1QEAwSEQoNSFBSZWNvdmVyUmF0ZRANEhEKDU1QUmVjb3ZlclJhdGUQ",
            "DhIOCgpSZWxpdmVUaW1lEA8SDQoJRGl6emluZXNzEBASCwoHU2lsZW5jZRAR",
            "EgsKB1Bvc01vdmUQEhILCgdSZWJvdW5kEBMSEAoMUGh5U3Vja0Jsb29kEBQS",
            "CgoGRGlzYXJtEBUSDAoIUmVzdHJhaW4QFhIOCgpDcmlQZXJzZW50EBcSCwoH",
            "Q3JpSGFybRAYEg0KCUNQUmVjb3ZlchAZEhIKDlBhc3NpdGl2ZVNraWxsEBoS",
            "DQoJSW52aXNpYmxlEBsSDgoKQXR0YWNrRGlzdBAcEgwKCFRydWVIdXJ0EB0S",
            "DgoKUGh5UGFzc051bRAeEhIKDlBoeVBhc3NQZXJjZW50EB8SEAoMTWFnaWNQ",
            "YXNzTnVtECASFAoQTWFnaWNQYXNzUGVyY2VudBAhEhIKDkNvb2xkb3duUmVk",
            "dWNlECISEAoMUGh5RG1nUmVkdWNlECMSEgoOTWFnaWNEbWdSZWR1Y2UQJBIR",
            "Cg1UcnVlRG1nUmVkdWNlECUSEwoPUGh5RG1nUmVkdWNlTnVtECYSFQoRTWFn",
            "aWNEbWdSZWR1Y2VOdW0QJxIUChBUcnVlRG1nUmVkdWNlTnVtECgSEgoOTWFn",
            "aWNTdWNrQmxvb2QQKSKrAgoMVXNlckJhc2VJbmZvEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDAoEbmFtZRgDIAEoCRIQ",
            "CghuaWNrbmFtZRgEIAEoCRIOCgZoZWFkaWQYBSABKAUSCwoDc2V4GAYgASgF",
            "EhAKCGN1cnNjb3JlGAcgASgDEhMKC2N1cmRpYW1vYW5kGAggASgDEg8KB2N1",
            "cmdvbGQYCSABKAMSDQoFbWFwaWQYCyABKAUSEwoLaWZyZWNvbm5lY3QYDCAB",
            "KAgSEAoIYmF0dGxlaWQYDSABKAQSDQoFbGV2ZWwYDiABKAUSEQoJdmlwX2xl",
            "dmVsGA8gASgFEhEKCXZpcF9zY29yZRgQIAEoBRIPCgdjdXJfZXhwGBEgASgF",
            "IlQKFE5vdGlmeVN5c3RlbUFubm91bmNlEhwKBW1zZ2lkGAEgASgOMg0uR1NU",
            "b0dDLk1zZ0lEEgwKBHR5cGUYAiABKAUSEAoIYW5ub3VuY2UYAyABKAkiKAoI",
            "TmV0Q2xhc2gSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQiMwoTV2Fy",
            "bmluZ1RvU2VsZWN0SGVybxIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJ",
            "RCKJAQoXTm90aWZ5U2tpbGxNb2RlbExlYWRpbmcSHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIQCghlZmZlY3RpZBgDIAEo",
            "DRIQCgh1bmlxdWVpZBgEIAEoBRIPCgd0YXJndWlkGAUgASgEEg0KBXN0YXRl",
            "GAYgASgFIkgKBkFza1JldBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJ",
            "RBINCgVhc2tpZBgCIAEoBRIRCgllcnJvcmNvZGUYAyABKAUirQEKEE5vdGlm",
            "eUNTSGVyb0xpc3QSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSNQoH",
            "aGVyb2NmZxgCIAMoCzIkLkdTVG9HQy5Ob3RpZnlDU0hlcm9MaXN0Lkhlcm9M",
            "aXN0Q2ZnGkQKC0hlcm9MaXN0Q2ZnEg4KBmhlcm9pZBgBIAEoDRIUCgxleHBp",
            "cmVkX3RpbWUYAiABKAMSDwoHaWZfZnJlZRgDIAEoCCJKCghIZXJvTGlzdBIc",
            "CgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIOCgZoZXJvaWQYAiADKA0S",
            "EAoIdGltZURpZmYYAyABKAMiZAoOQmF0dGxlQmFzZUluZm8SHAoFbXNnaWQY",
            "ASABKA4yDS5HU1RvR0MuTXNnSUQSEAoIYmF0dGxlaWQYAiABKAQSDQoFbWFw",
            "aWQYAyABKA0SEwoLaWZSZWNvbm5lY3QYBCABKAgiSwoMUm9vbUJhc2VJbmZv",
            "EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg4KBnJvb21pZBgCIAEo",
            "BBINCgVtYXBpZBgDIAEoDSLeAQoRQmF0dGxlU2VhdFBvc0luZm8SHAoFbXNn",
            "aWQYASABKA4yDS5HU1RvR0MuTXNnSUQSMgoHcG9zaW5mbxgCIAMoCzIhLkdT",
            "VG9HQy5CYXR0bGVTZWF0UG9zSW5mby5Qb3NJbmZvGncKB1Bvc0luZm8SCwoD",
            "cG9zGAEgASgFEgwKBGd1aWQYAiABKAQSEAoIbmlja25hbWUYAyABKAkSEAoI",
            "aWZtYXN0ZXIYBCABKAgSDwoHaWZyZWFkeRgFIAEoCBIOCgZoZWFkaWQYBiAB",
            "KAUSDAoEZ29sZBgHIAEoAyJXChFCYXR0bGVTdGF0ZUNoYW5nZRIcCgVtc2dp",
            "ZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBINCgVzdGF0ZRgCIAEoBRIVCg1zdGF0",
            "ZXRpbWVsZWZ0GAMgASgFIl4KD0N1ckJhdHRsZUNoYW5nZRIcCgVtc2dpZBgB",
            "IAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRzc2lkGAIgASgFEhAKCGJhdHRsZWlk",
            "GAMgASgEEg0KBW1hcGlkGAQgASgFIhsKA1BvcxIJCgF4GAEgASgFEgkKAXoY",
            "AyABKAUiFAoDRGlyEg0KBWFuZ2xlGAQgASgFIpkCCghHT0FwcGVhchIcCgVt",
            "c2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIpCgRpbmZvGAIgAygLMhsuR1NU",
            "b0dDLkdPQXBwZWFyLkFwcGVhckluZm8awwEKCkFwcGVhckluZm8SEgoKbWFz",
            "dGVyZ3VpZBgBIAEoBBIPCgdvYmpndWlkGAIgASgEEgwKBGNhbXAYAyABKAUS",
            "GAoDcG9zGAQgASgLMgsuR1NUb0dDLlBvcxIYCgNkaXIYBSABKAsyCy5HU1Rv",
            "R0MuRGlyEgoKAmhwGAYgASgNEgoKAm1wGAcgASgNEiEKCG9ial90eXBlGAgg",
            "ASgOMg8uR1NUb0dDLk9ialR5cGUSEwoLb2JqX3R5cGVfaWQYCSABKA0iOwoN",
            "RGlzYXBwZWFySW5mbxIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIM",
            "CgRndWlkGAIgAygEIm4KCUZyZWVTdGF0ZRIcCgVtc2dpZBgBIAEoDjINLkdT",
            "VG9HQy5Nc2dJRBIPCgdvYmpndWlkGAIgASgEEhgKA3BvcxgDIAEoCzILLkdT",
            "VG9HQy5Qb3MSGAoDZGlyGAQgASgLMgsuR1NUb0dDLkRpciKEAQoMUnVubmlu",
            "Z1N0YXRlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg8KB29iamd1",
            "aWQYAiABKAQSGAoDcG9zGAMgASgLMgsuR1NUb0dDLlBvcxIYCgNkaXIYBCAB",
            "KAsyCy5HU1RvR0MuRGlyEhEKCW1vdmVzcGVlZBgFIAEoBSKnAQoRUHJlcGFy",
            "ZVNraWxsU3RhdGUSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDwoH",
            "b2JqZ3VpZBgCIAEoBBIPCgdza2lsbGlkGAMgASgFEhgKA3BvcxgEIAEoCzIL",
            "LkdTVG9HQy5Qb3MSGAoDZGlyGAUgASgLMgsuR1NUb0dDLkRpchIPCgd0YXJn",
            "dWlkGAYgASgEEg0KBXNwZWVkGAcgASgFIpoBChNSZWxlYXNpbmdTa2lsbFN0",
            "YXRlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg8KB29iamd1aWQY",
            "AiABKAQSDwoHc2tpbGxpZBgDIAEoBRIYCgNwb3MYBCABKAsyCy5HU1RvR0Mu",
            "UG9zEhgKA2RpchgFIAEoCzILLkdTVG9HQy5EaXISDwoHdGFyZ3VpZBgGIAEo",
            "BCKWAQoPVXNpbmdTa2lsbFN0YXRlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dD",
            "Lk1zZ0lEEg8KB29iamd1aWQYAiABKAQSDwoHc2tpbGxpZBgDIAEoBRIYCgNw",
            "b3MYBCABKAsyCy5HU1RvR0MuUG9zEhgKA2RpchgFIAEoCzILLkdTVG9HQy5E",
            "aXISDwoHdGFyZ3VpZBgGIAEoBCKYAQoRTGFzdGluZ1NraWxsU3RhdGUSHAoF",
            "bXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDwoHb2JqZ3VpZBgCIAEoBBIP",
            "Cgdza2lsbGlkGAMgASgFEhgKA3BvcxgEIAEoCzILLkdTVG9HQy5Qb3MSGAoD",
            "ZGlyGAUgASgLMgsuR1NUb0dDLkRpchIPCgd0YXJndWlkGAYgASgEInwKCURl",
            "YWRTdGF0ZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIPCgdvYmpn",
            "dWlkGAIgASgEEhgKA3BvcxgDIAEoCzILLkdTVG9HQy5Qb3MSGAoDZGlyGAQg",
            "ASgLMgsuR1NUb0dDLkRpchIMCgRzcG90GAUgASgIItsBCg9Ob3RpZnlHb29k",
            "c0luZm8SHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgC",
            "IAEoBBIvCgRpbmZvGAMgAygLMiEuR1NUb0dDLk5vdGlmeUdvb2RzSW5mby5H",
            "b29kc0luZm8aawoJR29vZHNJbmZvEgsKA251bRgBIAEoBRILCgNwb3MYAiAB",
            "KAUSEgoKaWZDb21wb3NlZBgDIAEoCBIOCgZ0eWVwaWQYBCABKAUSDQoFc3Rh",
            "dGUYBSABKAUSEQoJc3RhdGV0aW1lGAYgASgFIlEKEkJhdHRsZUxvYWRpbmdT",
            "dGF0ZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIg",
            "ASgDEg8KB2xvYWRwZXIYAyABKAUiKgoLSGVyb1Bvc0luZm8SCwoDcG9zGAIg",
            "ASgFEg4KBmhlcm9pZBgDIAEoBSJSCghIZXJvSW5mbxIcCgVtc2dpZBgBIAEo",
            "DjINLkdTVG9HQy5Nc2dJRBIoCgtoZXJvcG9zaW5mbxgCIAEoCzITLkdTVG9H",
            "Qy5IZXJvUG9zSW5mbyJFCgpDaGF0SW5Sb29tEhwKBW1zZ2lkGAEgASgOMg0u",
            "R1NUb0dDLk1zZ0lEEgsKA3BvcxgCIAEoBRIMCgRjaGF0GAMgASgJIlsKC1Nr",
            "aWxsSGl0VGFyEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAMSDwoHc2tpbGxpZBgDIAEoBRIPCgd0YXJndWlkGAQgASgDImwK",
            "CEhQQ2hhbmdlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAQSCgoCaHAYAyABKAUSKAoGcmVhc29uGAQgASgOMhguR1NUb0dD",
            "LkhQTVBDaGFuZ2VSZWFzb24ibAoITXBDaGFuZ2USHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIKCgJtcBgDIAEoBRIoCgZy",
            "ZWFzb24YBCABKA4yGC5HU1RvR0MuSFBNUENoYW5nZVJlYXNvbiJMCg9UcnlU",
            "b0Nob29zZUhlcm8SHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSCwoD",
            "cG9zGAIgASgFEg4KBmhlcm9pZBgDIAEoBSJhChdOb3RpZnlDaG9vc2VIZXJv",
            "VGltZUVuZBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIoCgtoZXJv",
            "cG9zaW5mbxgCIAMoCzITLkdTVG9HQy5IZXJvUG9zSW5mbyKoAQoPU2tpbGxF",
            "bnRpdHlJbmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAMSDwoHc2tpbGxpZBgDIAEoBRIYCgNkaXIYBCABKAsyCy5HU1Rv",
            "R0MuRGlyEg8KB3Rhcmd1aWQYBSABKAMSEAoIdW5pcXVlaWQYBiABKAMSGwoG",
            "dGFyZGlyGAcgASgLMgsuR1NUb0dDLkRpciJCCgZGUEluZm8SHAoFbXNnaWQY",
            "ASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIMCgRpbmZvGAMg",
            "AygFIo8BCgxOb3RpZnlIUEluZm8SHAoFbXNnaWQYASABKA4yDS5HU1RvR0Mu",
            "TXNnSUQSKwoGaHBpbmZvGAIgAygLMhsuR1NUb0dDLk5vdGlmeUhQSW5mby5I",
            "UEluZm8aNAoGSFBJbmZvEgwKBGd1aWQYASABKAQSDQoFY3VyaHAYAiABKAUS",
            "DQoFbWF4aHAYAyABKAUijwEKDE5vdGlmeU1QSW5mbxIcCgVtc2dpZBgBIAEo",
            "DjINLkdTVG9HQy5Nc2dJRBIrCgZtcGluZm8YAiADKAsyGy5HU1RvR0MuTm90",
            "aWZ5TVBJbmZvLk1QSW5mbxo0CgZNUEluZm8SDAoEZ3VpZBgBIAEoBBINCgVj",
            "dXJtcBgCIAEoBRINCgVtYXhtcBgDIAEoBSKIAQoOTm90aWZ5SGVyb0luZm8S",
            "HAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIN",
            "CgVsZXZlbBgDIAEoBRILCgNleHAYBCABKAUSDAoEZnVyeRgFIAEoBRIPCgdh",
            "YnNvcmIxGAYgASgFEg8KB2Fic29yYjIYByABKAUibwoPTm90aWZ5U2tpbGxJ",
            "bmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiAB",
            "KAQSEQoJc2tpbGxzbG90GAMgASgFEg8KB3NraWxsaWQYBCABKAUSDAoEdGlt",
            "ZRgFIAEoBSI/CgxCYXR0bGVGaW5pc2gSHAoFbXNnaWQYASABKA4yDS5HU1Rv",
            "R0MuTXNnSUQSEQoJYnVsaWRndWlkGAIgASgEIj4KA0V4cBIcCgVtc2dpZBgB",
            "IAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIgASgEEgsKA2V4cBgDIAEo",
            "BSJGCglMZXZlbEluZm8SHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQS",
            "DAoEZ3VpZBgCIAEoBBINCgVsZXZlbBgDIAEoBSJOCgtBYnNvcmJCZWdpbhIc",
            "CgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIgASgEEhMK",
            "C21vbnN0ZXJndWlkGAMgASgEImYKCUFic29yYlJlcxIcCgVtc2dpZBgBIAEo",
            "DjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIgASgEEgsKA3JlcxgDIAEoCBIP",
            "CgdhYnNvcmIxGAQgASgFEg8KB2Fic29yYjIYBSABKAUiPwoMQ2FuY2VsQWJz",
            "b3JiEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEhEKCW1vbnN0ZXJp",
            "ZBgCIAEoBSKMAwoMVXNlckdhbWVJbmZvEhwKBW1zZ2lkGAEgASgOMg0uR1NU",
            "b0dDLk1zZ0lEEg4KBmhlYWRpZBgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRIN",
            "CgVsZXZlbBgEIAEoBRISCgp1cGdyYWRlZXhwGAUgASgFEg4KBmN1cmV4cBgG",
            "IAEoBRIVCg10b3RhbGdhbWVpbm5zGAcgASgFEhUKDXRvdGFsd2ludGltZXMY",
            "CCABKAUSEQoJaGVyb2tpbGxzGAkgASgFEhgKEGRlc3RvcnlidWlsZGluZ3MY",
            "CiABKAUSEQoJZGVhZHRpbWVzGAsgASgFEhQKDHRvdGFsX2FjaG51bRgMIAEo",
            "BRIOCgZhY2hudW0YDSABKAUSEAoIdmlwc2NvcmUYDiABKAUSEQoJYXNzaXN0",
            "bnVtGA8gASgFEhMKC2xhZGRlcnNjb3JlGBAgASgFEhEKCWd1aWxkbmFtZRgR",
            "IAEoCRISCgpleHBfYWR0aW1lGBIgASgDEhQKDGdvbGRfYWRkdGltZRgTIAEo",
            "AyJGCglIZXJvS2lsbHMSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQS",
            "DAoEZ3VpZBgCIAEoBBINCgVraWxscxgDIAEoBSLBAQoMQ3VyRGVhZFRpbWVz",
            "EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg8KB29iamd1aWQYAiAB",
            "KAQSEQoJZGVhZHRpbWVzGAMgASgFEhMKC2tpbGxlcl9jYW1wGAQgASgFEhYK",
            "DnJlYXNvbmhlcm9ndWlkGAUgASgEEg4KBmlmQWNlZBgGIAEoCBIMCgRjYW1w",
            "GAcgASgFEhEKCWhlcm9zdGF0ZRgIIAEoBRIRCgloZXJvdGl0bGUYCSABKAUi",
            "XQoFQ3VyQ1ASHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSEgoKdGFy",
            "Z2V0Z3VpZBgCIAEoBBIRCglwZXJzb25fY3AYAyABKAUSDwoHdGVhbV9jcBgE",
            "IAEoBSKCAQoLQ3VyQXRrU3BlZWQSHAoFbXNnaWQYASABKA4yDS5HU1RvR0Mu",
            "TXNnSUQSKwoEaW5mbxgCIAMoCzIdLkdTVG9HQy5DdXJBdGtTcGVlZC5TcGVl",
            "ZEluZm8aKAoJU3BlZWRJbmZvEgwKBGd1aWQYASABKAQSDQoFc3BlZWQYAiAB",
            "KAUiQwoHRnVyeVZhbBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIM",
            "CgRndWlkGAIgASgEEgwKBGZ1cnkYAyABKAUiRgoJRnVyeVN0YXRlEhwKBW1z",
            "Z2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDQoFc3Rh",
            "dGUYAyABKAUiMAoQTm90aWZ5SGVyb1JlYm9ybhIcCgVtc2dpZBgBIAEoDjIN",
            "LkdTVG9HQy5Nc2dJRCKLAQoLUmVib3JuVGltZXMSHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSEgoKbWFzdGVyZ3VpZBgCIAEoBBIRCglzZW5kdGlt",
            "ZXMYAyABKAMSDAoEZ29sZBgEIAEoAxIUCgxyZW1haW5fdGltZXMYBSABKAUS",
            "EwoLcmVib3JuX3RpbWUYBiABKAUiOwoNUmVib3JuU3VjY2VzcxIcCgVtc2dp",
            "ZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIgASgEIkgKDlBlcnNv",
            "bkNQQ2hhbmdlEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAQSCgoCY3AYAyABKAUitAIKE0Jyb2FkY2FzdEJhdHRlbGVSZXMS",
            "HAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDQoFaWZ3aW4YAiABKAgS",
            "NAoHcmVzaW5mbxgDIAMoCzIjLkdTVG9HQy5Ccm9hZGNhc3RCYXR0ZWxlUmVz",
            "LlJlc0luZm8auQEKB1Jlc0luZm8SDwoHb2JqZ3VpZBgBIAEoBBIOCgZoZXJv",
            "aWQYAiABKAUSEAoIbmlja25hbWUYAyABKAkSEAoIY3VybGV2ZWwYBCABKAUS",
            "EQoJa2lsbHRpbWVzGAUgASgFEhEKCWRlYWR0aW1lcxgGIAEoBRIQCghhc3N0",
            "aW1lcxgHIAEoBRIPCgd0b3RhbGNwGAggASgFEg8KB2xhc3RoaXQYCSABKAUS",
            "DwoHY2FtZ3BpZBgKIAEoBSKgAQobQnJvYWRjYXN0QmF0dGVsZVBlcnNvbmFs",
            "UmVzEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEhAKCGdvdF9nb2xk",
            "GAIgASgDEg4KBm9sZF9sdhgDIAEoBRIPCgdvbGRfZXhwGAQgASgFEg4KBmN1",
            "cl9sdhgFIAEoBRIPCgdjdXJfZXhwGAYgASgFEg8KB2dvdF9leHAYByABKAUi",
            "jwEKGEJyb2FkY2FzdEJ1aWxkaW5nRGVzdG9yeRIcCgVtc2dpZBgBIAEoDjIN",
            "LkdTVG9HQy5Nc2dJRBIUCgxidWlsZGluZ2d1aWQYAiABKAQSFQoNYnVpbGRp",
            "bmdfY2FtcBgDIAEoBRITCgtraWxsZXJfZ3VpZBgEIAEoBBITCgtraWxsZXJf",
            "Y2FtcBgFIAEoBSJuCgxIZXJvTW92ZUluZm8SHAoFbXNnaWQYASABKA4yDS5H",
            "U1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIYCgNkaXIYAyABKAsyCy5HU1Rv",
            "R0MuRGlyEhgKA3BvcxgEIAEoCzILLkdTVG9HQy5Qb3MicAoPUGxheUZpbmlz",
            "aFZlZGlvEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg8KB3dpbmNh",
            "bXAYAiABKAUSEQoJbG9zZXJjYW1wGAMgASgFEg0KBW1hcGlkGAQgASgFEgwK",
            "BGd1aWQYBSABKAQiMgoSTGVhdmVCYXR0bGVTdWNjZXNzEhwKBW1zZ2lkGAEg",
            "ASgOMg0uR1NUb0dDLk1zZ0lEIm0KCUJvcm5Tb2xlchIcCgVtc2dpZBgBIAEo",
            "DjINLkdTVG9HQy5Nc2dJRBIMCgR0eXBlGAIgASgFEgwKBGNhbXAYAyABKAUS",
            "GAoDcG9zGAQgASgLMgsuR1NUb0dDLlBvcxIMCgRndWlkGAUgASgEImoKCFNr",
            "aWxsRW5kEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQY",
            "AiABKAMSDwoHc2tpbGxpZBgDIAEoBRIPCgd0YXJndWlkGAQgASgDEhAKCHVu",
            "aXF1ZWlkGAUgASgFIlcKCkFsdGFyQlNJY28SHAoFbXNnaWQYASABKA4yDS5H",
            "U1RvR0MuTXNnSUQSDQoFaW5kZXgYAiABKAUSDAoEdHlwZRgDIAEoBRIOCgZv",
            "cHR5cGUYBCABKAUi2AEKDkdPUmVsZWFzZVNraWxsEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDwoHc2tpbGxpZBgDIAEo",
            "BRIhCgVzdGF0ZRgEIAEoDjISLkdTVG9HQy5Ta2lsbFN0YXRlEhsKBmN1clBv",
            "cxgFIAEoCzILLkdTVG9HQy5Qb3MSGwoGY3VyRGlyGAYgASgLMgsuR1NUb0dD",
            "LkRpchIPCgd0YXJndWlkGAcgASgEEhsKBnRhcnBvcxgIIAEoCzILLkdTVG9H",
            "Qy5Qb3MiVgoJR09Ta2lsbENEEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1z",
            "Z0lEEgwKBGd1aWQYAiABKAQSDwoHc2tpbGxpZBgDIAEoBRIMCgR0aW1lGAQg",
            "ASgFIroBCglFbWl0U2tpbGwSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNn",
            "SUQSDAoEZ3VpZBgCIAEoBBIQCghlZmZlY3RpZBgDIAEoDRIQCgh1bmlxdWVp",
            "ZBgEIAEoBRIYCgNkaXIYBSABKAsyCy5HU1RvR0MuRGlyEg8KB3Rhcmd1aWQY",
            "BiABKAQSGwoGdGFycG9zGAcgASgLMgsuR1NUb0dDLlBvcxIVCg1pZkFic29y",
            "YlNraWxsGAggASgIIkMKEURlc3Ryb3lFbWl0RWZmZWN0EhwKBW1zZ2lkGAEg",
            "ASgOMg0uR1NUb0dDLk1zZ0lEEhAKCHVuaXF1ZWlkGAIgASgFIlcKBkhpdFRh",
            "chIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIgASgE",
            "EhAKCGVmZmVjdGlkGAMgASgNEg8KB3Rhcmd1aWQYBCABKAQikQEKC1Jhbmdl",
            "RWZmZWN0EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQY",
            "AiABKAQSEAoIZWZmZWN0aWQYAyABKA0SEAoIdW5pcXVlaWQYBCABKA0SGAoD",
            "ZGlyGAUgASgLMgsuR1NUb0dDLkRpchIYCgNwb3MYBiABKAsyCy5HU1RvR0Mu",
            "UG9zIk4KDlJhbmdlRWZmZWN0RW5kEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dD",
            "Lk1zZ0lEEgwKBGd1aWQYAiABKAQSEAoIdW5pcXVlaWQYAyABKA0iXQoMU3Vt",
            "bW9uRWZmZWN0EhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1",
            "aWQYAiABKAQSEAoIZWZmZWN0aWQYAyABKA0SDwoHbnBjZ3VpZBgEIAEoBCKK",
            "AQoKQnVmZkVmZmVjdBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIM",
            "CgRndWlkGAIgASgEEhAKCGVmZmVjdGlkGAMgASgNEhAKCHVuaXF1ZWlkGAQg",
            "ASgNEg8KB3Rhcmd1aWQYBSABKAQSDAoEdGltZRgGIAEoBRINCgVzdGF0ZRgH",
            "IAEoBSKaAQoUTm90aWZ5U3VtbW9uTGlmZVRpbWUSHAoFbXNnaWQYASABKA4y",
            "DS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIQCghsaWZldGltZRgDIAEo",
            "BRIQCghyZXN0dGltZRgEIAEoBRIYCgNwb3MYBSABKAsyCy5HU1RvR0MuUG9z",
            "EhgKA2RpchgGIAEoCzILLkdTVG9HQy5EaXIioQEKHk5vdGlmeVNraWxsTW9k",
            "ZWxTdGFydEZvcmNlTW92ZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJ",
            "RBIMCgRndWlkGAIgASgEEhAKCGVmZmVjdGlkGAMgASgFEhgKA2RpchgEIAEo",
            "CzILLkdTVG9HQy5EaXISGAoDcG9kGAUgASgLMgsuR1NUb0dDLlBvcxINCgVz",
            "cGVlZBgGIAEoBSJ8CiJOb3RpZnlTa2lsbE1vZGVsU3RhcnRGb3JjZU1vdmVT",
            "dG9wEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiAB",
            "KAQSEAoIZWZmZWN0aWQYAyABKAUSGAoDcG9zGAQgASgLMgsuR1NUb0dDLlBv",
            "cyLBAQomTm90aWZ5U2tpbGxNb2RlbFN0YXJ0Rm9yY2VNb3ZlVGVsZXBvcnQS",
            "HAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIQ",
            "CghlZmZlY3RpZBgDIAEoBRIdCghiZWdpbnBvcxgEIAEoCzILLkdTVG9HQy5Q",
            "b3MSHQoIYmVnaW5kaXIYBSABKAsyCy5HU1RvR0MuRGlyEhsKBnRhcnBvcxgG",
            "IAEoCzILLkdTVG9HQy5Qb3MicAocTm90aWZ5U2tpbGxNb2RlbFB1cmlmaWNh",
            "dGlvbhIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIg",
            "ASgEEhIKCnRhcmdldGd1aWQYAyABKAQSEAoIZWZmZWN0aWQYBCABKAUingEK",
            "GU5vdGlmeVNraWxsTW9kZWxTdGFydExpbmsSHAoFbXNnaWQYASABKA4yDS5H",
            "U1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEoBBIdCghiZWdpbnBvcxgDIAEoCzIL",
            "LkdTVG9HQy5Qb3MSEgoKdGFyZ2V0Z3VpZBgEIAEoBBIQCghlZmZlY3RpZBgF",
            "IAEoBRIQCgh1bmlxdWVpZBgGIAEoDSJKChhOb3RpZnlTa2lsbE1vZGVsU3Rv",
            "cExpbmsSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSEAoIdW5pcXVl",
            "aWQYAiABKA0ibAobTm90aWZ5UGFzc2l0aXZlU2tpbGxSZWxlYXNlEhwKBW1z",
            "Z2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDwoHc2tp",
            "bGxpZBgDIAEoBRIQCgh0aW1lTGVmdBgEIAEoBSJpChhOb3RpZnlQYXNzaXRp",
            "dmVTa2lsbExvYWQSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoE",
            "Z3VpZBgCIAEoBBIPCgdza2lsbGlkGAMgASgFEhAKCHVuaXF1ZWlkGAQgASgF",
            "ImsKGk5vdGlmeVBhc3NpdGl2ZVNraWxsVW5Mb2FkEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDwoHc2tpbGxpZBgDIAEo",
            "BRIQCgh1bmlxdWVpZBgEIAEoBSLNAQoYTm90aWZ5U2tpbGxNb2RlbEVtaXRU",
            "dXJuEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiAB",
            "KAQSEAoIZWZmZWN0aWQYAyABKA0SEQoJcHJvZ2VjdGlkGAQgASgFEhgKA3Bv",
            "cxgFIAEoCzILLkdTVG9HQy5Qb3MSGAoDZGlyGAYgASgLMgsuR1NUb0dDLkRp",
            "chIPCgd0YXJndWlkGAcgASgEEhsKBnRhcnBvcxgIIAEoCzILLkdTVG9HQy5Q",
            "b3MiOwoNTm90aWZ5Qm9ybk9iahIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5N",
            "c2dJRBIMCgR0eXBlGAIgASgFIpACChNOb3RpZnlSZWNvbm5lY3RJbmZvEhwK",
            "BW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEhMKC2JhdHRsZXN0YXRlGAIg",
            "ASgFEhQKDHJlbWFpbl90aW1lcxgDIAEoBRIMCgRpZm9iGAQgASgIEkAKDXJl",
            "Y29ubmVjdGluZm8YBSADKAsyKS5HU1RvR0MuTm90aWZ5UmVjb25uZWN0SW5m",
            "by5SZWNvbm5lY3RJbmZvGmAKDVJlY29ubmVjdEluZm8SCwoDcG9zGAEgASgF",
            "EgwKBGd1aWQYAiABKAQSEAoIbmlja25hbWUYAyABKAkSDgoGaGVyb2lkGAQg",
            "ASgNEhIKCmlmc2VsZWN0ZWQYBSABKAgiOAoYTm90aWZ5T0JSZXR1cm5CYXR0",
            "bGVSb29tEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEIkoKDk5vdGlm",
            "eU9CQXBwZWFyEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBG9i",
            "aWQYAiABKAQSDAoEY2FtcBgDIAEoBSJMCg1Ob3RpZnlLaWxsTlBDEhwKBW1z",
            "Z2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSDwoHa2ls",
            "bG51bRgDIAEoDSJiChBOb3RpZnlBbHRhckJTSWNvEhwKBW1zZ2lkGAEgASgO",
            "Mg0uR1NUb0dDLk1zZ0lEEg8KB2FsdGFyaWQYAiABKA0SDwoHb2JqdHlwZRgD",
            "IAEoDRIOCgZvcHR5cGUYBCABKA0iYAoPTm90aWZ5U2tpbGxVcEx2EhwKBW1z",
            "Z2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEgwKBGd1aWQYAiABKAQSEAoIc2tp",
            "bGxwb3MYAyABKA0SDwoHc2tpbGxpZBgEIAEoDSJOCg9Ob3RpZnlCbGFzdEh1",
            "cnQSHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNnSUQSDAoEZ3VpZBgCIAEo",
            "BBIPCgdibGFzdGhwGAMgASgFIn0KG05vdGlmeUdhbWVPYmplY3RSZWxpdmVT",
            "dGF0ZRIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIMCgRndWlkGAIg",
            "ASgEEhgKA3BvcxgDIAEoCzILLkdTVG9HQy5Qb3MSGAoDZGlyGAQgASgLMgsu",
            "R1NUb0dDLkRpciI7Cg1Ob3RpZnlDdXJHb2xkEhwKBW1zZ2lkGAEgASgOMg0u",
            "R1NUb0dDLk1zZ0lEEgwKBGdvbGQYAiABKAQiQQoQTm90aWZ5Q3VyRGlhbW9u",
            "ZBIcCgVtc2dpZBgBIAEoDjINLkdTVG9HQy5Nc2dJRBIPCgdEaWFtb25kGAIg",
            "ASgEIjUKFUdldGxvZ2luUmV3YXJkU3VjY2VzcxIcCgVtc2dpZBgBIAEoDjIN",
            "LkdTVG9HQy5Nc2dJRCJDChNHZXRsb2dpblJld2FyZF9Ta2luEhwKBW1zZ2lk",
            "GAEgASgOMg0uR1NUb0dDLk1zZ0lEEg4KBnNraW5pZBgCIAEoAyJDChNHZXRs",
            "b2dpblJld2FyZF9SdW5lEhwKBW1zZ2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lE",
            "Eg4KBnJ1bmVpZBgCIAEoAyJZChNHZXRsb2dpblJld2FyZF9IZXJvEhwKBW1z",
            "Z2lkGAEgASgOMg0uR1NUb0dDLk1zZ0lEEg4KBmhlcm9pZBgCIAEoDRIUCgxl",
            "eHBpcmVkX3RpbWUYAyABKAMiowEKEENhbkludml0ZUZyaWVuZHMSHAoFbXNn",
            "aWQYASABKA4yDS5HU1RvR0MuTXNnSUQSMQoHZnJpZW5kcxgCIAMoCzIgLkdT",
            "VG9HQy5DYW5JbnZpdGVGcmllbmRzLkZyaWVuZHMaPgoHRnJpZW5kcxIQCghI",
            "ZWFkZXJJZBgBIAEoBRIQCghuaWNrbmFtZRgCIAEoCRIPCgdndWlkaWR4GAMg",
            "ASgEIkcKCkxhc3RIaXROdW0SHAoFbXNnaWQYASABKA4yDS5HU1RvR0MuTXNn",
            "SUQSDAoEZ3VpZBgCIAEoBBINCgVsaG51bRgDIAEoBSJ0CghSb29tSW5mbxIO",
            "CgZyb29tSWQYASABKAUSDQoFaWZQd2QYAiABKAUSDQoFbWFwSWQYAyABKAUS",
            "DgoGbWFzdGVyGAQgASgJEhQKDGN1clVzZXJDb3VudBgFIAEoBRIUCgxtYXhV",
            "c2VyQ291bnQYBiABKAUiUgoOQXNrUm9vbUxpc3RSZXQSHAoFbXNnaWQYASAB",
            "KA4yDS5HU1RvR0MuTXNnSUQSIgoIcm9vbWxpc3QYAiADKAsyEC5HU1RvR0Mu",
            "Um9vbUluZm8q+jUKBU1zZ0lEEhgKFGVNc2dUb0dDRnJvbUdTX0JlZ2luEAAS",
            "HwobZU1zZ1RvR0NGcm9tR1NfR0NBc2tQaW5nUmV0EAESJQohZU1zZ1RvR0NG",
            "cm9tR1NfTm90aWZ5VXNlckJhc2VJbmZvEAISJwojZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5U3lzdGVtQW5ub3VuY2UQAxIhCh1lTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlOZXRDbGFzaBAEEhsKF2VNc2dUb0dDRnJvbUdTX0dDQXNrUmV0EAUSIQod",
            "ZU1zZ1RvR0NGcm9tR1NfTm90aWZ5SGVyb0xpc3QQBxInCiNlTXNnVG9HQ0Zy",
            "b21HU19Ob3RpZnlCYXR0bGVCYXNlSW5mbxAIEioKJmVNc2dUb0dDRnJvbUdT",
            "X05vdGlmeUJhdHRsZVNlYXRQb3NJbmZvEAkSKgomZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5QmF0dGxlU3RhdGVDaGFuZ2UQChIoCiRlTXNnVG9HQ0Zyb21HU19O",
            "b3RpZnlDdXJCYXR0bGVDaGFuZ2UQCxIpCiVlTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlHYW1lT2JqZWN0QXBwZWFyEAwSLAooZU1zZ1RvR0NGcm9tR1NfTm90aWZ5",
            "R2FtZU9iamVjdERpc2FwcGVhchANEiwKKGVNc2dUb0dDRnJvbUdTX05vdGlm",
            "eUdhbWVPYmplY3RGcmVlU3RhdGUQDhIrCidlTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlHYW1lT2JqZWN0UnVuU3RhdGUQDxI0CjBlTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlHYW1lT2JqZWN0UHJlcGFyZVNraWxsU3RhdGUQEBI0CjBlTXNnVG9HQ0Zy",
            "b21HU19Ob3RpZnlHYW1lT2JqZWN0UmVsZWFzZVNraWxsU3RhdGUQERIsCihl",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlHYW1lT2JqZWN0RGVhZFN0YXRlEBISIQod",
            "ZU1zZ1RvR0NGcm9tR1NfTm90aWZ5R29vZHNJbmYQExIrCidlTXNnVG9HQ0Zy",
            "b21HU19Ob3RpZnlCYXR0bGVMb2FkaW5nU3RhdGUQFBInCiNlTXNnVG9HQ0Zy",
            "b21HU19Ob3RpZnlCYXR0bGVIZXJvSW5mbxAVEiUKIWVNc2dUb0dDRnJvbUdT",
            "X0JhZ1J1bmVzSW5mb0NoYW5nZRAWEh8KG2VNc2dUb0dDRnJvbUdTX0V4Y2hh",
            "bmdlR29sZBAXEh0KGWVNc2dUb0dDRnJvbUdTX0NoYXRJblJvb20QGBInCiNl",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlTa2lsbEhpdFRhcmdldBAZEiEKHWVNc2dU",
            "b0dDRnJvbUdTX05vdGlmeUhQQ2hhbmdlEBoSIQodZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5TVBDaGFuZ2UQGxIoCiRlTXNnVG9HQ0Zyb21HU19Ob3RpZnlUcnlU",
            "b0Nob29zZUhlcm8QHBIqCiZlTXNnVG9HQ0Zyb21HU19Ob3RpZnlDaG9vc2VI",
            "ZXJvVGltZUVuZBAdEigKJGVNc2dUb0dDRnJvbUdTX05vdGlmeVNraWxsRW50",
            "aXR5SW5mbxAeEioKJmVNc2dUb0dDRnJvbUdTX05vdGlmeUZpZ2h0UHJvcGVy",
            "dHlJbmZvEB8SHwobZU1zZ1RvR0NGcm9tR1NfTm90aWZ5SFBJbmZvECISHwob",
            "ZU1zZ1RvR0NGcm9tR1NfTm90aWZ5TVBJbmZvECMSIQodZU1zZ1RvR0NGcm9t",
            "R1NfTm90aWZ5SGVyb0luZm8QJBIhCh1lTXNnVG9HQ0Zyb21HU19Ob3RpZnlC",
            "dWZmSW5mbxAlEiMKH2VNc2dUb0dDRnJvbUdTX05vdGlmeUJ1ZmZSZW1vdmUQ",
            "JhIiCh5lTXNnVG9HQ0Zyb21HU19Ob3RpZnlTa2lsbEluZm8QJxIlCiFlTXNn",
            "VG9HQ0Zyb21HU19Ob3RpZnlCYXR0bGVGaW5pc2gQKBIgChxlTXNnVG9HQ0Zy",
            "b21HU19Ob3RpZnlFeHBJbmZvECkSJgoiZU1zZ1RvR0NGcm9tR1NfTm90aWZ5",
            "SGVyb0xldmVsSW5mbxAqEiQKIGVNc2dUb0dDRnJvbUdTX05vdGlmeUFic29y",
            "YkJlZ2luECsSLAooZU1zZ1RvR0NGcm9tR1NfTm90aWZ5QWJzb3JiTW9uc3Rl",
            "clJlc3VsdBAsEioKJmVNc2dUb0dDRnJvbUdTX05vdGlmeUNhbmNlbEFic29y",
            "YlNraWxsEC0SJQohZU1zZ1RvR0NGcm9tR1NfTm90aWZ5VXNlckdhbWVJbmZv",
            "EC4SIgoeZU1zZ1RvR0NGcm9tR1NfTm90aWZ5SGVyb0tpbGxzEC8SJQohZU1z",
            "Z1RvR0NGcm9tR1NfTm90aWZ5Q3VyRGVhZFRpbWVzEDASHgoaZU1zZ1RvR0NG",
            "cm9tR1NfTm90aWZ5Q3VyQ1AQMRIkCiBlTXNnVG9HQ0Zyb21HU19Ob3RpZnlD",
            "dXJBdGtTcGVlZBAyEiIKHmVNc2dUb0dDRnJvbUdTX05vdGlmeUZ1cnlWYWx1",
            "ZRAzEiIKHmVNc2dUb0dDRnJvbUdTX05vdGlmeUZ1cnlTdGF0ZRA0EigKJGVN",
            "c2dUb0dDRnJvbUdTX05vdGlmeUhlcm9SZWJvcm5UaW1lcxA1EikKJWVNc2dU",
            "b0dDRnJvbUdTX05vdGlmeUJ1eVJlYm9yblN1Y2Nlc3MQNhIqCiZlTXNnVG9H",
            "Q0Zyb21HU19Ccm9hZGNhc3RCYXR0bGVIZXJvSW5mbxA3EikKJWVNc2dUb0dD",
            "RnJvbUdTX05vdGlmeVBlcnNvbmFsQ1BDaGFuZ2UQOBInCiNlTXNnVG9HQ0Zy",
            "b21HU19Ccm9hZEN1ckJhdHRsZVJlc3VsdBA5EiwKKGVNc2dUb0dDRnJvbUdT",
            "X0Jyb2FkQnVpbGRpbmdEZXN0cm95QnlXaG8QOhIjCh9lTXNnVG9HQ0Zyb21H",
            "U19Ob3RpZnlWb2lwUm9vbUlkEDsSLQopZU1zZ1RvR0NGcm9tR1NfTm90aWZ5",
            "SGVyb0Rpc3BsYWNlbWVudEluZm8QPBIrCidlTXNnVG9HQ0Zyb21HU19Ccm9h",
            "ZGNhc3RQbGF5RmluaXNoVmVkaW8QPRIrCidlTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlMZWF2ZUJhdHRsZVN1Y2Nlc3MQPhIjCh9lTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlCb3JuU29sZGVyED8SIQodZU1zZ1RvR0NGcm9tR1NfTm90aWZ5U2tpbGxF",
            "bmQQQBIjCh9lTXNnVG9HQ0Zyb21HU19Ob3RpZnlBbHRhckJTSWNvEEESJgoi",
            "ZU1zZ1RvR0NGcm9tR1NfV2FybmluZ1RvU2VsZWN0SGVybxBCEi8KK2VNc2dU",
            "b0dDRnJvbUdTX05vdGlmeUdhbWVPYmplY3RSZWxlYXNlU2tpbGwQQxIqCiZl",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlHYW1lT2JqZWN0U2tpbGxDRBBEEicKI2VN",
            "c2dUb0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxFbWl0EEUSLgoqZU1zZ1Rv",
            "R0NGcm9tR1NfTm90aWZ5U2tpbGxNb2RlbEVtaXREZXN0cm95EEYSLAooZU1z",
            "Z1RvR0NGcm9tR1NfTm90aWZ5U2tpbGxNb2RlbEhpdFRhcmdldBBHEigKJGVN",
            "c2dUb0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxSYW5nZRBIEisKJ2VNc2dU",
            "b0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxSYW5nZUVuZBBJEioKJmVNc2dU",
            "b0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxMZWFkaW5nEEoSLworZU1zZ1Rv",
            "R0NGcm9tR1NfTm90aWZ5U2tpbGxNb2RlbFN1bW1vbkVmZmVjdBBLEiwKKGVN",
            "c2dUb0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxCdWZFZmZlY3QQTBInCiNl",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlTdW1tb25MaWZlVGltZRBNEjEKLWVNc2dU",
            "b0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxTdGFydEZvcmNlTW92ZRBOEjUK",
            "MWVNc2dUb0dDRnJvbUdTX05vdGlmeVNraWxsTW9kZWxTdGFydEZvcmNlTW92",
            "ZVN0b3AQTxI5CjVlTXNnVG9HQ0Zyb21HU19Ob3RpZnlTa2lsbE1vZGVsU3Rh",
            "cnRGb3JjZU1vdmVUZWxlcG9ydBBQEi4KKmVNc2dUb0dDRnJvbUdTX05vdGlm",
            "eVBhc3NpdGl2ZVNraWxsUmVsZWFzZRBREisKJ2VNc2dUb0dDRnJvbUdTX05v",
            "dGlmeVBhc3NpdGl2ZVNraWxsTG9hZBBSEi0KKWVNc2dUb0dDRnJvbUdTX05v",
            "dGlmeVBhc3NpdGl2ZVNraWxsVW5sb2FkEFMSKwonZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5U2tpbGxNb2RlbEVtaXRUdXJuEFQSIAocZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5QUZQRGF0YRBVEiwKKGVNc2dUb0dDRnJvbUdTX05vdGlmeUJhdHRs",
            "ZU1hbmFnZXJDaGFuZ2UQVhIgChxlTXNnVG9HQ0Zyb21HU19Ob3RpZnlCb3Ju",
            "T2JqEFcSJgoiZU1zZ1RvR0NGcm9tR1NfTm90aWZ5UmVjb25uZWN0SW5mbxBY",
            "EiYKImVNc2dUb0dDRnJvbUdTX05vdGlmeUhlcm9Hb29kc0luZm8QWRIrCidl",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlPQlJldHVybkJhdHRsZVJvb20QWhItCill",
            "TXNnVG9HQ0Zyb21HU19Ob3RpZnlVc2VyUmV0dXJuQmF0dGxlUm9vbRBbEioK",
            "JmVNc2dUb0dDRnJvbUdTX05vdGlmeUJhdHRsZUFsbFVzZXJJbmZvEFwSLgoq",
            "ZU1zZ1RvR0NGcm9tR1NfTm90aWZ5VXNlckJlQWRkZWRGaXJlbmRJbmZvEF0S",
            "JQohZU1zZ1RvR0NGcm9tQ1NfTm90aWZ5RGVmYXVsdEhlcm9zEF4SIQodZU1z",
            "Z1RvR0NGcm9tR1NfTm90aWZ5T0JBcHBlYXIQXxIgChxlTXNnVG9HQ0Zyb21H",
            "U19Ob3RpZnlLaWxsTlBDEGASIgoeZU1zZ1RvR0NGcm9tR1NfTm90aWZ5QWx0",
            "YXJCU09rEGESIgoeZU1zZ1RvR0NGcm9tR1NfTm90aWZ5U2tpbGxVcEx2EGIS",
            "JAogZU1zZ1RvR0NGcm9tR1NfTm90aWZ5VXNlclNOU0xpc3QQYxIqCiZlTXNn",
            "VG9HQ0Zyb21HU19Ob3RpZnlVc2VyU05TTGlzdENoYW5nZRBkEigKJGVNc2dU",
            "b0dDRnJvbUdTX1VzZXJCZUludml0ZWRUb0JhdHRsZRBlEiQKIGVNc2dUb0dD",
            "RnJvbUdTX05vdGlmeU1zZ0Zyb21Vc2VyEGYSJwojZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5QmVBZGRGcmllbmRNc2cQZxIpCiVlTXNnVG9HQ0Zyb21HU19Ob3Rp",
            "ZnlRdWVyeU5pY2tOYW1lUmV0EGgSKQolZU1zZ1RvR0NGcm9tQ1NfTm90aWZ5",
            "R3VpZGVMYXN0Q29tU3RlcBBqEiIKHmVNc2dUb0dDRnJvbUdTX05vdGlmeUJs",
            "YXN0SHVydBBrEiMKH2VNc2dUb0dDRnJvbUdTX05vdGlmeUhlcm9SZWJvcm4Q",
            "bhIuCiplTXNnVG9HQ0Zyb21HU19Ob3RpZnlHYW1lT2JqZWN0UmVsaXZlU3Rh",
            "dGUQbxIoCiRlTXNnVG9HQ0Zyb21HU19Ob3RpZnlVc2VyR3VpZGVTZXR1cHMQ",
            "cBIkCiBlTXNnVG9HQ0Zyb21CU19Bc2tHYXRlQWRkcmVzc1JldBBxEiEKHWVN",
            "c2dUb0dDRnJvbUdTX05vdGlmeVVzZXJOYW1lEHISJgoiZU1zZ1RvR0NGcm9t",
            "Q1NfTm90aWZ5UmVjb25uZWN0SW5mbxBzEiAKHGVNc2dUb1NTRnJvbUNTX05v",
            "dGlmeUJvcm5PYmoQdBIfChtlTXNnVG9HQ0Zyb21HU19Ob3RpZnlOb3RpY2UQ",
            "dRIiCh5lTXNnVG9HQ0Zyb21HU19Ob3RpZnlHdWlkZVRpcHMQdhIjCh9lTXNn",
            "VG9HQ0Zyb21HU19Ob3RpZnlVc2VyQ0xEYXlzEHcSKwonZU1zZ1RvR0NGcm9t",
            "R3NfTm90aWZ5U2Vjb25kYXJ5R3VpZGVUYXNrEHkSIAocZU1zZ1RvR0NGcm9t",
            "R3NfTm90aWZ5Q3VyR29sZBB6EiMKH2VNc2dUb0dDRnJvbUdzX05vdGlmeUN1",
            "ckRpYW1vbmQQexIuCiplTXNnVG9HQ0Zyb21HU19Ob3RpZnlHZXRsb2dpblJl",
            "d2FyZFN1Y2Nlc3MQfBIsCihlTXNnVG9HQ0Zyb21HU19Ob3RpZnlHZXRsb2dp",
            "blJld2FyZF9Ta2luEH0SLAooZU1zZ1RvR0NGcm9tR1NfTm90aWZ5R2V0bG9n",
            "aW5SZXdhcmRfUnVuZRB+EiwKKGVNc2dUb0dDRnJvbUdTX05vdGlmeUdldGxv",
            "Z2luUmV3YXJkX0hlcm8QfxImCiFlTXNnVG9HQ0Zyb21HU19Ob3RpZnlVc2Vy",
            "QmFzZVVwTHYQgAESKAojZU1zZ1RvR0NGcm9tR1NfTm90aWZ5QmF0dGxlU3Bh",
            "blRpbWUQgQESKwomZU1zZ1RvR0NGcm9tR1NfTm90aWZ5QmF0dGxlTWF0aGVy",
            "Q291bnQQggESJAofZU1zZ1RvR0NGcm9tR1NfTm90aWZ5SGVyb0Fzc2lzdBCD",
            "ARIoCiNlTXNnVG9HQ0Zyb21HU19Ob3RpZnlIZXJvQXR0cmlidXRlcxCEARIm",
            "CiFlTXNnVG9HQ0Zyb21HU19Ob3RpZnlHb29kc0NmZ0luZm8QhQESIgodZU1z",
            "Z1RvR0NGcm9tR1NfTm90aWZ5VXNlck1haWwQhgESIgodZU1zZ1RvR0NGcm9t",
            "R1NfTm90aWZ5TWFpbEluZm8QhwESKgolZU1zZ1RvR0NGcm9tR1NfTm90aWZ5",
            "SWZNYWlsRGVsQW5kU29ydBCIARImCiFlTXNnVG9HQ0Zyb21HU19Ob3RpZnlS",
            "b29tQmFzZUluZm8QjAESKgolZU1zZ1RvR0NGcm9tQlNfTm90aWZ5Q2FuSW52",
            "aXRlRnJpZW5kcxCNARInCiJlTXNnVG9HQ0Zyb21CU19Ob3RpZnlDdXJMYXN0",
            "SGl0TnVtEI4BEiIKHWVNc2dUb0dDRnJvbUdTX0Fza1Jvb21MaXN0UmV0EI8B",
            "EiMKHmVNc2dUb0dDRnJvbUJTX05vdGlmeUhlcm9zSW5mbxCQARImCiFlTXNn",
            "VG9HQ0Zyb21CU19Ob3RpZnlHb29kc0V4cGlyZWQQkQESMAorZU1zZ1RvR0NG",
            "cm9tR1NfTm90aWZ5U2tpbGxNb2RlbFB1cmlmaWNhdGlvbhDcARIkCh9lTXNn",
            "VG9HQ0Zyb21HU19Ob3RpZnlDU0hlcm9MaXN0EN0BEisKJmVNc2dUb0dDRnJv",
            "bUdTX05vdGlmeU1hdGNoVGVhbUJhc2VJbmZvEN4BEi0KKGVNc2dUb0dDRnJv",
            "bUdTX05vdGlmeU1hdGNoVGVhbVBsYXllckluZm8Q3wESKQokZU1zZ1RvR0NG",
            "cm9tR1NfTm90aWZ5TWF0Y2hUZWFtU3dpdGNoEOABEikKJGVNc2dUb0dDRnJv",
            "bUdTX05vdGlmeU1hdGNoSW52aXRlSm9pbhDhARIpCiRlTXNnVG9HQ0Zyb21H",
            "U19Ob3RpZnlHZXROZXdDb21tb2RpdHkQ4gESKQokZU1zZ1RvR0NGcm9tR1Nf",
            "Tm90aWZ5UmVtb3ZlQ29tbW9kaXR5EOMBEiMKHmVNc2dUb0dDRnJvbUdTX05v",
            "dGlmeVJ1bmVzTGlzdBDkARIlCiBlTXNnVG9HQ0Zyb21HU19Ob3RpZnlOZXdO",
            "aWNrbmFtZRDlARIpCiRlTXNnVG9HQ0Zyb21HU19Ob3RpZnlPbmVNYXRjaE5l",
            "ZWRPbmUQ5gESJQogZU1zZ1RvR0NGcm9tR1NfTm90aWZ5TmV3SGVhZGVyaWQQ",
            "5wESJAofZU1zZ1RvR0NGcm9tR1NfTm90aWZ5VXNlckx2SW5mbxDoARItCihl",
            "TXNnVG9HQ0Zyb21HU19Ccm9hZEJhdHRsZVBlcnNvbmFsUmVzdWx0EOkBEh4K",
            "GWVNc2dUb0dDRnJvbUdTX1VubG9hZFJ1bmUQ6gESKQokZU1zZ1RvR0NGcm9t",
            "R1NfTm90aWZ5QmF0dGxlRGVsYXlUaW1lEOsBEiEKHGVNc2dUb0dDRnJvbUdT",
            "X1JlY29pblJ1bmVSZXQQ7AESJwoiZU1zZ1RvR0NGcm9tR1NfTm90aWZ5T3Ro",
            "ZXJJdGVtSW5mbxDtARIgChtlTXNnVG9HQ0Zyb21DU19Ob3RpZnlJc09uU1MQ",
            "7gESMwouZU1zZ1RvR0NGcm9tR1NfTm90aWZ5R2FtZU9iamVjdFVzaW5nU2tp",
            "bGxTdGF0ZRDwARI1CjBlTXNnVG9HQ0Zyb21HU19Ob3RpZnlHYW1lT2JqZWN0",
            "TGFzdGluZ1NraWxsU3RhdGUQ8QESHQoYZU1zZ1RvR0NGcm9tR1NfR3VpZGVS",
            "ZXNwEKwCEiIKHWVNc2dUb0dDRnJvbUNTX0d1aWRlS2lsbHNJbmZvEK0CEh4K",
            "GWVNc2dUb0dDRnJvbUdTX0d1aWRlQXdhcmQQrgISIQocZU1zZ1RvR0NGcm9t",
            "R1NfVXBkYXRlQWxsVGFzaxCQAxImCiFlTXNnVG9HQ0Zyb21HU19VcGRhdGVB",
            "bGxEYWlseVRhc2sQkQMSHgoZZU1zZ1RvR0NGcm9tR1NfQWRkT25lVGFzaxCS",
            "AxIhChxlTXNnVG9HQ0Zyb21HU19VcGRhdGVPbmVUYXNrEJMDEh4KGWVNc2dU",
            "b0dDRnJvbUdTX0RlbE9uZVRhc2sQlAMSIgodZU1zZ1RvR0NGcm9tR1NfUmV3",
            "YXJkc09uZVRhc2sQlQMSLQooZU1zZ1RvR0NGcm9tR1NfTm90aWZ5U2tpbGxN",
            "b2RlbFN0YXJ0TGluaxCmBBIsCidlTXNnVG9HQ0Zyb21HU19Ob3RpZnlTa2ls",
            "bE1vZGVsU3RvcExpbmsQpwQSIQocZU1zZ1RvR0NGcm9tR1NfTm90aWZ5TWFp",
            "bFJldBDZBBIXChJlTXNnVG9HQ0Zyb21HU19FbmQQ6AcqXQoITWFpbFR5cGUS",
            "EQoNbWFpbFR5cGVfTm9uZRAAEg4KCm1haWxUeXBlXzEQARIOCgptYWlsVHlw",
            "ZV8yEAISDgoKbWFpbFR5cGVfMxADEg4KCm1haWxUeXBlXzQQBCqGAQoORU1h",
            "aWxDdXJ0U3RhdGUSEwoPZU1haWxTdGF0ZV9Ob25lEAASEgoOZU1haWxTdGF0",
            "ZV9OZXcQARIiCh5lTWFpbFN0YXRlX0xvb2tlZEJ1dE5vdEdvdEdpZnQQAhIT",
            "Cg9lTWFpbFN0YXRlX0xvb2sQAxISCg5lTWFpbFN0YXRlX0RlbBAEKloKC0Jh",
            "dHRsZVN0YXRlEggKBGZyZWUQABILCgd3YWl0aW5nEAESDgoKc2VsZWN0aGVy",
            "bxACEgsKB2xvYWRpbmcQAxILCgdwbGF5aW5nEAQSCgoGZmluaXNoEAUqOAoH",
            "T2JqVHlwZRIKCgZ1bmtub3cQABIQCgxPYmpUeXBlX0hlcm8QARIPCgtPYmpU",
            "eXBlX05QQxACKnoKEEhQTVBDaGFuZ2VSZWFzb24SDgoKTm9ybWFsSHVydBAA",
            "Eg4KCkJsb2FzdEh1cnQQARINCglTa2lsbEh1cnQQAhIPCgtSZWNvdmVySHVy",
            "dBADEhAKDFNraWxsQ29uc3VtZRAEEhQKEEJ1ZmZFZmZlY3RSZWFzb24QBSo5",
            "CgpTa2lsbFN0YXRlEggKBHNpbmcQABILCgdwcmVwYXJlEAESCwoHcmVsZWFz",
            "ZRACEgcKA2VuZBADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GSToGC.MsgID), typeof(global::GSToGC.MailType), typeof(global::GSToGC.EMailCurtState), typeof(global::GSToGC.BattleState), typeof(global::GSToGC.ObjType), typeof(global::GSToGC.HPMPChangeReason), typeof(global::GSToGC.SkillState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.TaskData), global::GSToGC.TaskData.Parser, new[]{ "TaskId", "TaskGuid", "TaskCurCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUpdateAllTask), global::GSToGC.NotifyUpdateAllTask.Parser, new[]{ "Msgid", "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUpdateAllDailyTask), global::GSToGC.NotifyUpdateAllDailyTask.Parser, new[]{ "Msgid", "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyAddOneTask), global::GSToGC.NotifyAddOneTask.Parser, new[]{ "Msgid", "OneTask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUpdateOneTask), global::GSToGC.NotifyUpdateOneTask.Parser, new[]{ "Msgid", "OneTask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyDelOneTask), global::GSToGC.NotifyDelOneTask.Parser, new[]{ "Msgid", "TaskGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyRewardsOneTask), global::GSToGC.NotifyRewardsOneTask.Parser, new[]{ "Msgid", "TaskGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMailRet), global::GSToGC.NotifyMailRet.Parser, new[]{ "Msgid", "Mailid", "Errcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyIsOnSS), global::GSToGC.NotifyIsOnSS.Parser, new[]{ "Msgid", "Ssid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyOtherItemInfo), global::GSToGC.NotifyOtherItemInfo.Parser, new[]{ "Msgid", "Item" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyOtherItemInfo.Types.OtherItem), global::GSToGC.NotifyOtherItemInfo.Types.OtherItem.Parser, new[]{ "ItemId", "ItemNum", "ExpiredTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RecoinRuneRet), global::GSToGC.RecoinRuneRet.Parser, new[]{ "Msgid", "RuneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UnloadRune), global::GSToGC.UnloadRune.Parser, new[]{ "Msgid", "Page", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideCSStepInfo), global::GSToGC.GuideCSStepInfo.Parser, new[]{ "Msgid", "Allcomp", "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideAward), global::GSToGC.GuideAward.Parser, new[]{ "Msgid", "Awardlist" }, null, new[]{ typeof(global::GSToGC.GuideAward.Types.dtype) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideAward.Types.awardtype), global::GSToGC.GuideAward.Types.awardtype.Parser, new[]{ "Dt", "Idxn" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideKillsInfo), global::GSToGC.GuideKillsInfo.Parser, new[]{ "Msgid", "Guid", "Npctype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUserLvInfo), global::GSToGC.NotifyUserLvInfo.Parser, new[]{ "Msgid", "Curlv", "Curexp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyNewHeaderid), global::GSToGC.NotifyNewHeaderid.Parser, new[]{ "Msgid", "Guid", "Newheaderid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyOneMatchNeedOne), global::GSToGC.NotifyOneMatchNeedOne.Parser, new[]{ "Msgid", "Mapid", "Fightid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyNewNickname), global::GSToGC.NotifyNewNickname.Parser, new[]{ "Msgid", "Guid", "Newnickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RunesSlot), global::GSToGC.RunesSlot.Parser, new[]{ "Slotpos", "Runeid", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RunesBagInfo), global::GSToGC.RunesBagInfo.Parser, new[]{ "Runeid", "Num", "Gottime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyRunesList), global::GSToGC.NotifyRunesList.Parser, new[]{ "Msgid", "Runesbaginfo", "RunesSlotInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyRemoveCommodity), global::GSToGC.NotifyRemoveCommodity.Parser, new[]{ "Msgid", "Commodityid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyGetNewCommodity), global::GSToGC.NotifyGetNewCommodity.Parser, new[]{ "Msgid", "Commodityid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMatchTeamBaseInfo), global::GSToGC.NotifyMatchTeamBaseInfo.Parser, new[]{ "Msgid", "Teamid", "Matchtype", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMatchTeamPlayerInfo), global::GSToGC.NotifyMatchTeamPlayerInfo.Parser, new[]{ "Msgid", "Postion", "IsInsert", "Nickname", "Headid", "Userlevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMatchTeamSwitch), global::GSToGC.NotifyMatchTeamSwitch.Parser, new[]{ "Msgid", "Startflag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMatchInviteJoin), global::GSToGC.NotifyMatchInviteJoin.Parser, new[]{ "Msgid", "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHerosInfo), global::GSToGC.NotifyHerosInfo.Parser, new[]{ "Msgid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHerosInfo.Types.heropanelinfo), global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Parser, new[]{ "Camgpid", "Guid", "Herolv", "Nickname", "Killnum", "Deadtimes", "Asstimes", "Lasthit", "Goods", "Heroid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg), global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg.Parser, new[]{ "Grid", "Goodid" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyGoodsExpired), global::GSToGC.NotifyGoodsExpired.Parser, new[]{ "Msgid", "Commondityid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.ShortMail), global::GSToGC.ShortMail.Parser, new[]{ "Mailid", "MailType", "MailTitle", "MailState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.DelAndSortMail), global::GSToGC.DelAndSortMail.Parser, new[]{ "Msgid", "Mailid", "MailidDel", "Sort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.MailInfo), global::GSToGC.MailInfo.Parser, new[]{ "Msgid", "Mailid", "Mailcontent", "Sender", "CreateTime", "Mailgift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMailList), global::GSToGC.NotifyMailList.Parser, new[]{ "Msgid", "MailList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GoodsCfgInfo), global::GSToGC.GoodsCfgInfo.Parser, new[]{ "Goodid", "Consume", "CfgType" }, null, new[]{ typeof(global::GSToGC.GoodsCfgInfo.Types.CfgType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GoodsCfgInfo.Types.Consume), global::GSToGC.GoodsCfgInfo.Types.Consume.Parser, new[]{ "Consumetype", "Price" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GoodsBuyCfgInfo), global::GSToGC.GoodsBuyCfgInfo.Parser, new[]{ "Msgid", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroAttributes), global::GSToGC.HeroAttributes.Parser, new[]{ "Msgid", "Guid", "PlayerSpeed", "AttackInterval", "AttackRange", "ResurgenceTime", "PhysicAttack", "SpellsAttack", "PhysicDef", "SpellsDef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroAssist), global::GSToGC.HeroAssist.Parser, new[]{ "Msgid", "Guid", "Assist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleMatcherCount), global::GSToGC.BattleMatcherCount.Parser, new[]{ "Msgid", "Count", "Maxcount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleSpanTime), global::GSToGC.BattleSpanTime.Parser, new[]{ "Msgid", "SpanTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleDelayTime), global::GSToGC.BattleDelayTime.Parser, new[]{ "Msgid", "DelayTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UserBaseUpLv), global::GSToGC.UserBaseUpLv.Parser, new[]{ "Msgid", "Lv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SecondGuideTask), global::GSToGC.SecondGuideTask.Parser, new[]{ "Msgid", "Taskinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SecondGuideTask.Types.task_info), global::GSToGC.SecondGuideTask.Types.task_info.Parser, new[]{ "Taskid", "Num" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GameTips), global::GSToGC.GameTips.Parser, new[]{ "Msgid", "Errocode", "Campid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUserReturnBattleRoom), global::GSToGC.NotifyUserReturnBattleRoom.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBattleHeroInfo), global::GSToGC.BroadcastBattleHeroInfo.Parser, new[]{ "Msgid", "Heroinfo", "Goodsinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo), global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo.Parser, new[]{ "Guid", "Nickname", "Level", "Deadtimes", "Campid", "Headid", "Hp", "Mp", "Pos", "Masterguid", "Kills", "Assist", "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo), global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo.Parser, new[]{ "Index", "Id" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideLastStep), global::GSToGC.GuideLastStep.Parser, new[]{ "Msgid", "IfComp", "Stepid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUserCLDays), global::GSToGC.NotifyUserCLDays.Parser, new[]{ "Msgid", "Month", "Today", "TotalCldays", "Cldays", "IsTodayCan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GameNotice), global::GSToGC.GameNotice.Parser, new[]{ "Msgid", "Notice" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GameNotice.Types.Notice), global::GSToGC.GameNotice.Types.Notice.Parser, new[]{ "Title", "Flag", "Status", "Priority", "Notice_" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GuideSteps), global::GSToGC.GuideSteps.Parser, new[]{ "Msgid", "Guid", "Type", "IfComp", "Steps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.PingRet), global::GSToGC.PingRet.Parser, new[]{ "Msgid", "Time", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyQueryNickNameRet), global::GSToGC.NotifyQueryNickNameRet.Parser, new[]{ "Msgid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo), global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo.Parser, new[]{ "Nickname", "Headid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SNSInfo), global::GSToGC.SNSInfo.Parser, new[]{ "Type", "Nickname", "Headid", "Status", "Guididx", "Viplv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUserSNSList), global::GSToGC.NotifyUserSNSList.Parser, new[]{ "Msgnum", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyBattleManagerChange), global::GSToGC.NotifyBattleManagerChange.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyBeAddFriendMs), global::GSToGC.NotifyBeAddFriendMs.Parser, new[]{ "Msgnum", "Sendnickname", "Recnickname", "SdnderGuididx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMsgFromUser), global::GSToGC.NotifyMsgFromUser.Parser, new[]{ "Msgnum", "Guididx", "Nickname", "Headid", "Chatstr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyUserSNSListChange), global::GSToGC.NotifyUserSNSListChange.Parser, new[]{ "Msgnum", "Guididx", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UserBeInvitedToBattle), global::GSToGC.UserBeInvitedToBattle.Parser, new[]{ "Msgnum", "Battleid", "Pwd", "Invitor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyAFPData), global::GSToGC.NotifyAFPData.Parser, new[]{ "Msgnum", "Guid", "Info" }, null, new[]{ typeof(global::GSToGC.NotifyAFPData.Types.EnumFpType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyAFPData.Types.FPInfo), global::GSToGC.NotifyAFPData.Types.FPInfo.Parser, new[]{ "Type", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UserBaseInfo), global::GSToGC.UserBaseInfo.Parser, new[]{ "Msgid", "Guid", "Name", "Nickname", "Headid", "Sex", "Curscore", "Curdiamoand", "Curgold", "Mapid", "Ifreconnect", "Battleid", "Level", "VipLevel", "VipScore", "CurExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySystemAnnounce), global::GSToGC.NotifySystemAnnounce.Parser, new[]{ "Msgid", "Type", "Announce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NetClash), global::GSToGC.NetClash.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.WarningToSelectHero), global::GSToGC.WarningToSelectHero.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelLeading), global::GSToGC.NotifySkillModelLeading.Parser, new[]{ "Msgid", "Guid", "Effectid", "Uniqueid", "Targuid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.AskRet), global::GSToGC.AskRet.Parser, new[]{ "Msgid", "Askid", "Errorcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyCSHeroList), global::GSToGC.NotifyCSHeroList.Parser, new[]{ "Msgid", "Herocfg" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyCSHeroList.Types.HeroListCfg), global::GSToGC.NotifyCSHeroList.Types.HeroListCfg.Parser, new[]{ "Heroid", "ExpiredTime", "IfFree" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroList), global::GSToGC.HeroList.Parser, new[]{ "Msgid", "Heroid", "TimeDiff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleBaseInfo), global::GSToGC.BattleBaseInfo.Parser, new[]{ "Msgid", "Battleid", "Mapid", "IfReconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RoomBaseInfo), global::GSToGC.RoomBaseInfo.Parser, new[]{ "Msgid", "Roomid", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleSeatPosInfo), global::GSToGC.BattleSeatPosInfo.Parser, new[]{ "Msgid", "Posinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleSeatPosInfo.Types.PosInfo), global::GSToGC.BattleSeatPosInfo.Types.PosInfo.Parser, new[]{ "Pos", "Guid", "Nickname", "Ifmaster", "Ifready", "Headid", "Gold" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleStateChange), global::GSToGC.BattleStateChange.Parser, new[]{ "Msgid", "State", "Statetimeleft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CurBattleChange), global::GSToGC.CurBattleChange.Parser, new[]{ "Msgid", "Ssid", "Battleid", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.Pos), global::GSToGC.Pos.Parser, new[]{ "X", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.Dir), global::GSToGC.Dir.Parser, new[]{ "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GOAppear), global::GSToGC.GOAppear.Parser, new[]{ "Msgid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GOAppear.Types.AppearInfo), global::GSToGC.GOAppear.Types.AppearInfo.Parser, new[]{ "Masterguid", "Objguid", "Camp", "Pos", "Dir", "Hp", "Mp", "ObjType", "ObjTypeId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.DisappearInfo), global::GSToGC.DisappearInfo.Parser, new[]{ "Msgid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.FreeState), global::GSToGC.FreeState.Parser, new[]{ "Msgid", "Objguid", "Pos", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RunningState), global::GSToGC.RunningState.Parser, new[]{ "Msgid", "Objguid", "Pos", "Dir", "Movespeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.PrepareSkillState), global::GSToGC.PrepareSkillState.Parser, new[]{ "Msgid", "Objguid", "Skillid", "Pos", "Dir", "Targuid", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.ReleasingSkillState), global::GSToGC.ReleasingSkillState.Parser, new[]{ "Msgid", "Objguid", "Skillid", "Pos", "Dir", "Targuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UsingSkillState), global::GSToGC.UsingSkillState.Parser, new[]{ "Msgid", "Objguid", "Skillid", "Pos", "Dir", "Targuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.LastingSkillState), global::GSToGC.LastingSkillState.Parser, new[]{ "Msgid", "Objguid", "Skillid", "Pos", "Dir", "Targuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.DeadState), global::GSToGC.DeadState.Parser, new[]{ "Msgid", "Objguid", "Pos", "Dir", "Spot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyGoodsInfo), global::GSToGC.NotifyGoodsInfo.Parser, new[]{ "Msgid", "Guid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo), global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo.Parser, new[]{ "Num", "Pos", "IfComposed", "Tyepid", "State", "Statetime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleLoadingState), global::GSToGC.BattleLoadingState.Parser, new[]{ "Msgid", "Guid", "Loadper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroPosInfo), global::GSToGC.HeroPosInfo.Parser, new[]{ "Pos", "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroInfo), global::GSToGC.HeroInfo.Parser, new[]{ "Msgid", "Heroposinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.ChatInRoom), global::GSToGC.ChatInRoom.Parser, new[]{ "Msgid", "Pos", "Chat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SkillHitTar), global::GSToGC.SkillHitTar.Parser, new[]{ "Msgid", "Guid", "Skillid", "Targuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HPChange), global::GSToGC.HPChange.Parser, new[]{ "Msgid", "Guid", "Hp", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.MpChange), global::GSToGC.MpChange.Parser, new[]{ "Msgid", "Guid", "Mp", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.TryToChooseHero), global::GSToGC.TryToChooseHero.Parser, new[]{ "Msgid", "Pos", "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyChooseHeroTimeEnd), global::GSToGC.NotifyChooseHeroTimeEnd.Parser, new[]{ "Msgid", "Heroposinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SkillEntityInfo), global::GSToGC.SkillEntityInfo.Parser, new[]{ "Msgid", "Guid", "Skillid", "Dir", "Targuid", "Uniqueid", "Tardir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.FPInfo), global::GSToGC.FPInfo.Parser, new[]{ "Msgid", "Guid", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHPInfo), global::GSToGC.NotifyHPInfo.Parser, new[]{ "Msgid", "Hpinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHPInfo.Types.HPInfo), global::GSToGC.NotifyHPInfo.Types.HPInfo.Parser, new[]{ "Guid", "Curhp", "Maxhp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMPInfo), global::GSToGC.NotifyMPInfo.Parser, new[]{ "Msgid", "Mpinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyMPInfo.Types.MPInfo), global::GSToGC.NotifyMPInfo.Types.MPInfo.Parser, new[]{ "Guid", "Curmp", "Maxmp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHeroInfo), global::GSToGC.NotifyHeroInfo.Parser, new[]{ "Msgid", "Guid", "Level", "Exp", "Fury", "Absorb1", "Absorb2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillInfo), global::GSToGC.NotifySkillInfo.Parser, new[]{ "Msgid", "Guid", "Skillslot", "Skillid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BattleFinish), global::GSToGC.BattleFinish.Parser, new[]{ "Msgid", "Bulidguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.Exp), global::GSToGC.Exp.Parser, new[]{ "Msgid", "Guid", "Exp_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.LevelInfo), global::GSToGC.LevelInfo.Parser, new[]{ "Msgid", "Guid", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.AbsorbBegin), global::GSToGC.AbsorbBegin.Parser, new[]{ "Msgid", "Guid", "Monsterguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.AbsorbRes), global::GSToGC.AbsorbRes.Parser, new[]{ "Msgid", "Guid", "Res", "Absorb1", "Absorb2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CancelAbsorb), global::GSToGC.CancelAbsorb.Parser, new[]{ "Msgid", "Monsterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.UserGameInfo), global::GSToGC.UserGameInfo.Parser, new[]{ "Msgid", "Headid", "Nickname", "Level", "Upgradeexp", "Curexp", "Totalgameinns", "Totalwintimes", "Herokills", "Destorybuildings", "Deadtimes", "TotalAchnum", "Achnum", "Vipscore", "Assistnum", "Ladderscore", "Guildname", "ExpAdtime", "GoldAddtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroKills), global::GSToGC.HeroKills.Parser, new[]{ "Msgid", "Guid", "Kills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CurDeadTimes), global::GSToGC.CurDeadTimes.Parser, new[]{ "Msgid", "Objguid", "Deadtimes", "KillerCamp", "Reasonheroguid", "IfAced", "Camp", "Herostate", "Herotitle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CurCP), global::GSToGC.CurCP.Parser, new[]{ "Msgid", "Targetguid", "PersonCp", "TeamCp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CurAtkSpeed), global::GSToGC.CurAtkSpeed.Parser, new[]{ "Msgid", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CurAtkSpeed.Types.SpeedInfo), global::GSToGC.CurAtkSpeed.Types.SpeedInfo.Parser, new[]{ "Guid", "Speed" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.FuryVal), global::GSToGC.FuryVal.Parser, new[]{ "Msgid", "Guid", "Fury" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.FuryState), global::GSToGC.FuryState.Parser, new[]{ "Msgid", "Guid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyHeroReborn), global::GSToGC.NotifyHeroReborn.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RebornTimes), global::GSToGC.RebornTimes.Parser, new[]{ "Msgid", "Masterguid", "Sendtimes", "Gold", "RemainTimes", "RebornTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RebornSuccess), global::GSToGC.RebornSuccess.Parser, new[]{ "Msgid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.PersonCPChange), global::GSToGC.PersonCPChange.Parser, new[]{ "Msgid", "Guid", "Cp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBatteleRes), global::GSToGC.BroadcastBatteleRes.Parser, new[]{ "Msgid", "Ifwin", "Resinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBatteleRes.Types.ResInfo), global::GSToGC.BroadcastBatteleRes.Types.ResInfo.Parser, new[]{ "Objguid", "Heroid", "Nickname", "Curlevel", "Killtimes", "Deadtimes", "Asstimes", "Totalcp", "Lasthit", "Camgpid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBattelePersonalRes), global::GSToGC.BroadcastBattelePersonalRes.Parser, new[]{ "Msgid", "GotGold", "OldLv", "OldExp", "CurLv", "CurExp", "GotExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BroadcastBuildingDestory), global::GSToGC.BroadcastBuildingDestory.Parser, new[]{ "Msgid", "Buildingguid", "BuildingCamp", "KillerGuid", "KillerCamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HeroMoveInfo), global::GSToGC.HeroMoveInfo.Parser, new[]{ "Msgid", "Guid", "Dir", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.PlayFinishVedio), global::GSToGC.PlayFinishVedio.Parser, new[]{ "Msgid", "Wincamp", "Losercamp", "Mapid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.LeaveBattleSuccess), global::GSToGC.LeaveBattleSuccess.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BornSoler), global::GSToGC.BornSoler.Parser, new[]{ "Msgid", "Type", "Camp", "Pos", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SkillEnd), global::GSToGC.SkillEnd.Parser, new[]{ "Msgid", "Guid", "Skillid", "Targuid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.AltarBSIco), global::GSToGC.AltarBSIco.Parser, new[]{ "Msgid", "Index", "Type", "Optype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GOReleaseSkill), global::GSToGC.GOReleaseSkill.Parser, new[]{ "Msgid", "Guid", "Skillid", "State", "CurPos", "CurDir", "Targuid", "Tarpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GOSkillCD), global::GSToGC.GOSkillCD.Parser, new[]{ "Msgid", "Guid", "Skillid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.EmitSkill), global::GSToGC.EmitSkill.Parser, new[]{ "Msgid", "Guid", "Effectid", "Uniqueid", "Dir", "Targuid", "Tarpos", "IfAbsorbSkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.DestroyEmitEffect), global::GSToGC.DestroyEmitEffect.Parser, new[]{ "Msgid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.HitTar), global::GSToGC.HitTar.Parser, new[]{ "Msgid", "Guid", "Effectid", "Targuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RangeEffect), global::GSToGC.RangeEffect.Parser, new[]{ "Msgid", "Guid", "Effectid", "Uniqueid", "Dir", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RangeEffectEnd), global::GSToGC.RangeEffectEnd.Parser, new[]{ "Msgid", "Guid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.SummonEffect), global::GSToGC.SummonEffect.Parser, new[]{ "Msgid", "Guid", "Effectid", "Npcguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.BuffEffect), global::GSToGC.BuffEffect.Parser, new[]{ "Msgid", "Guid", "Effectid", "Uniqueid", "Targuid", "Time", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySummonLifeTime), global::GSToGC.NotifySummonLifeTime.Parser, new[]{ "Msgid", "Guid", "Lifetime", "Resttime", "Pos", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelStartForceMove), global::GSToGC.NotifySkillModelStartForceMove.Parser, new[]{ "Msgid", "Guid", "Effectid", "Dir", "Pod", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelStartForceMoveStop), global::GSToGC.NotifySkillModelStartForceMoveStop.Parser, new[]{ "Msgid", "Guid", "Effectid", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelStartForceMoveTeleport), global::GSToGC.NotifySkillModelStartForceMoveTeleport.Parser, new[]{ "Msgid", "Guid", "Effectid", "Beginpos", "Begindir", "Tarpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelPurification), global::GSToGC.NotifySkillModelPurification.Parser, new[]{ "Msgid", "Guid", "Targetguid", "Effectid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelStartLink), global::GSToGC.NotifySkillModelStartLink.Parser, new[]{ "Msgid", "Guid", "Beginpos", "Targetguid", "Effectid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelStopLink), global::GSToGC.NotifySkillModelStopLink.Parser, new[]{ "Msgid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyPassitiveSkillRelease), global::GSToGC.NotifyPassitiveSkillRelease.Parser, new[]{ "Msgid", "Guid", "Skillid", "TimeLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyPassitiveSkillLoad), global::GSToGC.NotifyPassitiveSkillLoad.Parser, new[]{ "Msgid", "Guid", "Skillid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyPassitiveSkillUnLoad), global::GSToGC.NotifyPassitiveSkillUnLoad.Parser, new[]{ "Msgid", "Guid", "Skillid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillModelEmitTurn), global::GSToGC.NotifySkillModelEmitTurn.Parser, new[]{ "Msgid", "Guid", "Effectid", "Progectid", "Pos", "Dir", "Targuid", "Tarpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyBornObj), global::GSToGC.NotifyBornObj.Parser, new[]{ "Msgid", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyReconnectInfo), global::GSToGC.NotifyReconnectInfo.Parser, new[]{ "Msgid", "Battlestate", "RemainTimes", "Ifob", "Reconnectinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo), global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo.Parser, new[]{ "Pos", "Guid", "Nickname", "Heroid", "Ifselected" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyOBReturnBattleRoom), global::GSToGC.NotifyOBReturnBattleRoom.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyOBAppear), global::GSToGC.NotifyOBAppear.Parser, new[]{ "Msgid", "Obid", "Camp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyKillNPC), global::GSToGC.NotifyKillNPC.Parser, new[]{ "Msgid", "Guid", "Killnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyAltarBSIco), global::GSToGC.NotifyAltarBSIco.Parser, new[]{ "Msgid", "Altarid", "Objtype", "Optype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifySkillUpLv), global::GSToGC.NotifySkillUpLv.Parser, new[]{ "Msgid", "Guid", "Skillpos", "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyBlastHurt), global::GSToGC.NotifyBlastHurt.Parser, new[]{ "Msgid", "Guid", "Blasthp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyGameObjectReliveState), global::GSToGC.NotifyGameObjectReliveState.Parser, new[]{ "Msgid", "Guid", "Pos", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyCurGold), global::GSToGC.NotifyCurGold.Parser, new[]{ "Msgid", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.NotifyCurDiamond), global::GSToGC.NotifyCurDiamond.Parser, new[]{ "Msgid", "Diamond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GetloginRewardSuccess), global::GSToGC.GetloginRewardSuccess.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GetloginReward_Skin), global::GSToGC.GetloginReward_Skin.Parser, new[]{ "Msgid", "Skinid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GetloginReward_Rune), global::GSToGC.GetloginReward_Rune.Parser, new[]{ "Msgid", "Runeid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.GetloginReward_Hero), global::GSToGC.GetloginReward_Hero.Parser, new[]{ "Msgid", "Heroid", "ExpiredTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CanInviteFriends), global::GSToGC.CanInviteFriends.Parser, new[]{ "Msgid", "Friends" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.CanInviteFriends.Types.Friends), global::GSToGC.CanInviteFriends.Types.Friends.Parser, new[]{ "HeaderId", "Nickname", "Guididx" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.LastHitNum), global::GSToGC.LastHitNum.Parser, new[]{ "Msgid", "Guid", "Lhnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.RoomInfo), global::GSToGC.RoomInfo.Parser, new[]{ "RoomId", "IfPwd", "MapId", "Master", "CurUserCount", "MaxUserCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GSToGC.AskRoomListRet), global::GSToGC.AskRoomListRet.Parser, new[]{ "Msgid", "Roomlist" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("eMsgToGCFromGS_Begin")] EMsgToGcfromGsBegin = 0,
    [pbr::OriginalName("eMsgToGCFromGS_GCAskPingRet")] EMsgToGcfromGsGcaskPingRet = 1,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserBaseInfo")] EMsgToGcfromGsNotifyUserBaseInfo = 2,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySystemAnnounce")] EMsgToGcfromGsNotifySystemAnnounce = 3,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyNetClash")] EMsgToGcfromGsNotifyNetClash = 4,
    [pbr::OriginalName("eMsgToGCFromGS_GCAskRet")] EMsgToGcfromGsGcaskRet = 5,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroList")] EMsgToGcfromGsNotifyHeroList = 7,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleBaseInfo")] EMsgToGcfromGsNotifyBattleBaseInfo = 8,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleSeatPosInfo")] EMsgToGcfromGsNotifyBattleSeatPosInfo = 9,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleStateChange")] EMsgToGcfromGsNotifyBattleStateChange = 10,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCurBattleChange")] EMsgToGcfromGsNotifyCurBattleChange = 11,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectAppear")] EMsgToGcfromGsNotifyGameObjectAppear = 12,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectDisappear")] EMsgToGcfromGsNotifyGameObjectDisappear = 13,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectFreeState")] EMsgToGcfromGsNotifyGameObjectFreeState = 14,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectRunState")] EMsgToGcfromGsNotifyGameObjectRunState = 15,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectPrepareSkillState")] EMsgToGcfromGsNotifyGameObjectPrepareSkillState = 16,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectReleaseSkillState")] EMsgToGcfromGsNotifyGameObjectReleaseSkillState = 17,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectDeadState")] EMsgToGcfromGsNotifyGameObjectDeadState = 18,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGoodsInf")] EMsgToGcfromGsNotifyGoodsInf = 19,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleLoadingState")] EMsgToGcfromGsNotifyBattleLoadingState = 20,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleHeroInfo")] EMsgToGcfromGsNotifyBattleHeroInfo = 21,
    [pbr::OriginalName("eMsgToGCFromGS_BagRunesInfoChange")] EMsgToGcfromGsBagRunesInfoChange = 22,
    [pbr::OriginalName("eMsgToGCFromGS_ExchangeGold")] EMsgToGcfromGsExchangeGold = 23,
    [pbr::OriginalName("eMsgToGCFromGS_ChatInRoom")] EMsgToGcfromGsChatInRoom = 24,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillHitTarget")] EMsgToGcfromGsNotifySkillHitTarget = 25,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHPChange")] EMsgToGcfromGsNotifyHpchange = 26,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMPChange")] EMsgToGcfromGsNotifyMpchange = 27,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyTryToChooseHero")] EMsgToGcfromGsNotifyTryToChooseHero = 28,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyChooseHeroTimeEnd")] EMsgToGcfromGsNotifyChooseHeroTimeEnd = 29,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillEntityInfo")] EMsgToGcfromGsNotifySkillEntityInfo = 30,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyFightPropertyInfo")] EMsgToGcfromGsNotifyFightPropertyInfo = 31,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHPInfo")] EMsgToGcfromGsNotifyHpinfo = 34,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMPInfo")] EMsgToGcfromGsNotifyMpinfo = 35,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroInfo")] EMsgToGcfromGsNotifyHeroInfo = 36,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBuffInfo")] EMsgToGcfromGsNotifyBuffInfo = 37,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBuffRemove")] EMsgToGcfromGsNotifyBuffRemove = 38,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillInfo")] EMsgToGcfromGsNotifySkillInfo = 39,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleFinish")] EMsgToGcfromGsNotifyBattleFinish = 40,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyExpInfo")] EMsgToGcfromGsNotifyExpInfo = 41,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroLevelInfo")] EMsgToGcfromGsNotifyHeroLevelInfo = 42,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyAbsorbBegin")] EMsgToGcfromGsNotifyAbsorbBegin = 43,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyAbsorbMonsterResult")] EMsgToGcfromGsNotifyAbsorbMonsterResult = 44,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCancelAbsorbSkill")] EMsgToGcfromGsNotifyCancelAbsorbSkill = 45,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserGameInfo")] EMsgToGcfromGsNotifyUserGameInfo = 46,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroKills")] EMsgToGcfromGsNotifyHeroKills = 47,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCurDeadTimes")] EMsgToGcfromGsNotifyCurDeadTimes = 48,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCurCP")] EMsgToGcfromGsNotifyCurCp = 49,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCurAtkSpeed")] EMsgToGcfromGsNotifyCurAtkSpeed = 50,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyFuryValue")] EMsgToGcfromGsNotifyFuryValue = 51,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyFuryState")] EMsgToGcfromGsNotifyFuryState = 52,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroRebornTimes")] EMsgToGcfromGsNotifyHeroRebornTimes = 53,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBuyRebornSuccess")] EMsgToGcfromGsNotifyBuyRebornSuccess = 54,
    [pbr::OriginalName("eMsgToGCFromGS_BroadcastBattleHeroInfo")] EMsgToGcfromGsBroadcastBattleHeroInfo = 55,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyPersonalCPChange")] EMsgToGcfromGsNotifyPersonalCpchange = 56,
    [pbr::OriginalName("eMsgToGCFromGS_BroadCurBattleResult")] EMsgToGcfromGsBroadCurBattleResult = 57,
    [pbr::OriginalName("eMsgToGCFromGS_BroadBuildingDestroyByWho")] EMsgToGcfromGsBroadBuildingDestroyByWho = 58,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyVoipRoomId")] EMsgToGcfromGsNotifyVoipRoomId = 59,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroDisplacementInfo")] EMsgToGcfromGsNotifyHeroDisplacementInfo = 60,
    [pbr::OriginalName("eMsgToGCFromGS_BroadcastPlayFinishVedio")] EMsgToGcfromGsBroadcastPlayFinishVedio = 61,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyLeaveBattleSuccess")] EMsgToGcfromGsNotifyLeaveBattleSuccess = 62,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBornSolder")] EMsgToGcfromGsNotifyBornSolder = 63,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillEnd")] EMsgToGcfromGsNotifySkillEnd = 64,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyAltarBSIco")] EMsgToGcfromGsNotifyAltarBsico = 65,
    [pbr::OriginalName("eMsgToGCFromGS_WarningToSelectHero")] EMsgToGcfromGsWarningToSelectHero = 66,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectReleaseSkill")] EMsgToGcfromGsNotifyGameObjectReleaseSkill = 67,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectSkillCD")] EMsgToGcfromGsNotifyGameObjectSkillCd = 68,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelEmit")] EMsgToGcfromGsNotifySkillModelEmit = 69,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelEmitDestroy")] EMsgToGcfromGsNotifySkillModelEmitDestroy = 70,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelHitTarget")] EMsgToGcfromGsNotifySkillModelHitTarget = 71,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelRange")] EMsgToGcfromGsNotifySkillModelRange = 72,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelRangeEnd")] EMsgToGcfromGsNotifySkillModelRangeEnd = 73,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelLeading")] EMsgToGcfromGsNotifySkillModelLeading = 74,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelSummonEffect")] EMsgToGcfromGsNotifySkillModelSummonEffect = 75,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelBufEffect")] EMsgToGcfromGsNotifySkillModelBufEffect = 76,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySummonLifeTime")] EMsgToGcfromGsNotifySummonLifeTime = 77,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelStartForceMove")] EMsgToGcfromGsNotifySkillModelStartForceMove = 78,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelStartForceMoveStop")] EMsgToGcfromGsNotifySkillModelStartForceMoveStop = 79,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelStartForceMoveTeleport")] EMsgToGcfromGsNotifySkillModelStartForceMoveTeleport = 80,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyPassitiveSkillRelease")] EMsgToGcfromGsNotifyPassitiveSkillRelease = 81,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyPassitiveSkillLoad")] EMsgToGcfromGsNotifyPassitiveSkillLoad = 82,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyPassitiveSkillUnload")] EMsgToGcfromGsNotifyPassitiveSkillUnload = 83,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelEmitTurn")] EMsgToGcfromGsNotifySkillModelEmitTurn = 84,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyAFPData")] EMsgToGcfromGsNotifyAfpdata = 85,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleManagerChange")] EMsgToGcfromGsNotifyBattleManagerChange = 86,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBornObj")] EMsgToGcfromGsNotifyBornObj = 87,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyReconnectInfo")] EMsgToGcfromGsNotifyReconnectInfo = 88,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroGoodsInfo")] EMsgToGcfromGsNotifyHeroGoodsInfo = 89,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyOBReturnBattleRoom")] EMsgToGcfromGsNotifyObreturnBattleRoom = 90,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserReturnBattleRoom")] EMsgToGcfromGsNotifyUserReturnBattleRoom = 91,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleAllUserInfo")] EMsgToGcfromGsNotifyBattleAllUserInfo = 92,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserBeAddedFirendInfo")] EMsgToGcfromGsNotifyUserBeAddedFirendInfo = 93,
    [pbr::OriginalName("eMsgToGCFromCS_NotifyDefaultHeros")] EMsgToGcfromCsNotifyDefaultHeros = 94,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyOBAppear")] EMsgToGcfromGsNotifyObappear = 95,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyKillNPC")] EMsgToGcfromGsNotifyKillNpc = 96,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyAltarBSOk")] EMsgToGcfromGsNotifyAltarBsok = 97,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillUpLv")] EMsgToGcfromGsNotifySkillUpLv = 98,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserSNSList")] EMsgToGcfromGsNotifyUserSnslist = 99,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserSNSListChange")] EMsgToGcfromGsNotifyUserSnslistChange = 100,
    [pbr::OriginalName("eMsgToGCFromGS_UserBeInvitedToBattle")] EMsgToGcfromGsUserBeInvitedToBattle = 101,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMsgFromUser")] EMsgToGcfromGsNotifyMsgFromUser = 102,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBeAddFriendMsg")] EMsgToGcfromGsNotifyBeAddFriendMsg = 103,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyQueryNickNameRet")] EMsgToGcfromGsNotifyQueryNickNameRet = 104,
    [pbr::OriginalName("eMsgToGCFromCS_NotifyGuideLastComStep")] EMsgToGcfromCsNotifyGuideLastComStep = 106,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBlastHurt")] EMsgToGcfromGsNotifyBlastHurt = 107,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroReborn")] EMsgToGcfromGsNotifyHeroReborn = 110,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectReliveState")] EMsgToGcfromGsNotifyGameObjectReliveState = 111,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserGuideSetups")] EMsgToGcfromGsNotifyUserGuideSetups = 112,
    [pbr::OriginalName("eMsgToGCFromBS_AskGateAddressRet")] EMsgToGcfromBsAskGateAddressRet = 113,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserName")] EMsgToGcfromGsNotifyUserName = 114,
    [pbr::OriginalName("eMsgToGCFromCS_NotifyReconnectInfo")] EMsgToGcfromCsNotifyReconnectInfo = 115,
    [pbr::OriginalName("eMsgToSSFromCS_NotifyBornObj")] EMsgToSsfromCsNotifyBornObj = 116,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyNotice")] EMsgToGcfromGsNotifyNotice = 117,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGuideTips")] EMsgToGcfromGsNotifyGuideTips = 118,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserCLDays")] EMsgToGcfromGsNotifyUserCldays = 119,
    [pbr::OriginalName("eMsgToGCFromGs_NotifySecondaryGuideTask")] EMsgToGcfromGsNotifySecondaryGuideTask = 121,
    [pbr::OriginalName("eMsgToGCFromGs_NotifyCurGold")] EMsgToGcfromGsNotifyCurGold = 122,
    [pbr::OriginalName("eMsgToGCFromGs_NotifyCurDiamond")] EMsgToGcfromGsNotifyCurDiamond = 123,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGetloginRewardSuccess")] EMsgToGcfromGsNotifyGetloginRewardSuccess = 124,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGetloginReward_Skin")] EMsgToGcfromGsNotifyGetloginRewardSkin = 125,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGetloginReward_Rune")] EMsgToGcfromGsNotifyGetloginRewardRune = 126,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGetloginReward_Hero")] EMsgToGcfromGsNotifyGetloginRewardHero = 127,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserBaseUpLv")] EMsgToGcfromGsNotifyUserBaseUpLv = 128,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleSpanTime")] EMsgToGcfromGsNotifyBattleSpanTime = 129,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleMatherCount")] EMsgToGcfromGsNotifyBattleMatherCount = 130,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroAssist")] EMsgToGcfromGsNotifyHeroAssist = 131,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyHeroAttributes")] EMsgToGcfromGsNotifyHeroAttributes = 132,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGoodsCfgInfo")] EMsgToGcfromGsNotifyGoodsCfgInfo = 133,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserMail")] EMsgToGcfromGsNotifyUserMail = 134,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMailInfo")] EMsgToGcfromGsNotifyMailInfo = 135,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyIfMailDelAndSort")] EMsgToGcfromGsNotifyIfMailDelAndSort = 136,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyRoomBaseInfo")] EMsgToGcfromGsNotifyRoomBaseInfo = 140,
    [pbr::OriginalName("eMsgToGCFromBS_NotifyCanInviteFriends")] EMsgToGcfromBsNotifyCanInviteFriends = 141,
    [pbr::OriginalName("eMsgToGCFromBS_NotifyCurLastHitNum")] EMsgToGcfromBsNotifyCurLastHitNum = 142,
    [pbr::OriginalName("eMsgToGCFromGS_AskRoomListRet")] EMsgToGcfromGsAskRoomListRet = 143,
    [pbr::OriginalName("eMsgToGCFromBS_NotifyHerosInfo")] EMsgToGcfromBsNotifyHerosInfo = 144,
    [pbr::OriginalName("eMsgToGCFromBS_NotifyGoodsExpired")] EMsgToGcfromBsNotifyGoodsExpired = 145,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelPurification")] EMsgToGcfromGsNotifySkillModelPurification = 220,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyCSHeroList")] EMsgToGcfromGsNotifyCsheroList = 221,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMatchTeamBaseInfo")] EMsgToGcfromGsNotifyMatchTeamBaseInfo = 222,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMatchTeamPlayerInfo")] EMsgToGcfromGsNotifyMatchTeamPlayerInfo = 223,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMatchTeamSwitch")] EMsgToGcfromGsNotifyMatchTeamSwitch = 224,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMatchInviteJoin")] EMsgToGcfromGsNotifyMatchInviteJoin = 225,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGetNewCommodity")] EMsgToGcfromGsNotifyGetNewCommodity = 226,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyRemoveCommodity")] EMsgToGcfromGsNotifyRemoveCommodity = 227,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyRunesList")] EMsgToGcfromGsNotifyRunesList = 228,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyNewNickname")] EMsgToGcfromGsNotifyNewNickname = 229,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyOneMatchNeedOne")] EMsgToGcfromGsNotifyOneMatchNeedOne = 230,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyNewHeaderid")] EMsgToGcfromGsNotifyNewHeaderid = 231,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyUserLvInfo")] EMsgToGcfromGsNotifyUserLvInfo = 232,
    [pbr::OriginalName("eMsgToGCFromGS_BroadBattlePersonalResult")] EMsgToGcfromGsBroadBattlePersonalResult = 233,
    [pbr::OriginalName("eMsgToGCFromGS_UnloadRune")] EMsgToGcfromGsUnloadRune = 234,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyBattleDelayTime")] EMsgToGcfromGsNotifyBattleDelayTime = 235,
    [pbr::OriginalName("eMsgToGCFromGS_RecoinRuneRet")] EMsgToGcfromGsRecoinRuneRet = 236,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyOtherItemInfo")] EMsgToGcfromGsNotifyOtherItemInfo = 237,
    [pbr::OriginalName("eMsgToGCFromCS_NotifyIsOnSS")] EMsgToGcfromCsNotifyIsOnSs = 238,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectUsingSkillState")] EMsgToGcfromGsNotifyGameObjectUsingSkillState = 240,
    [pbr::OriginalName("eMsgToGCFromGS_NotifyGameObjectLastingSkillState")] EMsgToGcfromGsNotifyGameObjectLastingSkillState = 241,
    /// <summary>
    ///新手引导 300-350
    /// </summary>
    [pbr::OriginalName("eMsgToGCFromGS_GuideResp")] EMsgToGcfromGsGuideResp = 300,
    [pbr::OriginalName("eMsgToGCFromCS_GuideKillsInfo")] EMsgToGcfromCsGuideKillsInfo = 301,
    [pbr::OriginalName("eMsgToGCFromGS_GuideAward")] EMsgToGcfromGsGuideAward = 302,
    /// <summary>
    ///任务系统 400-450
    /// </summary>
    [pbr::OriginalName("eMsgToGCFromGS_UpdateAllTask")] EMsgToGcfromGsUpdateAllTask = 400,
    [pbr::OriginalName("eMsgToGCFromGS_UpdateAllDailyTask")] EMsgToGcfromGsUpdateAllDailyTask = 401,
    [pbr::OriginalName("eMsgToGCFromGS_AddOneTask")] EMsgToGcfromGsAddOneTask = 402,
    [pbr::OriginalName("eMsgToGCFromGS_UpdateOneTask")] EMsgToGcfromGsUpdateOneTask = 403,
    [pbr::OriginalName("eMsgToGCFromGS_DelOneTask")] EMsgToGcfromGsDelOneTask = 404,
    [pbr::OriginalName("eMsgToGCFromGS_RewardsOneTask")] EMsgToGcfromGsRewardsOneTask = 405,
    /// <summary>
    ///技能模块后续 550-600
    /// </summary>
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelStartLink")] EMsgToGcfromGsNotifySkillModelStartLink = 550,
    [pbr::OriginalName("eMsgToGCFromGS_NotifySkillModelStopLink")] EMsgToGcfromGsNotifySkillModelStopLink = 551,
    /// <summary>
    ///邮件返回值601-605
    /// </summary>
    [pbr::OriginalName("eMsgToGCFromGS_NotifyMailRet")] EMsgToGcfromGsNotifyMailRet = 601,
    [pbr::OriginalName("eMsgToGCFromGS_End")] EMsgToGcfromGsEnd = 1000,
  }

  public enum MailType {
    [pbr::OriginalName("mailType_None")] None = 0,
    [pbr::OriginalName("mailType_1")] _1 = 1,
    [pbr::OriginalName("mailType_2")] _2 = 2,
    [pbr::OriginalName("mailType_3")] _3 = 3,
    [pbr::OriginalName("mailType_4")] _4 = 4,
  }

  public enum EMailCurtState {
    [pbr::OriginalName("eMailState_None")] EMailStateNone = 0,
    [pbr::OriginalName("eMailState_New")] EMailStateNew = 1,
    [pbr::OriginalName("eMailState_LookedButNotGotGift")] EMailStateLookedButNotGotGift = 2,
    [pbr::OriginalName("eMailState_Look")] EMailStateLook = 3,
    [pbr::OriginalName("eMailState_Del")] EMailStateDel = 4,
  }

  public enum BattleState {
    [pbr::OriginalName("free")] Free = 0,
    [pbr::OriginalName("waiting")] Waiting = 1,
    [pbr::OriginalName("selecthero")] Selecthero = 2,
    [pbr::OriginalName("loading")] Loading = 3,
    [pbr::OriginalName("playing")] Playing = 4,
    [pbr::OriginalName("finish")] Finish = 5,
  }

  public enum ObjType {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("ObjType_Hero")] Hero = 1,
    [pbr::OriginalName("ObjType_NPC")] Npc = 2,
  }

  public enum HPMPChangeReason {
    [pbr::OriginalName("NormalHurt")] NormalHurt = 0,
    [pbr::OriginalName("BloastHurt")] BloastHurt = 1,
    [pbr::OriginalName("SkillHurt")] SkillHurt = 2,
    [pbr::OriginalName("RecoverHurt")] RecoverHurt = 3,
    [pbr::OriginalName("SkillConsume")] SkillConsume = 4,
    [pbr::OriginalName("BuffEffectReason")] BuffEffectReason = 5,
  }

  public enum SkillState {
    [pbr::OriginalName("sing")] Sing = 0,
    [pbr::OriginalName("prepare")] Prepare = 1,
    [pbr::OriginalName("release")] Release = 2,
    [pbr::OriginalName("end")] End = 3,
  }

  #endregion

  #region Messages
  public sealed partial class TaskData : pb::IMessage<TaskData> {
    private static readonly pb::MessageParser<TaskData> _parser = new pb::MessageParser<TaskData>(() => new TaskData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData(TaskData other) : this() {
      taskId_ = other.taskId_;
      taskGuid_ = other.taskGuid_;
      taskCurCount_ = other.taskCurCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData Clone() {
      return new TaskData(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "task_guid" field.</summary>
    public const int TaskGuidFieldNumber = 2;
    private uint taskGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskGuid {
      get { return taskGuid_; }
      set {
        taskGuid_ = value;
      }
    }

    /// <summary>Field number for the "task_curCount" field.</summary>
    public const int TaskCurCountFieldNumber = 3;
    private uint taskCurCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskCurCount {
      get { return taskCurCount_; }
      set {
        taskCurCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (TaskGuid != other.TaskGuid) return false;
      if (TaskCurCount != other.TaskCurCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (TaskGuid != 0) hash ^= TaskGuid.GetHashCode();
      if (TaskCurCount != 0) hash ^= TaskCurCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (TaskGuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskGuid);
      }
      if (TaskCurCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskCurCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskGuid);
      }
      if (TaskCurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskCurCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskData other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskGuid != 0) {
        TaskGuid = other.TaskGuid;
      }
      if (other.TaskCurCount != 0) {
        TaskCurCount = other.TaskCurCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskGuid = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskCurCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUpdateAllTask : pb::IMessage<NotifyUpdateAllTask> {
    private static readonly pb::MessageParser<NotifyUpdateAllTask> _parser = new pb::MessageParser<NotifyUpdateAllTask>(() => new NotifyUpdateAllTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUpdateAllTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllTask(NotifyUpdateAllTask other) : this() {
      msgid_ = other.msgid_;
      taskList_ = other.taskList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllTask Clone() {
      return new NotifyUpdateAllTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.TaskData> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.TaskData.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.TaskData> taskList_ = new pbc::RepeatedField<global::GSToGC.TaskData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.TaskData> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUpdateAllTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUpdateAllTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!taskList_.Equals(other.taskList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= taskList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUpdateAllTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      taskList_.Add(other.taskList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUpdateAllDailyTask : pb::IMessage<NotifyUpdateAllDailyTask> {
    private static readonly pb::MessageParser<NotifyUpdateAllDailyTask> _parser = new pb::MessageParser<NotifyUpdateAllDailyTask>(() => new NotifyUpdateAllDailyTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUpdateAllDailyTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllDailyTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllDailyTask(NotifyUpdateAllDailyTask other) : this() {
      msgid_ = other.msgid_;
      taskList_ = other.taskList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateAllDailyTask Clone() {
      return new NotifyUpdateAllDailyTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.TaskData> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.TaskData.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.TaskData> taskList_ = new pbc::RepeatedField<global::GSToGC.TaskData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.TaskData> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUpdateAllDailyTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUpdateAllDailyTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!taskList_.Equals(other.taskList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= taskList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUpdateAllDailyTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      taskList_.Add(other.taskList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyAddOneTask : pb::IMessage<NotifyAddOneTask> {
    private static readonly pb::MessageParser<NotifyAddOneTask> _parser = new pb::MessageParser<NotifyAddOneTask>(() => new NotifyAddOneTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyAddOneTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddOneTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddOneTask(NotifyAddOneTask other) : this() {
      msgid_ = other.msgid_;
      oneTask_ = other.oneTask_ != null ? other.oneTask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddOneTask Clone() {
      return new NotifyAddOneTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "oneTask" field.</summary>
    public const int OneTaskFieldNumber = 2;
    private global::GSToGC.TaskData oneTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.TaskData OneTask {
      get { return oneTask_; }
      set {
        oneTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyAddOneTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyAddOneTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (!object.Equals(OneTask, other.OneTask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (oneTask_ != null) hash ^= OneTask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (oneTask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OneTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (oneTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneTask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyAddOneTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.oneTask_ != null) {
        if (oneTask_ == null) {
          oneTask_ = new global::GSToGC.TaskData();
        }
        OneTask.MergeFrom(other.OneTask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            if (oneTask_ == null) {
              oneTask_ = new global::GSToGC.TaskData();
            }
            input.ReadMessage(oneTask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUpdateOneTask : pb::IMessage<NotifyUpdateOneTask> {
    private static readonly pb::MessageParser<NotifyUpdateOneTask> _parser = new pb::MessageParser<NotifyUpdateOneTask>(() => new NotifyUpdateOneTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUpdateOneTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateOneTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateOneTask(NotifyUpdateOneTask other) : this() {
      msgid_ = other.msgid_;
      oneTask_ = other.oneTask_ != null ? other.oneTask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUpdateOneTask Clone() {
      return new NotifyUpdateOneTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "oneTask" field.</summary>
    public const int OneTaskFieldNumber = 2;
    private global::GSToGC.TaskData oneTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.TaskData OneTask {
      get { return oneTask_; }
      set {
        oneTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUpdateOneTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUpdateOneTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (!object.Equals(OneTask, other.OneTask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (oneTask_ != null) hash ^= OneTask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (oneTask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OneTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (oneTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneTask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUpdateOneTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.oneTask_ != null) {
        if (oneTask_ == null) {
          oneTask_ = new global::GSToGC.TaskData();
        }
        OneTask.MergeFrom(other.OneTask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            if (oneTask_ == null) {
              oneTask_ = new global::GSToGC.TaskData();
            }
            input.ReadMessage(oneTask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyDelOneTask : pb::IMessage<NotifyDelOneTask> {
    private static readonly pb::MessageParser<NotifyDelOneTask> _parser = new pb::MessageParser<NotifyDelOneTask>(() => new NotifyDelOneTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyDelOneTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyDelOneTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyDelOneTask(NotifyDelOneTask other) : this() {
      msgid_ = other.msgid_;
      taskGuid_ = other.taskGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyDelOneTask Clone() {
      return new NotifyDelOneTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "task_guid" field.</summary>
    public const int TaskGuidFieldNumber = 2;
    private uint taskGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskGuid {
      get { return taskGuid_; }
      set {
        taskGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyDelOneTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyDelOneTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (TaskGuid != other.TaskGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (TaskGuid != 0) hash ^= TaskGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (TaskGuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (TaskGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyDelOneTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.TaskGuid != 0) {
        TaskGuid = other.TaskGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            TaskGuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRewardsOneTask : pb::IMessage<NotifyRewardsOneTask> {
    private static readonly pb::MessageParser<NotifyRewardsOneTask> _parser = new pb::MessageParser<NotifyRewardsOneTask>(() => new NotifyRewardsOneTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRewardsOneTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRewardsOneTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRewardsOneTask(NotifyRewardsOneTask other) : this() {
      msgid_ = other.msgid_;
      taskGuid_ = other.taskGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRewardsOneTask Clone() {
      return new NotifyRewardsOneTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "task_guid" field.</summary>
    public const int TaskGuidFieldNumber = 2;
    private uint taskGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskGuid {
      get { return taskGuid_; }
      set {
        taskGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRewardsOneTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRewardsOneTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (TaskGuid != other.TaskGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (TaskGuid != 0) hash ^= TaskGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (TaskGuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (TaskGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRewardsOneTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.TaskGuid != 0) {
        TaskGuid = other.TaskGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            TaskGuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyMailRet
  /// </summary>
  public sealed partial class NotifyMailRet : pb::IMessage<NotifyMailRet> {
    private static readonly pb::MessageParser<NotifyMailRet> _parser = new pb::MessageParser<NotifyMailRet>(() => new NotifyMailRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMailRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailRet(NotifyMailRet other) : this() {
      msgid_ = other.msgid_;
      mailid_ = other.mailid_;
      errcode_ = other.errcode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailRet Clone() {
      return new NotifyMailRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 3;
    private int errcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMailRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMailRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Mailid != other.Mailid) return false;
      if (Errcode != other.Errcode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Mailid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mailid);
      }
      if (Errcode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Errcode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errcode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMailRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mailid = input.ReadInt32();
            break;
          }
          case 24: {
            Errcode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyIsOnSS : pb::IMessage<NotifyIsOnSS> {
    private static readonly pb::MessageParser<NotifyIsOnSS> _parser = new pb::MessageParser<NotifyIsOnSS>(() => new NotifyIsOnSS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyIsOnSS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyIsOnSS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyIsOnSS(NotifyIsOnSS other) : this() {
      msgid_ = other.msgid_;
      ssid_ = other.ssid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyIsOnSS Clone() {
      return new NotifyIsOnSS(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 2;
    private uint ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyIsOnSS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyIsOnSS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Ssid != other.Ssid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Ssid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ssid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ssid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyIsOnSS other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Ssid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyOtherItemInfo : pb::IMessage<NotifyOtherItemInfo> {
    private static readonly pb::MessageParser<NotifyOtherItemInfo> _parser = new pb::MessageParser<NotifyOtherItemInfo>(() => new NotifyOtherItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOtherItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOtherItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOtherItemInfo(NotifyOtherItemInfo other) : this() {
      msgid_ = other.msgid_;
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOtherItemInfo Clone() {
      return new NotifyOtherItemInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyOtherItemInfo.Types.OtherItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyOtherItemInfo.Types.OtherItem.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyOtherItemInfo.Types.OtherItem> item_ = new pbc::RepeatedField<global::GSToGC.NotifyOtherItemInfo.Types.OtherItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyOtherItemInfo.Types.OtherItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyOtherItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyOtherItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyOtherItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyOtherItemInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OtherItem : pb::IMessage<OtherItem> {
        private static readonly pb::MessageParser<OtherItem> _parser = new pb::MessageParser<OtherItem>(() => new OtherItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OtherItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyOtherItemInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OtherItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OtherItem(OtherItem other) : this() {
          itemId_ = other.itemId_;
          itemNum_ = other.itemNum_;
          expiredTime_ = other.expiredTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OtherItem Clone() {
          return new OtherItem(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "item_num" field.</summary>
        public const int ItemNumFieldNumber = 2;
        private uint itemNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemNum {
          get { return itemNum_; }
          set {
            itemNum_ = value;
          }
        }

        /// <summary>Field number for the "expired_time" field.</summary>
        public const int ExpiredTimeFieldNumber = 3;
        private long expiredTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpiredTime {
          get { return expiredTime_; }
          set {
            expiredTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OtherItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OtherItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (ItemNum != other.ItemNum) return false;
          if (ExpiredTime != other.ExpiredTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemId != 0) hash ^= ItemId.GetHashCode();
          if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
          if (ExpiredTime != 0L) hash ^= ExpiredTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (ItemNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemNum);
          }
          if (ExpiredTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(ExpiredTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
          }
          if (ExpiredTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiredTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OtherItem other) {
          if (other == null) {
            return;
          }
          if (other.ItemId != 0) {
            ItemId = other.ItemId;
          }
          if (other.ItemNum != 0) {
            ItemNum = other.ItemNum;
          }
          if (other.ExpiredTime != 0L) {
            ExpiredTime = other.ExpiredTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemNum = input.ReadUInt32();
                break;
              }
              case 24: {
                ExpiredTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RecoinRuneRet : pb::IMessage<RecoinRuneRet> {
    private static readonly pb::MessageParser<RecoinRuneRet> _parser = new pb::MessageParser<RecoinRuneRet>(() => new RecoinRuneRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecoinRuneRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoinRuneRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoinRuneRet(RecoinRuneRet other) : this() {
      msgid_ = other.msgid_;
      runeId_ = other.runeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoinRuneRet Clone() {
      return new RecoinRuneRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "rune_id" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private uint runeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecoinRuneRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecoinRuneRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (RuneId != other.RuneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (RuneId != 0) hash ^= RuneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (RuneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RuneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (RuneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecoinRuneRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.RuneId != 0) {
        RuneId = other.RuneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            RuneId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnloadRune : pb::IMessage<UnloadRune> {
    private static readonly pb::MessageParser<UnloadRune> _parser = new pb::MessageParser<UnloadRune>(() => new UnloadRune());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnloadRune> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnloadRune() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnloadRune(UnloadRune other) : this() {
      msgid_ = other.msgid_;
      page_ = other.page_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnloadRune Clone() {
      return new UnloadRune(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnloadRune);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnloadRune other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Page != other.Page) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnloadRune other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuideCSStepInfo : pb::IMessage<GuideCSStepInfo> {
    private static readonly pb::MessageParser<GuideCSStepInfo> _parser = new pb::MessageParser<GuideCSStepInfo>(() => new GuideCSStepInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideCSStepInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideCSStepInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideCSStepInfo(GuideCSStepInfo other) : this() {
      msgid_ = other.msgid_;
      allcomp_ = other.allcomp_;
      taskid_ = other.taskid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideCSStepInfo Clone() {
      return new GuideCSStepInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "allcomp" field.</summary>
    public const int AllcompFieldNumber = 2;
    private bool allcomp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Allcomp {
      get { return allcomp_; }
      set {
        allcomp_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_taskid_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> taskid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Taskid {
      get { return taskid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideCSStepInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideCSStepInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Allcomp != other.Allcomp) return false;
      if(!taskid_.Equals(other.taskid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Allcomp != false) hash ^= Allcomp.GetHashCode();
      hash ^= taskid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Allcomp != false) {
        output.WriteRawTag(16);
        output.WriteBool(Allcomp);
      }
      taskid_.WriteTo(output, _repeated_taskid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Allcomp != false) {
        size += 1 + 1;
      }
      size += taskid_.CalculateSize(_repeated_taskid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideCSStepInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Allcomp != false) {
        Allcomp = other.Allcomp;
      }
      taskid_.Add(other.taskid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Allcomp = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            taskid_.AddEntriesFrom(input, _repeated_taskid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新手奖励ntype:1 金币，2钻石，3商品id
  /// </summary>
  public sealed partial class GuideAward : pb::IMessage<GuideAward> {
    private static readonly pb::MessageParser<GuideAward> _parser = new pb::MessageParser<GuideAward>(() => new GuideAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideAward(GuideAward other) : this() {
      msgid_ = other.msgid_;
      awardlist_ = other.awardlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideAward Clone() {
      return new GuideAward(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "awardlist" field.</summary>
    public const int AwardlistFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.GuideAward.Types.awardtype> _repeated_awardlist_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.GuideAward.Types.awardtype.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.GuideAward.Types.awardtype> awardlist_ = new pbc::RepeatedField<global::GSToGC.GuideAward.Types.awardtype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.GuideAward.Types.awardtype> Awardlist {
      get { return awardlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!awardlist_.Equals(other.awardlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= awardlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      awardlist_.WriteTo(output, _repeated_awardlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += awardlist_.CalculateSize(_repeated_awardlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideAward other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      awardlist_.Add(other.awardlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            awardlist_.AddEntriesFrom(input, _repeated_awardlist_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GuideAward message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum dtype {
        [pbr::OriginalName("unknow")] Unknow = 0,
        [pbr::OriginalName("type_gold")] TypeGold = 1,
        [pbr::OriginalName("type_diamond")] TypeDiamond = 2,
        [pbr::OriginalName("type_goodsid")] TypeGoodsid = 3,
      }

      public sealed partial class awardtype : pb::IMessage<awardtype> {
        private static readonly pb::MessageParser<awardtype> _parser = new pb::MessageParser<awardtype>(() => new awardtype());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<awardtype> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.GuideAward.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public awardtype() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public awardtype(awardtype other) : this() {
          dt_ = other.dt_;
          idxn_ = other.idxn_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public awardtype Clone() {
          return new awardtype(this);
        }

        /// <summary>Field number for the "dt" field.</summary>
        public const int DtFieldNumber = 1;
        private global::GSToGC.GuideAward.Types.dtype dt_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GSToGC.GuideAward.Types.dtype Dt {
          get { return dt_; }
          set {
            dt_ = value;
          }
        }

        /// <summary>Field number for the "idxn" field.</summary>
        public const int IdxnFieldNumber = 2;
        private uint idxn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Idxn {
          get { return idxn_; }
          set {
            idxn_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as awardtype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(awardtype other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Dt != other.Dt) return false;
          if (Idxn != other.Idxn) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Dt != 0) hash ^= Dt.GetHashCode();
          if (Idxn != 0) hash ^= Idxn.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Dt != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dt);
          }
          if (Idxn != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Idxn);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Dt != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dt);
          }
          if (Idxn != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idxn);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(awardtype other) {
          if (other == null) {
            return;
          }
          if (other.Dt != 0) {
            Dt = other.Dt;
          }
          if (other.Idxn != 0) {
            Idxn = other.Idxn;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                dt_ = (global::GSToGC.GuideAward.Types.dtype) input.ReadEnum();
                break;
              }
              case 16: {
                Idxn = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???
  /// </summary>
  public sealed partial class GuideKillsInfo : pb::IMessage<GuideKillsInfo> {
    private static readonly pb::MessageParser<GuideKillsInfo> _parser = new pb::MessageParser<GuideKillsInfo>(() => new GuideKillsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideKillsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideKillsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideKillsInfo(GuideKillsInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      npctype_ = other.npctype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideKillsInfo Clone() {
      return new GuideKillsInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    /// <summary>
    ///killerGuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "npctype" field.</summary>
    public const int NpctypeFieldNumber = 3;
    private int npctype_;
    /// <summary>
    ///击杀英雄，击杀祭坛 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Npctype {
      get { return npctype_; }
      set {
        npctype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideKillsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideKillsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Npctype != other.Npctype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Npctype != 0) hash ^= Npctype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Npctype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Npctype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Npctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npctype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideKillsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Npctype != 0) {
        Npctype = other.Npctype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Npctype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUserLvInfo : pb::IMessage<NotifyUserLvInfo> {
    private static readonly pb::MessageParser<NotifyUserLvInfo> _parser = new pb::MessageParser<NotifyUserLvInfo>(() => new NotifyUserLvInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserLvInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserLvInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserLvInfo(NotifyUserLvInfo other) : this() {
      msgid_ = other.msgid_;
      curlv_ = other.curlv_;
      curexp_ = other.curexp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserLvInfo Clone() {
      return new NotifyUserLvInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "curlv" field.</summary>
    public const int CurlvFieldNumber = 2;
    private uint curlv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Curlv {
      get { return curlv_; }
      set {
        curlv_ = value;
      }
    }

    /// <summary>Field number for the "curexp" field.</summary>
    public const int CurexpFieldNumber = 3;
    private uint curexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Curexp {
      get { return curexp_; }
      set {
        curexp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserLvInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserLvInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Curlv != other.Curlv) return false;
      if (Curexp != other.Curexp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Curlv != 0) hash ^= Curlv.GetHashCode();
      if (Curexp != 0) hash ^= Curexp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Curlv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Curlv);
      }
      if (Curexp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Curexp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Curlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Curlv);
      }
      if (Curexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Curexp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserLvInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Curlv != 0) {
        Curlv = other.Curlv;
      }
      if (other.Curexp != 0) {
        Curexp = other.Curexp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Curlv = input.ReadUInt32();
            break;
          }
          case 24: {
            Curexp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyNewHeaderid : pb::IMessage<NotifyNewHeaderid> {
    private static readonly pb::MessageParser<NotifyNewHeaderid> _parser = new pb::MessageParser<NotifyNewHeaderid>(() => new NotifyNewHeaderid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyNewHeaderid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewHeaderid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewHeaderid(NotifyNewHeaderid other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      newheaderid_ = other.newheaderid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewHeaderid Clone() {
      return new NotifyNewHeaderid(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "newheaderid" field.</summary>
    public const int NewheaderidFieldNumber = 3;
    private uint newheaderid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newheaderid {
      get { return newheaderid_; }
      set {
        newheaderid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyNewHeaderid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyNewHeaderid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Newheaderid != other.Newheaderid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Newheaderid != 0) hash ^= Newheaderid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Newheaderid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Newheaderid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Newheaderid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newheaderid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyNewHeaderid other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Newheaderid != 0) {
        Newheaderid = other.Newheaderid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Newheaderid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyOneMatchNeedOne : pb::IMessage<NotifyOneMatchNeedOne> {
    private static readonly pb::MessageParser<NotifyOneMatchNeedOne> _parser = new pb::MessageParser<NotifyOneMatchNeedOne>(() => new NotifyOneMatchNeedOne());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOneMatchNeedOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOneMatchNeedOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOneMatchNeedOne(NotifyOneMatchNeedOne other) : this() {
      msgid_ = other.msgid_;
      mapid_ = other.mapid_;
      fightid_ = other.fightid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOneMatchNeedOne Clone() {
      return new NotifyOneMatchNeedOne(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 2;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "fightid" field.</summary>
    public const int FightidFieldNumber = 3;
    private uint fightid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fightid {
      get { return fightid_; }
      set {
        fightid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyOneMatchNeedOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyOneMatchNeedOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Mapid != other.Mapid) return false;
      if (Fightid != other.Fightid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Fightid != 0) hash ^= Fightid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mapid);
      }
      if (Fightid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fightid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Fightid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fightid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyOneMatchNeedOne other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Fightid != 0) {
        Fightid = other.Fightid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 24: {
            Fightid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyNewNickname : pb::IMessage<NotifyNewNickname> {
    private static readonly pb::MessageParser<NotifyNewNickname> _parser = new pb::MessageParser<NotifyNewNickname>(() => new NotifyNewNickname());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyNewNickname> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewNickname() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewNickname(NotifyNewNickname other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      newnickname_ = other.newnickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyNewNickname Clone() {
      return new NotifyNewNickname(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "newnickname" field.</summary>
    public const int NewnicknameFieldNumber = 3;
    private string newnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newnickname {
      get { return newnickname_; }
      set {
        newnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyNewNickname);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyNewNickname other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Newnickname != other.Newnickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Newnickname.Length != 0) hash ^= Newnickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Newnickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Newnickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Newnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newnickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyNewNickname other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Newnickname.Length != 0) {
        Newnickname = other.Newnickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            Newnickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunesSlot : pb::IMessage<RunesSlot> {
    private static readonly pb::MessageParser<RunesSlot> _parser = new pb::MessageParser<RunesSlot>(() => new RunesSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunesSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesSlot(RunesSlot other) : this() {
      slotpos_ = other.slotpos_;
      runeid_ = other.runeid_;
      page_ = other.page_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesSlot Clone() {
      return new RunesSlot(this);
    }

    /// <summary>Field number for the "slotpos" field.</summary>
    public const int SlotposFieldNumber = 1;
    private int slotpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slotpos {
      get { return slotpos_; }
      set {
        slotpos_ = value;
      }
    }

    /// <summary>Field number for the "runeid" field.</summary>
    public const int RuneidFieldNumber = 2;
    private uint runeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Runeid {
      get { return runeid_; }
      set {
        runeid_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunesSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunesSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slotpos != other.Slotpos) return false;
      if (Runeid != other.Runeid) return false;
      if (Page != other.Page) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slotpos != 0) hash ^= Slotpos.GetHashCode();
      if (Runeid != 0) hash ^= Runeid.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slotpos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slotpos);
      }
      if (Runeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Runeid);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slotpos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slotpos);
      }
      if (Runeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Runeid);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunesSlot other) {
      if (other == null) {
        return;
      }
      if (other.Slotpos != 0) {
        Slotpos = other.Slotpos;
      }
      if (other.Runeid != 0) {
        Runeid = other.Runeid;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Slotpos = input.ReadInt32();
            break;
          }
          case 16: {
            Runeid = input.ReadUInt32();
            break;
          }
          case 24: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunesBagInfo : pb::IMessage<RunesBagInfo> {
    private static readonly pb::MessageParser<RunesBagInfo> _parser = new pb::MessageParser<RunesBagInfo>(() => new RunesBagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunesBagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesBagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesBagInfo(RunesBagInfo other) : this() {
      runeid_ = other.runeid_;
      num_ = other.num_;
      gottime_ = other.gottime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunesBagInfo Clone() {
      return new RunesBagInfo(this);
    }

    /// <summary>Field number for the "runeid" field.</summary>
    public const int RuneidFieldNumber = 1;
    private uint runeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Runeid {
      get { return runeid_; }
      set {
        runeid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "gottime" field.</summary>
    public const int GottimeFieldNumber = 3;
    private long gottime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gottime {
      get { return gottime_; }
      set {
        gottime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunesBagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunesBagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Runeid != other.Runeid) return false;
      if (Num != other.Num) return false;
      if (Gottime != other.Gottime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Runeid != 0) hash ^= Runeid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Gottime != 0L) hash ^= Gottime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Runeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Runeid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Gottime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gottime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Runeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Runeid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Gottime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gottime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunesBagInfo other) {
      if (other == null) {
        return;
      }
      if (other.Runeid != 0) {
        Runeid = other.Runeid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Gottime != 0L) {
        Gottime = other.Gottime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Runeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Gottime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRunesList : pb::IMessage<NotifyRunesList> {
    private static readonly pb::MessageParser<NotifyRunesList> _parser = new pb::MessageParser<NotifyRunesList>(() => new NotifyRunesList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRunesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesList(NotifyRunesList other) : this() {
      msgid_ = other.msgid_;
      runesbaginfo_ = other.runesbaginfo_.Clone();
      runesSlotInfo_ = other.runesSlotInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRunesList Clone() {
      return new NotifyRunesList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "runesbaginfo" field.</summary>
    public const int RunesbaginfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.RunesBagInfo> _repeated_runesbaginfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.RunesBagInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.RunesBagInfo> runesbaginfo_ = new pbc::RepeatedField<global::GSToGC.RunesBagInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.RunesBagInfo> Runesbaginfo {
      get { return runesbaginfo_; }
    }

    /// <summary>Field number for the "runes_slot_info" field.</summary>
    public const int RunesSlotInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GSToGC.RunesSlot> _repeated_runesSlotInfo_codec
        = pb::FieldCodec.ForMessage(26, global::GSToGC.RunesSlot.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.RunesSlot> runesSlotInfo_ = new pbc::RepeatedField<global::GSToGC.RunesSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.RunesSlot> RunesSlotInfo {
      get { return runesSlotInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRunesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRunesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!runesbaginfo_.Equals(other.runesbaginfo_)) return false;
      if(!runesSlotInfo_.Equals(other.runesSlotInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= runesbaginfo_.GetHashCode();
      hash ^= runesSlotInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      runesbaginfo_.WriteTo(output, _repeated_runesbaginfo_codec);
      runesSlotInfo_.WriteTo(output, _repeated_runesSlotInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += runesbaginfo_.CalculateSize(_repeated_runesbaginfo_codec);
      size += runesSlotInfo_.CalculateSize(_repeated_runesSlotInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRunesList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      runesbaginfo_.Add(other.runesbaginfo_);
      runesSlotInfo_.Add(other.runesSlotInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            runesbaginfo_.AddEntriesFrom(input, _repeated_runesbaginfo_codec);
            break;
          }
          case 26: {
            runesSlotInfo_.AddEntriesFrom(input, _repeated_runesSlotInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRemoveCommodity : pb::IMessage<NotifyRemoveCommodity> {
    private static readonly pb::MessageParser<NotifyRemoveCommodity> _parser = new pb::MessageParser<NotifyRemoveCommodity>(() => new NotifyRemoveCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRemoveCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRemoveCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRemoveCommodity(NotifyRemoveCommodity other) : this() {
      msgid_ = other.msgid_;
      commodityid_ = other.commodityid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRemoveCommodity Clone() {
      return new NotifyRemoveCommodity(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "Commodityid" field.</summary>
    public const int CommodityidFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_commodityid_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> commodityid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Commodityid {
      get { return commodityid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRemoveCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRemoveCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!commodityid_.Equals(other.commodityid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= commodityid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      commodityid_.WriteTo(output, _repeated_commodityid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += commodityid_.CalculateSize(_repeated_commodityid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRemoveCommodity other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      commodityid_.Add(other.commodityid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            commodityid_.AddEntriesFrom(input, _repeated_commodityid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyGetNewCommodity : pb::IMessage<NotifyGetNewCommodity> {
    private static readonly pb::MessageParser<NotifyGetNewCommodity> _parser = new pb::MessageParser<NotifyGetNewCommodity>(() => new NotifyGetNewCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyGetNewCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGetNewCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGetNewCommodity(NotifyGetNewCommodity other) : this() {
      msgid_ = other.msgid_;
      commodityid_ = other.commodityid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGetNewCommodity Clone() {
      return new NotifyGetNewCommodity(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "Commodityid" field.</summary>
    public const int CommodityidFieldNumber = 2;
    private uint commodityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Commodityid {
      get { return commodityid_; }
      set {
        commodityid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyGetNewCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyGetNewCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Commodityid != other.Commodityid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Commodityid != 0) hash ^= Commodityid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Commodityid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Commodityid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Commodityid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Commodityid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyGetNewCommodity other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Commodityid != 0) {
        Commodityid = other.Commodityid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Commodityid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMatchTeamBaseInfo : pb::IMessage<NotifyMatchTeamBaseInfo> {
    private static readonly pb::MessageParser<NotifyMatchTeamBaseInfo> _parser = new pb::MessageParser<NotifyMatchTeamBaseInfo>(() => new NotifyMatchTeamBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMatchTeamBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamBaseInfo(NotifyMatchTeamBaseInfo other) : this() {
      msgid_ = other.msgid_;
      teamid_ = other.teamid_;
      matchtype_ = other.matchtype_;
      mapid_ = other.mapid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamBaseInfo Clone() {
      return new NotifyMatchTeamBaseInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 2;
    private uint teamid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "matchtype" field.</summary>
    public const int MatchtypeFieldNumber = 3;
    private uint matchtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchtype {
      get { return matchtype_; }
      set {
        matchtype_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 4;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMatchTeamBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMatchTeamBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Teamid != other.Teamid) return false;
      if (Matchtype != other.Matchtype) return false;
      if (Mapid != other.Mapid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (Matchtype != 0) hash ^= Matchtype.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Teamid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Teamid);
      }
      if (Matchtype != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Matchtype);
      }
      if (Mapid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Mapid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      if (Matchtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchtype);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMatchTeamBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.Matchtype != 0) {
        Matchtype = other.Matchtype;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 24: {
            Matchtype = input.ReadUInt32();
            break;
          }
          case 32: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMatchTeamPlayerInfo : pb::IMessage<NotifyMatchTeamPlayerInfo> {
    private static readonly pb::MessageParser<NotifyMatchTeamPlayerInfo> _parser = new pb::MessageParser<NotifyMatchTeamPlayerInfo>(() => new NotifyMatchTeamPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMatchTeamPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamPlayerInfo(NotifyMatchTeamPlayerInfo other) : this() {
      msgid_ = other.msgid_;
      postion_ = other.postion_;
      isInsert_ = other.isInsert_;
      nickname_ = other.nickname_;
      headid_ = other.headid_;
      userlevel_ = other.userlevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamPlayerInfo Clone() {
      return new NotifyMatchTeamPlayerInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "postion" field.</summary>
    public const int PostionFieldNumber = 2;
    private uint postion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Postion {
      get { return postion_; }
      set {
        postion_ = value;
      }
    }

    /// <summary>Field number for the "isInsert" field.</summary>
    public const int IsInsertFieldNumber = 3;
    private bool isInsert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInsert {
      get { return isInsert_; }
      set {
        isInsert_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headid" field.</summary>
    public const int HeadidFieldNumber = 5;
    private uint headid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Headid {
      get { return headid_; }
      set {
        headid_ = value;
      }
    }

    /// <summary>Field number for the "userlevel" field.</summary>
    public const int UserlevelFieldNumber = 6;
    private uint userlevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Userlevel {
      get { return userlevel_; }
      set {
        userlevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMatchTeamPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMatchTeamPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Postion != other.Postion) return false;
      if (IsInsert != other.IsInsert) return false;
      if (Nickname != other.Nickname) return false;
      if (Headid != other.Headid) return false;
      if (Userlevel != other.Userlevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Postion != 0) hash ^= Postion.GetHashCode();
      if (IsInsert != false) hash ^= IsInsert.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Headid != 0) hash ^= Headid.GetHashCode();
      if (Userlevel != 0) hash ^= Userlevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Postion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Postion);
      }
      if (IsInsert != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInsert);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nickname);
      }
      if (Headid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Headid);
      }
      if (Userlevel != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Userlevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Postion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Postion);
      }
      if (IsInsert != false) {
        size += 1 + 1;
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Headid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Headid);
      }
      if (Userlevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Userlevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMatchTeamPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Postion != 0) {
        Postion = other.Postion;
      }
      if (other.IsInsert != false) {
        IsInsert = other.IsInsert;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Headid != 0) {
        Headid = other.Headid;
      }
      if (other.Userlevel != 0) {
        Userlevel = other.Userlevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Postion = input.ReadUInt32();
            break;
          }
          case 24: {
            IsInsert = input.ReadBool();
            break;
          }
          case 34: {
            Nickname = input.ReadString();
            break;
          }
          case 40: {
            Headid = input.ReadUInt32();
            break;
          }
          case 48: {
            Userlevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMatchTeamSwitch : pb::IMessage<NotifyMatchTeamSwitch> {
    private static readonly pb::MessageParser<NotifyMatchTeamSwitch> _parser = new pb::MessageParser<NotifyMatchTeamSwitch>(() => new NotifyMatchTeamSwitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMatchTeamSwitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamSwitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamSwitch(NotifyMatchTeamSwitch other) : this() {
      msgid_ = other.msgid_;
      startflag_ = other.startflag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchTeamSwitch Clone() {
      return new NotifyMatchTeamSwitch(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "startflag" field.</summary>
    public const int StartflagFieldNumber = 2;
    private bool startflag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Startflag {
      get { return startflag_; }
      set {
        startflag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMatchTeamSwitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMatchTeamSwitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Startflag != other.Startflag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Startflag != false) hash ^= Startflag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Startflag != false) {
        output.WriteRawTag(16);
        output.WriteBool(Startflag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Startflag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMatchTeamSwitch other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Startflag != false) {
        Startflag = other.Startflag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Startflag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMatchInviteJoin : pb::IMessage<NotifyMatchInviteJoin> {
    private static readonly pb::MessageParser<NotifyMatchInviteJoin> _parser = new pb::MessageParser<NotifyMatchInviteJoin>(() => new NotifyMatchInviteJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMatchInviteJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchInviteJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchInviteJoin(NotifyMatchInviteJoin other) : this() {
      msgid_ = other.msgid_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchInviteJoin Clone() {
      return new NotifyMatchInviteJoin(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMatchInviteJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMatchInviteJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMatchInviteJoin other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromBS_NotifyHerosInfo
  /// </summary>
  public sealed partial class NotifyHerosInfo : pb::IMessage<NotifyHerosInfo> {
    private static readonly pb::MessageParser<NotifyHerosInfo> _parser = new pb::MessageParser<NotifyHerosInfo>(() => new NotifyHerosInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHerosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHerosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHerosInfo(NotifyHerosInfo other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHerosInfo Clone() {
      return new NotifyHerosInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo> info_ = new pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHerosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHerosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHerosInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyHerosInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class heropanelinfo : pb::IMessage<heropanelinfo> {
        private static readonly pb::MessageParser<heropanelinfo> _parser = new pb::MessageParser<heropanelinfo>(() => new heropanelinfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<heropanelinfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyHerosInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heropanelinfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heropanelinfo(heropanelinfo other) : this() {
          camgpid_ = other.camgpid_;
          guid_ = other.guid_;
          herolv_ = other.herolv_;
          nickname_ = other.nickname_;
          killnum_ = other.killnum_;
          deadtimes_ = other.deadtimes_;
          asstimes_ = other.asstimes_;
          lasthit_ = other.lasthit_;
          goods_ = other.goods_.Clone();
          heroid_ = other.heroid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heropanelinfo Clone() {
          return new heropanelinfo(this);
        }

        /// <summary>Field number for the "camgpid" field.</summary>
        public const int CamgpidFieldNumber = 1;
        private int camgpid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Camgpid {
          get { return camgpid_; }
          set {
            camgpid_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 2;
        private long guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "herolv" field.</summary>
        public const int HerolvFieldNumber = 3;
        private int herolv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Herolv {
          get { return herolv_; }
          set {
            herolv_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 4;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "killnum" field.</summary>
        public const int KillnumFieldNumber = 5;
        private int killnum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Killnum {
          get { return killnum_; }
          set {
            killnum_ = value;
          }
        }

        /// <summary>Field number for the "deadtimes" field.</summary>
        public const int DeadtimesFieldNumber = 6;
        private int deadtimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Deadtimes {
          get { return deadtimes_; }
          set {
            deadtimes_ = value;
          }
        }

        /// <summary>Field number for the "asstimes" field.</summary>
        public const int AsstimesFieldNumber = 7;
        private int asstimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Asstimes {
          get { return asstimes_; }
          set {
            asstimes_ = value;
          }
        }

        /// <summary>Field number for the "lasthit" field.</summary>
        public const int LasthitFieldNumber = 8;
        private int lasthit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lasthit {
          get { return lasthit_; }
          set {
            lasthit_ = value;
          }
        }

        /// <summary>Field number for the "goods" field.</summary>
        public const int GoodsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg> _repeated_goods_codec
            = pb::FieldCodec.ForMessage(74, global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg.Parser);
        private readonly pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg> goods_ = new pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Types.goodsmsg> Goods {
          get { return goods_; }
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 10;
        private uint heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as heropanelinfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(heropanelinfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Camgpid != other.Camgpid) return false;
          if (Guid != other.Guid) return false;
          if (Herolv != other.Herolv) return false;
          if (Nickname != other.Nickname) return false;
          if (Killnum != other.Killnum) return false;
          if (Deadtimes != other.Deadtimes) return false;
          if (Asstimes != other.Asstimes) return false;
          if (Lasthit != other.Lasthit) return false;
          if(!goods_.Equals(other.goods_)) return false;
          if (Heroid != other.Heroid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Camgpid != 0) hash ^= Camgpid.GetHashCode();
          if (Guid != 0L) hash ^= Guid.GetHashCode();
          if (Herolv != 0) hash ^= Herolv.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Killnum != 0) hash ^= Killnum.GetHashCode();
          if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
          if (Asstimes != 0) hash ^= Asstimes.GetHashCode();
          if (Lasthit != 0) hash ^= Lasthit.GetHashCode();
          hash ^= goods_.GetHashCode();
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Camgpid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Camgpid);
          }
          if (Guid != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Guid);
          }
          if (Herolv != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Herolv);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Nickname);
          }
          if (Killnum != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Killnum);
          }
          if (Deadtimes != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Deadtimes);
          }
          if (Asstimes != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Asstimes);
          }
          if (Lasthit != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Lasthit);
          }
          goods_.WriteTo(output, _repeated_goods_codec);
          if (Heroid != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Heroid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Camgpid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camgpid);
          }
          if (Guid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
          }
          if (Herolv != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Herolv);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Killnum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Killnum);
          }
          if (Deadtimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadtimes);
          }
          if (Asstimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Asstimes);
          }
          if (Lasthit != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lasthit);
          }
          size += goods_.CalculateSize(_repeated_goods_codec);
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(heropanelinfo other) {
          if (other == null) {
            return;
          }
          if (other.Camgpid != 0) {
            Camgpid = other.Camgpid;
          }
          if (other.Guid != 0L) {
            Guid = other.Guid;
          }
          if (other.Herolv != 0) {
            Herolv = other.Herolv;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Killnum != 0) {
            Killnum = other.Killnum;
          }
          if (other.Deadtimes != 0) {
            Deadtimes = other.Deadtimes;
          }
          if (other.Asstimes != 0) {
            Asstimes = other.Asstimes;
          }
          if (other.Lasthit != 0) {
            Lasthit = other.Lasthit;
          }
          goods_.Add(other.goods_);
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Camgpid = input.ReadInt32();
                break;
              }
              case 16: {
                Guid = input.ReadInt64();
                break;
              }
              case 24: {
                Herolv = input.ReadInt32();
                break;
              }
              case 34: {
                Nickname = input.ReadString();
                break;
              }
              case 40: {
                Killnum = input.ReadInt32();
                break;
              }
              case 48: {
                Deadtimes = input.ReadInt32();
                break;
              }
              case 56: {
                Asstimes = input.ReadInt32();
                break;
              }
              case 64: {
                Lasthit = input.ReadInt32();
                break;
              }
              case 74: {
                goods_.AddEntriesFrom(input, _repeated_goods_codec);
                break;
              }
              case 80: {
                Heroid = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the heropanelinfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class goodsmsg : pb::IMessage<goodsmsg> {
            private static readonly pb::MessageParser<goodsmsg> _parser = new pb::MessageParser<goodsmsg>(() => new goodsmsg());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<goodsmsg> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::GSToGC.NotifyHerosInfo.Types.heropanelinfo.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public goodsmsg() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public goodsmsg(goodsmsg other) : this() {
              grid_ = other.grid_;
              goodid_ = other.goodid_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public goodsmsg Clone() {
              return new goodsmsg(this);
            }

            /// <summary>Field number for the "grid" field.</summary>
            public const int GridFieldNumber = 1;
            private int grid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Grid {
              get { return grid_; }
              set {
                grid_ = value;
              }
            }

            /// <summary>Field number for the "goodid" field.</summary>
            public const int GoodidFieldNumber = 2;
            private int goodid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Goodid {
              get { return goodid_; }
              set {
                goodid_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as goodsmsg);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(goodsmsg other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Grid != other.Grid) return false;
              if (Goodid != other.Goodid) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Grid != 0) hash ^= Grid.GetHashCode();
              if (Goodid != 0) hash ^= Goodid.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Grid != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Grid);
              }
              if (Goodid != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Goodid);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Grid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
              }
              if (Goodid != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goodid);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(goodsmsg other) {
              if (other == null) {
                return;
              }
              if (other.Grid != 0) {
                Grid = other.Grid;
              }
              if (other.Goodid != 0) {
                Goodid = other.Goodid;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Grid = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Goodid = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class NotifyGoodsExpired : pb::IMessage<NotifyGoodsExpired> {
    private static readonly pb::MessageParser<NotifyGoodsExpired> _parser = new pb::MessageParser<NotifyGoodsExpired>(() => new NotifyGoodsExpired());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyGoodsExpired> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsExpired() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsExpired(NotifyGoodsExpired other) : this() {
      msgid_ = other.msgid_;
      commondityid_ = other.commondityid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsExpired Clone() {
      return new NotifyGoodsExpired(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "commondityid" field.</summary>
    public const int CommondityidFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_commondityid_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> commondityid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Commondityid {
      get { return commondityid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyGoodsExpired);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyGoodsExpired other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!commondityid_.Equals(other.commondityid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= commondityid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      commondityid_.WriteTo(output, _repeated_commondityid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += commondityid_.CalculateSize(_repeated_commondityid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyGoodsExpired other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      commondityid_.Add(other.commondityid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            commondityid_.AddEntriesFrom(input, _repeated_commondityid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShortMail : pb::IMessage<ShortMail> {
    private static readonly pb::MessageParser<ShortMail> _parser = new pb::MessageParser<ShortMail>(() => new ShortMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShortMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortMail(ShortMail other) : this() {
      mailid_ = other.mailid_;
      mailType_ = other.mailType_;
      mailTitle_ = other.mailTitle_;
      mailState_ = other.mailState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortMail Clone() {
      return new ShortMail(this);
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 1;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "mailType" field.</summary>
    public const int MailTypeFieldNumber = 2;
    private global::GSToGC.MailType mailType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MailType MailType {
      get { return mailType_; }
      set {
        mailType_ = value;
      }
    }

    /// <summary>Field number for the "mailTitle" field.</summary>
    public const int MailTitleFieldNumber = 3;
    private string mailTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MailTitle {
      get { return mailTitle_; }
      set {
        mailTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mailState" field.</summary>
    public const int MailStateFieldNumber = 4;
    private global::GSToGC.EMailCurtState mailState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.EMailCurtState MailState {
      get { return mailState_; }
      set {
        mailState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShortMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShortMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mailid != other.Mailid) return false;
      if (MailType != other.MailType) return false;
      if (MailTitle != other.MailTitle) return false;
      if (MailState != other.MailState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (MailType != 0) hash ^= MailType.GetHashCode();
      if (MailTitle.Length != 0) hash ^= MailTitle.GetHashCode();
      if (MailState != 0) hash ^= MailState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mailid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mailid);
      }
      if (MailType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MailType);
      }
      if (MailTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MailTitle);
      }
      if (MailState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MailState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (MailType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MailType);
      }
      if (MailTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MailTitle);
      }
      if (MailState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MailState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShortMail other) {
      if (other == null) {
        return;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.MailType != 0) {
        MailType = other.MailType;
      }
      if (other.MailTitle.Length != 0) {
        MailTitle = other.MailTitle;
      }
      if (other.MailState != 0) {
        MailState = other.MailState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mailid = input.ReadInt32();
            break;
          }
          case 16: {
            mailType_ = (global::GSToGC.MailType) input.ReadEnum();
            break;
          }
          case 26: {
            MailTitle = input.ReadString();
            break;
          }
          case 32: {
            mailState_ = (global::GSToGC.EMailCurtState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelAndSortMail : pb::IMessage<DelAndSortMail> {
    private static readonly pb::MessageParser<DelAndSortMail> _parser = new pb::MessageParser<DelAndSortMail>(() => new DelAndSortMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelAndSortMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAndSortMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAndSortMail(DelAndSortMail other) : this() {
      msgid_ = other.msgid_;
      mailid_ = other.mailid_;
      mailidDel_ = other.mailidDel_;
      sort_ = other.sort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAndSortMail Clone() {
      return new DelAndSortMail(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "mailidDel" field.</summary>
    public const int MailidDelFieldNumber = 3;
    private bool mailidDel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MailidDel {
      get { return mailidDel_; }
      set {
        mailidDel_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 4;
    private bool sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelAndSortMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelAndSortMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Mailid != other.Mailid) return false;
      if (MailidDel != other.MailidDel) return false;
      if (Sort != other.Sort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (MailidDel != false) hash ^= MailidDel.GetHashCode();
      if (Sort != false) hash ^= Sort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Mailid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mailid);
      }
      if (MailidDel != false) {
        output.WriteRawTag(24);
        output.WriteBool(MailidDel);
      }
      if (Sort != false) {
        output.WriteRawTag(32);
        output.WriteBool(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (MailidDel != false) {
        size += 1 + 1;
      }
      if (Sort != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelAndSortMail other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.MailidDel != false) {
        MailidDel = other.MailidDel;
      }
      if (other.Sort != false) {
        Sort = other.Sort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mailid = input.ReadInt32();
            break;
          }
          case 24: {
            MailidDel = input.ReadBool();
            break;
          }
          case 32: {
            Sort = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailInfo : pb::IMessage<MailInfo> {
    private static readonly pb::MessageParser<MailInfo> _parser = new pb::MessageParser<MailInfo>(() => new MailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo(MailInfo other) : this() {
      msgid_ = other.msgid_;
      mailid_ = other.mailid_;
      mailcontent_ = other.mailcontent_;
      sender_ = other.sender_;
      createTime_ = other.createTime_;
      mailgift_ = other.mailgift_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailInfo Clone() {
      return new MailInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private int mailid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailid {
      get { return mailid_; }
      set {
        mailid_ = value;
      }
    }

    /// <summary>Field number for the "mailcontent" field.</summary>
    public const int MailcontentFieldNumber = 3;
    private string mailcontent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailcontent {
      get { return mailcontent_; }
      set {
        mailcontent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 4;
    private string sender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mailgift" field.</summary>
    public const int MailgiftFieldNumber = 6;
    private string mailgift_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailgift {
      get { return mailgift_; }
      set {
        mailgift_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Mailid != other.Mailid) return false;
      if (Mailcontent != other.Mailcontent) return false;
      if (Sender != other.Sender) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Mailgift != other.Mailgift) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Mailid != 0) hash ^= Mailid.GetHashCode();
      if (Mailcontent.Length != 0) hash ^= Mailcontent.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (Mailgift.Length != 0) hash ^= Mailgift.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Mailid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mailid);
      }
      if (Mailcontent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mailcontent);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sender);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
      if (Mailgift.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Mailgift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Mailid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailid);
      }
      if (Mailcontent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailcontent);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (Mailgift.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailgift);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Mailid != 0) {
        Mailid = other.Mailid;
      }
      if (other.Mailcontent.Length != 0) {
        Mailcontent = other.Mailcontent;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.Mailgift.Length != 0) {
        Mailgift = other.Mailgift;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mailid = input.ReadInt32();
            break;
          }
          case 26: {
            Mailcontent = input.ReadString();
            break;
          }
          case 34: {
            Sender = input.ReadString();
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
          case 50: {
            Mailgift = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMailList : pb::IMessage<NotifyMailList> {
    private static readonly pb::MessageParser<NotifyMailList> _parser = new pb::MessageParser<NotifyMailList>(() => new NotifyMailList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMailList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailList(NotifyMailList other) : this() {
      msgid_ = other.msgid_;
      mailList_ = other.mailList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMailList Clone() {
      return new NotifyMailList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mailList" field.</summary>
    public const int MailListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.ShortMail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.ShortMail.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.ShortMail> mailList_ = new pbc::RepeatedField<global::GSToGC.ShortMail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.ShortMail> MailList {
      get { return mailList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMailList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMailList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!mailList_.Equals(other.mailList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= mailList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMailList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      mailList_.Add(other.mailList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoodsCfgInfo : pb::IMessage<GoodsCfgInfo> {
    private static readonly pb::MessageParser<GoodsCfgInfo> _parser = new pb::MessageParser<GoodsCfgInfo>(() => new GoodsCfgInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsCfgInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsCfgInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsCfgInfo(GoodsCfgInfo other) : this() {
      goodid_ = other.goodid_;
      consume_ = other.consume_.Clone();
      cfgType_ = other.cfgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsCfgInfo Clone() {
      return new GoodsCfgInfo(this);
    }

    /// <summary>Field number for the "goodid" field.</summary>
    public const int GoodidFieldNumber = 1;
    private int goodid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goodid {
      get { return goodid_; }
      set {
        goodid_ = value;
      }
    }

    /// <summary>Field number for the "consume" field.</summary>
    public const int ConsumeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.GoodsCfgInfo.Types.Consume> _repeated_consume_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.GoodsCfgInfo.Types.Consume.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.GoodsCfgInfo.Types.Consume> consume_ = new pbc::RepeatedField<global::GSToGC.GoodsCfgInfo.Types.Consume>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.GoodsCfgInfo.Types.Consume> Consume {
      get { return consume_; }
    }

    /// <summary>Field number for the "cfg_type" field.</summary>
    public const int CfgTypeFieldNumber = 3;
    private global::GSToGC.GoodsCfgInfo.Types.CfgType cfgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.GoodsCfgInfo.Types.CfgType CfgType {
      get { return cfgType_; }
      set {
        cfgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsCfgInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsCfgInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Goodid != other.Goodid) return false;
      if(!consume_.Equals(other.consume_)) return false;
      if (CfgType != other.CfgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Goodid != 0) hash ^= Goodid.GetHashCode();
      hash ^= consume_.GetHashCode();
      if (CfgType != 0) hash ^= CfgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Goodid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Goodid);
      }
      consume_.WriteTo(output, _repeated_consume_codec);
      if (CfgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CfgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Goodid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goodid);
      }
      size += consume_.CalculateSize(_repeated_consume_codec);
      if (CfgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CfgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsCfgInfo other) {
      if (other == null) {
        return;
      }
      if (other.Goodid != 0) {
        Goodid = other.Goodid;
      }
      consume_.Add(other.consume_);
      if (other.CfgType != 0) {
        CfgType = other.CfgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Goodid = input.ReadInt32();
            break;
          }
          case 18: {
            consume_.AddEntriesFrom(input, _repeated_consume_codec);
            break;
          }
          case 24: {
            cfgType_ = (global::GSToGC.GoodsCfgInfo.Types.CfgType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoodsCfgInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CfgType {
        [pbr::OriginalName("CfgType_Common")] Common = 0,
        [pbr::OriginalName("CfgType_Discount")] Discount = 1,
        [pbr::OriginalName("CfgType_hot")] Hot = 2,
        [pbr::OriginalName("CfgType_New")] New = 3,
      }

      public sealed partial class Consume : pb::IMessage<Consume> {
        private static readonly pb::MessageParser<Consume> _parser = new pb::MessageParser<Consume>(() => new Consume());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Consume> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.GoodsCfgInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Consume() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Consume(Consume other) : this() {
          consumetype_ = other.consumetype_;
          price_ = other.price_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Consume Clone() {
          return new Consume(this);
        }

        /// <summary>Field number for the "consumetype" field.</summary>
        public const int ConsumetypeFieldNumber = 1;
        private int consumetype_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Consumetype {
          get { return consumetype_; }
          set {
            consumetype_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 2;
        private int price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Consume);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Consume other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Consumetype != other.Consumetype) return false;
          if (Price != other.Price) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Consumetype != 0) hash ^= Consumetype.GetHashCode();
          if (Price != 0) hash ^= Price.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Consumetype != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Consumetype);
          }
          if (Price != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Price);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Consumetype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Consumetype);
          }
          if (Price != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Consume other) {
          if (other == null) {
            return;
          }
          if (other.Consumetype != 0) {
            Consumetype = other.Consumetype;
          }
          if (other.Price != 0) {
            Price = other.Price;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Consumetype = input.ReadInt32();
                break;
              }
              case 16: {
                Price = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GoodsBuyCfgInfo : pb::IMessage<GoodsBuyCfgInfo> {
    private static readonly pb::MessageParser<GoodsBuyCfgInfo> _parser = new pb::MessageParser<GoodsBuyCfgInfo>(() => new GoodsBuyCfgInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsBuyCfgInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsBuyCfgInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsBuyCfgInfo(GoodsBuyCfgInfo other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsBuyCfgInfo Clone() {
      return new GoodsBuyCfgInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.GoodsCfgInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.GoodsCfgInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.GoodsCfgInfo> info_ = new pbc::RepeatedField<global::GSToGC.GoodsCfgInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.GoodsCfgInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsBuyCfgInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsBuyCfgInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsBuyCfgInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroAttributes : pb::IMessage<HeroAttributes> {
    private static readonly pb::MessageParser<HeroAttributes> _parser = new pb::MessageParser<HeroAttributes>(() => new HeroAttributes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttributes(HeroAttributes other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      playerSpeed_ = other.playerSpeed_;
      attackInterval_ = other.attackInterval_;
      attackRange_ = other.attackRange_;
      resurgenceTime_ = other.resurgenceTime_;
      physicAttack_ = other.physicAttack_;
      spellsAttack_ = other.spellsAttack_;
      physicDef_ = other.physicDef_;
      spellsDef_ = other.spellsDef_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttributes Clone() {
      return new HeroAttributes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "PlayerSpeed" field.</summary>
    public const int PlayerSpeedFieldNumber = 3;
    private int playerSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSpeed {
      get { return playerSpeed_; }
      set {
        playerSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AttackInterval" field.</summary>
    public const int AttackIntervalFieldNumber = 4;
    private int attackInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackInterval {
      get { return attackInterval_; }
      set {
        attackInterval_ = value;
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 5;
    private int attackRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "ResurgenceTime" field.</summary>
    public const int ResurgenceTimeFieldNumber = 6;
    private int resurgenceTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResurgenceTime {
      get { return resurgenceTime_; }
      set {
        resurgenceTime_ = value;
      }
    }

    /// <summary>Field number for the "PhysicAttack" field.</summary>
    public const int PhysicAttackFieldNumber = 7;
    private int physicAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhysicAttack {
      get { return physicAttack_; }
      set {
        physicAttack_ = value;
      }
    }

    /// <summary>Field number for the "SpellsAttack" field.</summary>
    public const int SpellsAttackFieldNumber = 8;
    private int spellsAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpellsAttack {
      get { return spellsAttack_; }
      set {
        spellsAttack_ = value;
      }
    }

    /// <summary>Field number for the "PhysicDef" field.</summary>
    public const int PhysicDefFieldNumber = 9;
    private int physicDef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhysicDef {
      get { return physicDef_; }
      set {
        physicDef_ = value;
      }
    }

    /// <summary>Field number for the "SpellsDef" field.</summary>
    public const int SpellsDefFieldNumber = 10;
    private int spellsDef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpellsDef {
      get { return spellsDef_; }
      set {
        spellsDef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (PlayerSpeed != other.PlayerSpeed) return false;
      if (AttackInterval != other.AttackInterval) return false;
      if (AttackRange != other.AttackRange) return false;
      if (ResurgenceTime != other.ResurgenceTime) return false;
      if (PhysicAttack != other.PhysicAttack) return false;
      if (SpellsAttack != other.SpellsAttack) return false;
      if (PhysicDef != other.PhysicDef) return false;
      if (SpellsDef != other.SpellsDef) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (PlayerSpeed != 0) hash ^= PlayerSpeed.GetHashCode();
      if (AttackInterval != 0) hash ^= AttackInterval.GetHashCode();
      if (AttackRange != 0) hash ^= AttackRange.GetHashCode();
      if (ResurgenceTime != 0) hash ^= ResurgenceTime.GetHashCode();
      if (PhysicAttack != 0) hash ^= PhysicAttack.GetHashCode();
      if (SpellsAttack != 0) hash ^= SpellsAttack.GetHashCode();
      if (PhysicDef != 0) hash ^= PhysicDef.GetHashCode();
      if (SpellsDef != 0) hash ^= SpellsDef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (PlayerSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerSpeed);
      }
      if (AttackInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackInterval);
      }
      if (AttackRange != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AttackRange);
      }
      if (ResurgenceTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ResurgenceTime);
      }
      if (PhysicAttack != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PhysicAttack);
      }
      if (SpellsAttack != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SpellsAttack);
      }
      if (PhysicDef != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PhysicDef);
      }
      if (SpellsDef != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpellsDef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (PlayerSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSpeed);
      }
      if (AttackInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackInterval);
      }
      if (AttackRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackRange);
      }
      if (ResurgenceTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResurgenceTime);
      }
      if (PhysicAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhysicAttack);
      }
      if (SpellsAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellsAttack);
      }
      if (PhysicDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhysicDef);
      }
      if (SpellsDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellsDef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroAttributes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.PlayerSpeed != 0) {
        PlayerSpeed = other.PlayerSpeed;
      }
      if (other.AttackInterval != 0) {
        AttackInterval = other.AttackInterval;
      }
      if (other.AttackRange != 0) {
        AttackRange = other.AttackRange;
      }
      if (other.ResurgenceTime != 0) {
        ResurgenceTime = other.ResurgenceTime;
      }
      if (other.PhysicAttack != 0) {
        PhysicAttack = other.PhysicAttack;
      }
      if (other.SpellsAttack != 0) {
        SpellsAttack = other.SpellsAttack;
      }
      if (other.PhysicDef != 0) {
        PhysicDef = other.PhysicDef;
      }
      if (other.SpellsDef != 0) {
        SpellsDef = other.SpellsDef;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            PlayerSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            AttackInterval = input.ReadInt32();
            break;
          }
          case 40: {
            AttackRange = input.ReadInt32();
            break;
          }
          case 48: {
            ResurgenceTime = input.ReadInt32();
            break;
          }
          case 56: {
            PhysicAttack = input.ReadInt32();
            break;
          }
          case 64: {
            SpellsAttack = input.ReadInt32();
            break;
          }
          case 72: {
            PhysicDef = input.ReadInt32();
            break;
          }
          case 80: {
            SpellsDef = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroAssist : pb::IMessage<HeroAssist> {
    private static readonly pb::MessageParser<HeroAssist> _parser = new pb::MessageParser<HeroAssist>(() => new HeroAssist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroAssist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAssist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAssist(HeroAssist other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      assist_ = other.assist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAssist Clone() {
      return new HeroAssist(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "assist" field.</summary>
    public const int AssistFieldNumber = 3;
    private int assist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assist {
      get { return assist_; }
      set {
        assist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroAssist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroAssist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Assist != other.Assist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Assist != 0) hash ^= Assist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Assist != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Assist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Assist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroAssist other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Assist != 0) {
        Assist = other.Assist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Assist = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleMatcherCount : pb::IMessage<BattleMatcherCount> {
    private static readonly pb::MessageParser<BattleMatcherCount> _parser = new pb::MessageParser<BattleMatcherCount>(() => new BattleMatcherCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMatcherCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMatcherCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMatcherCount(BattleMatcherCount other) : this() {
      msgid_ = other.msgid_;
      count_ = other.count_;
      maxcount_ = other.maxcount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMatcherCount Clone() {
      return new BattleMatcherCount(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "maxcount" field.</summary>
    public const int MaxcountFieldNumber = 3;
    private int maxcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxcount {
      get { return maxcount_; }
      set {
        maxcount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMatcherCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMatcherCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Count != other.Count) return false;
      if (Maxcount != other.Maxcount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Maxcount != 0) hash ^= Maxcount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Maxcount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Maxcount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Maxcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxcount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMatcherCount other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Maxcount != 0) {
        Maxcount = other.Maxcount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Maxcount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSpanTime : pb::IMessage<BattleSpanTime> {
    private static readonly pb::MessageParser<BattleSpanTime> _parser = new pb::MessageParser<BattleSpanTime>(() => new BattleSpanTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSpanTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSpanTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSpanTime(BattleSpanTime other) : this() {
      msgid_ = other.msgid_;
      spanTime_ = other.spanTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSpanTime Clone() {
      return new BattleSpanTime(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "spanTime" field.</summary>
    public const int SpanTimeFieldNumber = 2;
    private long spanTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpanTime {
      get { return spanTime_; }
      set {
        spanTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSpanTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSpanTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (SpanTime != other.SpanTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (SpanTime != 0L) hash ^= SpanTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (SpanTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SpanTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (SpanTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpanTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSpanTime other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.SpanTime != 0L) {
        SpanTime = other.SpanTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            SpanTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleDelayTime : pb::IMessage<BattleDelayTime> {
    private static readonly pb::MessageParser<BattleDelayTime> _parser = new pb::MessageParser<BattleDelayTime>(() => new BattleDelayTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleDelayTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDelayTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDelayTime(BattleDelayTime other) : this() {
      msgid_ = other.msgid_;
      delayTime_ = other.delayTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDelayTime Clone() {
      return new BattleDelayTime(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "delayTime" field.</summary>
    public const int DelayTimeFieldNumber = 2;
    private long delayTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleDelayTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleDelayTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (DelayTime != other.DelayTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (DelayTime != 0L) hash ^= DelayTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (DelayTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DelayTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (DelayTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DelayTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleDelayTime other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.DelayTime != 0L) {
        DelayTime = other.DelayTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            DelayTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyUserBaseUpLv
  /// </summary>
  public sealed partial class UserBaseUpLv : pb::IMessage<UserBaseUpLv> {
    private static readonly pb::MessageParser<UserBaseUpLv> _parser = new pb::MessageParser<UserBaseUpLv>(() => new UserBaseUpLv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBaseUpLv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseUpLv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseUpLv(UserBaseUpLv other) : this() {
      msgid_ = other.msgid_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseUpLv Clone() {
      return new UserBaseUpLv(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBaseUpLv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBaseUpLv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBaseUpLv other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGs_NotifySecondaryGuideTask
  /// </summary>
  public sealed partial class SecondGuideTask : pb::IMessage<SecondGuideTask> {
    private static readonly pb::MessageParser<SecondGuideTask> _parser = new pb::MessageParser<SecondGuideTask>(() => new SecondGuideTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondGuideTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecondGuideTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecondGuideTask(SecondGuideTask other) : this() {
      msgid_ = other.msgid_;
      taskinfo_ = other.taskinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecondGuideTask Clone() {
      return new SecondGuideTask(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "taskinfo" field.</summary>
    public const int TaskinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.SecondGuideTask.Types.task_info> _repeated_taskinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.SecondGuideTask.Types.task_info.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.SecondGuideTask.Types.task_info> taskinfo_ = new pbc::RepeatedField<global::GSToGC.SecondGuideTask.Types.task_info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.SecondGuideTask.Types.task_info> Taskinfo {
      get { return taskinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecondGuideTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecondGuideTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!taskinfo_.Equals(other.taskinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= taskinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      taskinfo_.WriteTo(output, _repeated_taskinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += taskinfo_.CalculateSize(_repeated_taskinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecondGuideTask other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      taskinfo_.Add(other.taskinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            taskinfo_.AddEntriesFrom(input, _repeated_taskinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SecondGuideTask message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class task_info : pb::IMessage<task_info> {
        private static readonly pb::MessageParser<task_info> _parser = new pb::MessageParser<task_info>(() => new task_info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<task_info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.SecondGuideTask.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public task_info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public task_info(task_info other) : this() {
          taskid_ = other.taskid_;
          num_ = other.num_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public task_info Clone() {
          return new task_info(this);
        }

        /// <summary>Field number for the "taskid" field.</summary>
        public const int TaskidFieldNumber = 1;
        private int taskid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Taskid {
          get { return taskid_; }
          set {
            taskid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as task_info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(task_info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Taskid != other.Taskid) return false;
          if (Num != other.Num) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Taskid != 0) hash ^= Taskid.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Taskid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Taskid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Taskid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(task_info other) {
          if (other == null) {
            return;
          }
          if (other.Taskid != 0) {
            Taskid = other.Taskid;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Taskid = input.ReadInt32();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyGuideTips
  /// </summary>
  public sealed partial class GameTips : pb::IMessage<GameTips> {
    private static readonly pb::MessageParser<GameTips> _parser = new pb::MessageParser<GameTips>(() => new GameTips());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTips(GameTips other) : this() {
      msgid_ = other.msgid_;
      errocode_ = other.errocode_;
      campid_ = other.campid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTips Clone() {
      return new GameTips(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "errocode" field.</summary>
    public const int ErrocodeFieldNumber = 2;
    private int errocode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errocode {
      get { return errocode_; }
      set {
        errocode_ = value;
      }
    }

    /// <summary>Field number for the "campid" field.</summary>
    public const int CampidFieldNumber = 3;
    private int campid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Campid {
      get { return campid_; }
      set {
        campid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Errocode != other.Errocode) return false;
      if (Campid != other.Campid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Errocode != 0) hash ^= Errocode.GetHashCode();
      if (Campid != 0) hash ^= Campid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Errocode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Errocode);
      }
      if (Campid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Campid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Errocode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errocode);
      }
      if (Campid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Campid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTips other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Errocode != 0) {
        Errocode = other.Errocode;
      }
      if (other.Campid != 0) {
        Campid = other.Campid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Errocode = input.ReadInt32();
            break;
          }
          case 24: {
            Campid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyUserReturnBattleRoom : pb::IMessage<NotifyUserReturnBattleRoom> {
    private static readonly pb::MessageParser<NotifyUserReturnBattleRoom> _parser = new pb::MessageParser<NotifyUserReturnBattleRoom>(() => new NotifyUserReturnBattleRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserReturnBattleRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReturnBattleRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReturnBattleRoom(NotifyUserReturnBattleRoom other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserReturnBattleRoom Clone() {
      return new NotifyUserReturnBattleRoom(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserReturnBattleRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserReturnBattleRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserReturnBattleRoom other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastBattleHeroInfo : pb::IMessage<BroadcastBattleHeroInfo> {
    private static readonly pb::MessageParser<BroadcastBattleHeroInfo> _parser = new pb::MessageParser<BroadcastBattleHeroInfo>(() => new BroadcastBattleHeroInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastBattleHeroInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattleHeroInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattleHeroInfo(BroadcastBattleHeroInfo other) : this() {
      msgid_ = other.msgid_;
      heroinfo_ = other.heroinfo_.Clone();
      goodsinfo_ = other.goodsinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattleHeroInfo Clone() {
      return new BroadcastBattleHeroInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "heroinfo" field.</summary>
    public const int HeroinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo> _repeated_heroinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo> heroinfo_ = new pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.HeroInfo> Heroinfo {
      get { return heroinfo_; }
    }

    /// <summary>Field number for the "goodsinfo" field.</summary>
    public const int GoodsinfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo> _repeated_goodsinfo_codec
        = pb::FieldCodec.ForMessage(26, global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo> goodsinfo_ = new pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.BroadcastBattleHeroInfo.Types.BaseGoodsInfo> Goodsinfo {
      get { return goodsinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastBattleHeroInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastBattleHeroInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!heroinfo_.Equals(other.heroinfo_)) return false;
      if(!goodsinfo_.Equals(other.goodsinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= heroinfo_.GetHashCode();
      hash ^= goodsinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      heroinfo_.WriteTo(output, _repeated_heroinfo_codec);
      goodsinfo_.WriteTo(output, _repeated_goodsinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += heroinfo_.CalculateSize(_repeated_heroinfo_codec);
      size += goodsinfo_.CalculateSize(_repeated_goodsinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastBattleHeroInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      heroinfo_.Add(other.heroinfo_);
      goodsinfo_.Add(other.goodsinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            heroinfo_.AddEntriesFrom(input, _repeated_heroinfo_codec);
            break;
          }
          case 26: {
            goodsinfo_.AddEntriesFrom(input, _repeated_goodsinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BroadcastBattleHeroInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HeroInfo : pb::IMessage<HeroInfo> {
        private static readonly pb::MessageParser<HeroInfo> _parser = new pb::MessageParser<HeroInfo>(() => new HeroInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.BroadcastBattleHeroInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo(HeroInfo other) : this() {
          guid_ = other.guid_;
          nickname_ = other.nickname_;
          level_ = other.level_;
          deadtimes_ = other.deadtimes_;
          campid_ = other.campid_;
          headid_ = other.headid_;
          hp_ = other.hp_;
          mp_ = other.mp_;
          pos_ = other.pos_;
          masterguid_ = other.masterguid_;
          kills_ = other.kills_;
          assist_ = other.assist_;
          heroid_ = other.heroid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroInfo Clone() {
          return new HeroInfo(this);
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 1;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 2;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "deadtimes" field.</summary>
        public const int DeadtimesFieldNumber = 4;
        private int deadtimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Deadtimes {
          get { return deadtimes_; }
          set {
            deadtimes_ = value;
          }
        }

        /// <summary>Field number for the "campid" field.</summary>
        public const int CampidFieldNumber = 5;
        private int campid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Campid {
          get { return campid_; }
          set {
            campid_ = value;
          }
        }

        /// <summary>Field number for the "headid" field.</summary>
        public const int HeadidFieldNumber = 6;
        private int headid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Headid {
          get { return headid_; }
          set {
            headid_ = value;
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 7;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "mp" field.</summary>
        public const int MpFieldNumber = 8;
        private int mp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mp {
          get { return mp_; }
          set {
            mp_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 9;
        private int pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "masterguid" field.</summary>
        public const int MasterguidFieldNumber = 10;
        private ulong masterguid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Masterguid {
          get { return masterguid_; }
          set {
            masterguid_ = value;
          }
        }

        /// <summary>Field number for the "kills" field.</summary>
        public const int KillsFieldNumber = 11;
        private int kills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Kills {
          get { return kills_; }
          set {
            kills_ = value;
          }
        }

        /// <summary>Field number for the "assist" field.</summary>
        public const int AssistFieldNumber = 12;
        private int assist_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Assist {
          get { return assist_; }
          set {
            assist_ = value;
          }
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 13;
        private int heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (Nickname != other.Nickname) return false;
          if (Level != other.Level) return false;
          if (Deadtimes != other.Deadtimes) return false;
          if (Campid != other.Campid) return false;
          if (Headid != other.Headid) return false;
          if (Hp != other.Hp) return false;
          if (Mp != other.Mp) return false;
          if (Pos != other.Pos) return false;
          if (Masterguid != other.Masterguid) return false;
          if (Kills != other.Kills) return false;
          if (Assist != other.Assist) return false;
          if (Heroid != other.Heroid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
          if (Campid != 0) hash ^= Campid.GetHashCode();
          if (Headid != 0) hash ^= Headid.GetHashCode();
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Mp != 0) hash ^= Mp.GetHashCode();
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (Masterguid != 0UL) hash ^= Masterguid.GetHashCode();
          if (Kills != 0) hash ^= Kills.GetHashCode();
          if (Assist != 0) hash ^= Assist.GetHashCode();
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Guid);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Nickname);
          }
          if (Level != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Level);
          }
          if (Deadtimes != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Deadtimes);
          }
          if (Campid != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Campid);
          }
          if (Headid != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Headid);
          }
          if (Hp != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Hp);
          }
          if (Mp != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Mp);
          }
          if (Pos != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Pos);
          }
          if (Masterguid != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(Masterguid);
          }
          if (Kills != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Kills);
          }
          if (Assist != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Assist);
          }
          if (Heroid != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(Heroid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (Deadtimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadtimes);
          }
          if (Campid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Campid);
          }
          if (Headid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
          }
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
          }
          if (Mp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
          }
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
          }
          if (Masterguid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Masterguid);
          }
          if (Kills != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kills);
          }
          if (Assist != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assist);
          }
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroInfo other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.Deadtimes != 0) {
            Deadtimes = other.Deadtimes;
          }
          if (other.Campid != 0) {
            Campid = other.Campid;
          }
          if (other.Headid != 0) {
            Headid = other.Headid;
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Mp != 0) {
            Mp = other.Mp;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.Masterguid != 0UL) {
            Masterguid = other.Masterguid;
          }
          if (other.Kills != 0) {
            Kills = other.Kills;
          }
          if (other.Assist != 0) {
            Assist = other.Assist;
          }
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Guid = input.ReadUInt64();
                break;
              }
              case 18: {
                Nickname = input.ReadString();
                break;
              }
              case 24: {
                Level = input.ReadInt32();
                break;
              }
              case 32: {
                Deadtimes = input.ReadInt32();
                break;
              }
              case 40: {
                Campid = input.ReadInt32();
                break;
              }
              case 48: {
                Headid = input.ReadInt32();
                break;
              }
              case 56: {
                Hp = input.ReadInt32();
                break;
              }
              case 64: {
                Mp = input.ReadInt32();
                break;
              }
              case 72: {
                Pos = input.ReadInt32();
                break;
              }
              case 80: {
                Masterguid = input.ReadUInt64();
                break;
              }
              case 88: {
                Kills = input.ReadInt32();
                break;
              }
              case 96: {
                Assist = input.ReadInt32();
                break;
              }
              case 104: {
                Heroid = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BaseGoodsInfo : pb::IMessage<BaseGoodsInfo> {
        private static readonly pb::MessageParser<BaseGoodsInfo> _parser = new pb::MessageParser<BaseGoodsInfo>(() => new BaseGoodsInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BaseGoodsInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.BroadcastBattleHeroInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseGoodsInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseGoodsInfo(BaseGoodsInfo other) : this() {
          index_ = other.index_;
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseGoodsInfo Clone() {
          return new BaseGoodsInfo(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 13;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 14;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BaseGoodsInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BaseGoodsInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(Index);
          }
          if (Id != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BaseGoodsInfo other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 104: {
                Index = input.ReadInt32();
                break;
              }
              case 112: {
                Id = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgToGCFromCS_NotifyGuideLastComStep
  /// </summary>
  public sealed partial class GuideLastStep : pb::IMessage<GuideLastStep> {
    private static readonly pb::MessageParser<GuideLastStep> _parser = new pb::MessageParser<GuideLastStep>(() => new GuideLastStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideLastStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideLastStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideLastStep(GuideLastStep other) : this() {
      msgid_ = other.msgid_;
      ifComp_ = other.ifComp_;
      stepid_ = other.stepid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideLastStep Clone() {
      return new GuideLastStep(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ifComp" field.</summary>
    public const int IfCompFieldNumber = 2;
    private bool ifComp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfComp {
      get { return ifComp_; }
      set {
        ifComp_ = value;
      }
    }

    /// <summary>Field number for the "stepid" field.</summary>
    public const int StepidFieldNumber = 3;
    private int stepid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stepid {
      get { return stepid_; }
      set {
        stepid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideLastStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideLastStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (IfComp != other.IfComp) return false;
      if (Stepid != other.Stepid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (IfComp != false) hash ^= IfComp.GetHashCode();
      if (Stepid != 0) hash ^= Stepid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (IfComp != false) {
        output.WriteRawTag(16);
        output.WriteBool(IfComp);
      }
      if (Stepid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stepid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (IfComp != false) {
        size += 1 + 1;
      }
      if (Stepid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stepid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideLastStep other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.IfComp != false) {
        IfComp = other.IfComp;
      }
      if (other.Stepid != 0) {
        Stepid = other.Stepid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            IfComp = input.ReadBool();
            break;
          }
          case 24: {
            Stepid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyUserCLDays
  /// </summary>
  public sealed partial class NotifyUserCLDays : pb::IMessage<NotifyUserCLDays> {
    private static readonly pb::MessageParser<NotifyUserCLDays> _parser = new pb::MessageParser<NotifyUserCLDays>(() => new NotifyUserCLDays());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserCLDays> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserCLDays() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserCLDays(NotifyUserCLDays other) : this() {
      msgid_ = other.msgid_;
      month_ = other.month_;
      today_ = other.today_;
      totalCldays_ = other.totalCldays_;
      cldays_ = other.cldays_;
      isTodayCan_ = other.isTodayCan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserCLDays Clone() {
      return new NotifyUserCLDays(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private uint month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "today" field.</summary>
    public const int TodayFieldNumber = 3;
    private uint today_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Today {
      get { return today_; }
      set {
        today_ = value;
      }
    }

    /// <summary>Field number for the "totalCldays" field.</summary>
    public const int TotalCldaysFieldNumber = 4;
    private uint totalCldays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCldays {
      get { return totalCldays_; }
      set {
        totalCldays_ = value;
      }
    }

    /// <summary>Field number for the "cldays" field.</summary>
    public const int CldaysFieldNumber = 5;
    private uint cldays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cldays {
      get { return cldays_; }
      set {
        cldays_ = value;
      }
    }

    /// <summary>Field number for the "isTodayCan" field.</summary>
    public const int IsTodayCanFieldNumber = 6;
    private bool isTodayCan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTodayCan {
      get { return isTodayCan_; }
      set {
        isTodayCan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserCLDays);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserCLDays other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Month != other.Month) return false;
      if (Today != other.Today) return false;
      if (TotalCldays != other.TotalCldays) return false;
      if (Cldays != other.Cldays) return false;
      if (IsTodayCan != other.IsTodayCan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Today != 0) hash ^= Today.GetHashCode();
      if (TotalCldays != 0) hash ^= TotalCldays.GetHashCode();
      if (Cldays != 0) hash ^= Cldays.GetHashCode();
      if (IsTodayCan != false) hash ^= IsTodayCan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Month);
      }
      if (Today != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Today);
      }
      if (TotalCldays != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalCldays);
      }
      if (Cldays != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Cldays);
      }
      if (IsTodayCan != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTodayCan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
      }
      if (Today != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Today);
      }
      if (TotalCldays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCldays);
      }
      if (Cldays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cldays);
      }
      if (IsTodayCan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserCLDays other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Today != 0) {
        Today = other.Today;
      }
      if (other.TotalCldays != 0) {
        TotalCldays = other.TotalCldays;
      }
      if (other.Cldays != 0) {
        Cldays = other.Cldays;
      }
      if (other.IsTodayCan != false) {
        IsTodayCan = other.IsTodayCan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Month = input.ReadUInt32();
            break;
          }
          case 24: {
            Today = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalCldays = input.ReadUInt32();
            break;
          }
          case 40: {
            Cldays = input.ReadUInt32();
            break;
          }
          case 48: {
            IsTodayCan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyNotice
  /// </summary>
  public sealed partial class GameNotice : pb::IMessage<GameNotice> {
    private static readonly pb::MessageParser<GameNotice> _parser = new pb::MessageParser<GameNotice>(() => new GameNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotice(GameNotice other) : this() {
      msgid_ = other.msgid_;
      notice_ = other.notice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNotice Clone() {
      return new GameNotice(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.GameNotice.Types.Notice> _repeated_notice_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.GameNotice.Types.Notice.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.GameNotice.Types.Notice> notice_ = new pbc::RepeatedField<global::GSToGC.GameNotice.Types.Notice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.GameNotice.Types.Notice> Notice {
      get { return notice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!notice_.Equals(other.notice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= notice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      notice_.WriteTo(output, _repeated_notice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += notice_.CalculateSize(_repeated_notice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNotice other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      notice_.Add(other.notice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            notice_.AddEntriesFrom(input, _repeated_notice_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameNotice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Notice : pb::IMessage<Notice> {
        private static readonly pb::MessageParser<Notice> _parser = new pb::MessageParser<Notice>(() => new Notice());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Notice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.GameNotice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice(Notice other) : this() {
          title_ = other.title_;
          flag_ = other.flag_;
          status_ = other.status_;
          priority_ = other.priority_;
          notice_ = other.notice_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Notice Clone() {
          return new Notice(this);
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 1;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "flag" field.</summary>
        public const int FlagFieldNumber = 2;
        private uint flag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Flag {
          get { return flag_; }
          set {
            flag_ = value;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 3;
        private uint status_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 4;
        private uint priority_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Priority {
          get { return priority_; }
          set {
            priority_ = value;
          }
        }

        /// <summary>Field number for the "notice" field.</summary>
        public const int Notice_FieldNumber = 5;
        private string notice_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Notice_ {
          get { return notice_; }
          set {
            notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Notice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Notice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Title != other.Title) return false;
          if (Flag != other.Flag) return false;
          if (Status != other.Status) return false;
          if (Priority != other.Priority) return false;
          if (Notice_ != other.Notice_) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Flag != 0) hash ^= Flag.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (Priority != 0) hash ^= Priority.GetHashCode();
          if (Notice_.Length != 0) hash ^= Notice_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Title.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Title);
          }
          if (Flag != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Flag);
          }
          if (Status != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Status);
          }
          if (Priority != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Priority);
          }
          if (Notice_.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Notice_);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Flag != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
          }
          if (Priority != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
          }
          if (Notice_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice_);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Notice other) {
          if (other == null) {
            return;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Flag != 0) {
            Flag = other.Flag;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.Priority != 0) {
            Priority = other.Priority;
          }
          if (other.Notice_.Length != 0) {
            Notice_ = other.Notice_;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Title = input.ReadString();
                break;
              }
              case 16: {
                Flag = input.ReadUInt32();
                break;
              }
              case 24: {
                Status = input.ReadUInt32();
                break;
              }
              case 32: {
                Priority = input.ReadUInt32();
                break;
              }
              case 42: {
                Notice_ = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyUserGuideSetups
  /// </summary>
  public sealed partial class GuideSteps : pb::IMessage<GuideSteps> {
    private static readonly pb::MessageParser<GuideSteps> _parser = new pb::MessageParser<GuideSteps>(() => new GuideSteps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideSteps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSteps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSteps(GuideSteps other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      type_ = other.type_;
      ifComp_ = other.ifComp_;
      steps_ = other.steps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSteps Clone() {
      return new GuideSteps(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ifComp" field.</summary>
    public const int IfCompFieldNumber = 4;
    private bool ifComp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfComp {
      get { return ifComp_; }
      set {
        ifComp_ = value;
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 5;
    private string steps_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steps {
      get { return steps_; }
      set {
        steps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideSteps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideSteps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      if (IfComp != other.IfComp) return false;
      if (Steps != other.Steps) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IfComp != false) hash ^= IfComp.GetHashCode();
      if (Steps.Length != 0) hash ^= Steps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (IfComp != false) {
        output.WriteRawTag(32);
        output.WriteBool(IfComp);
      }
      if (Steps.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Steps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IfComp != false) {
        size += 1 + 1;
      }
      if (Steps.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideSteps other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IfComp != false) {
        IfComp = other.IfComp;
      }
      if (other.Steps.Length != 0) {
        Steps = other.Steps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            IfComp = input.ReadBool();
            break;
          }
          case 42: {
            Steps = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyPing
  ///eMsgToGCFromGS_GCAskPingRet
  /// </summary>
  public sealed partial class PingRet : pb::IMessage<PingRet> {
    private static readonly pb::MessageParser<PingRet> _parser = new pb::MessageParser<PingRet>(() => new PingRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet(PingRet other) : this() {
      msgid_ = other.msgid_;
      time_ = other.time_;
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRet Clone() {
      return new PingRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private int flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Time != other.Time) return false;
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (Flag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyQueryNickNameRet
  /// </summary>
  public sealed partial class NotifyQueryNickNameRet : pb::IMessage<NotifyQueryNickNameRet> {
    private static readonly pb::MessageParser<NotifyQueryNickNameRet> _parser = new pb::MessageParser<NotifyQueryNickNameRet>(() => new NotifyQueryNickNameRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyQueryNickNameRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyQueryNickNameRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyQueryNickNameRet(NotifyQueryNickNameRet other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyQueryNickNameRet Clone() {
      return new NotifyQueryNickNameRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo> info_ = new pbc::RepeatedField<global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyQueryNickNameRet.Types.QueryInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyQueryNickNameRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyQueryNickNameRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyQueryNickNameRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyQueryNickNameRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class QueryInfo : pb::IMessage<QueryInfo> {
        private static readonly pb::MessageParser<QueryInfo> _parser = new pb::MessageParser<QueryInfo>(() => new QueryInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QueryInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyQueryNickNameRet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryInfo(QueryInfo other) : this() {
          nickname_ = other.nickname_;
          headid_ = other.headid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryInfo Clone() {
          return new QueryInfo(this);
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 1;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "headid" field.</summary>
        public const int HeadidFieldNumber = 2;
        private int headid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Headid {
          get { return headid_; }
          set {
            headid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as QueryInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QueryInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Nickname != other.Nickname) return false;
          if (Headid != other.Headid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Headid != 0) hash ^= Headid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Nickname.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Nickname);
          }
          if (Headid != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Headid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Headid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QueryInfo other) {
          if (other == null) {
            return;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Headid != 0) {
            Headid = other.Headid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Nickname = input.ReadString();
                break;
              }
              case 16: {
                Headid = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SNSInfo : pb::IMessage<SNSInfo> {
    private static readonly pb::MessageParser<SNSInfo> _parser = new pb::MessageParser<SNSInfo>(() => new SNSInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SNSInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNSInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNSInfo(SNSInfo other) : this() {
      type_ = other.type_;
      nickname_ = other.nickname_;
      headid_ = other.headid_;
      status_ = other.status_;
      guididx_ = other.guididx_;
      viplv_ = other.viplv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNSInfo Clone() {
      return new SNSInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headid" field.</summary>
    public const int HeadidFieldNumber = 3;
    private uint headid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Headid {
      get { return headid_; }
      set {
        headid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "guididx" field.</summary>
    public const int GuididxFieldNumber = 5;
    private ulong guididx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guididx {
      get { return guididx_; }
      set {
        guididx_ = value;
      }
    }

    /// <summary>Field number for the "viplv" field.</summary>
    public const int ViplvFieldNumber = 6;
    private uint viplv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Viplv {
      get { return viplv_; }
      set {
        viplv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SNSInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SNSInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Nickname != other.Nickname) return false;
      if (Headid != other.Headid) return false;
      if (Status != other.Status) return false;
      if (Guididx != other.Guididx) return false;
      if (Viplv != other.Viplv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Headid != 0) hash ^= Headid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Guididx != 0UL) hash ^= Guididx.GetHashCode();
      if (Viplv != 0) hash ^= Viplv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (Headid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Headid);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Guididx != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Guididx);
      }
      if (Viplv != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Viplv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Headid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Headid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Guididx != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guididx);
      }
      if (Viplv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Viplv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SNSInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Headid != 0) {
        Headid = other.Headid;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Guididx != 0UL) {
        Guididx = other.Guididx;
      }
      if (other.Viplv != 0) {
        Viplv = other.Viplv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 24: {
            Headid = input.ReadUInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Guididx = input.ReadUInt64();
            break;
          }
          case 48: {
            Viplv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyUserFriendsList
  /// </summary>
  public sealed partial class NotifyUserSNSList : pb::IMessage<NotifyUserSNSList> {
    private static readonly pb::MessageParser<NotifyUserSNSList> _parser = new pb::MessageParser<NotifyUserSNSList>(() => new NotifyUserSNSList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserSNSList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSList(NotifyUserSNSList other) : this() {
      msgnum_ = other.msgnum_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSList Clone() {
      return new NotifyUserSNSList(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.SNSInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.SNSInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.SNSInfo> info_ = new pbc::RepeatedField<global::GSToGC.SNSInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.SNSInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserSNSList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserSNSList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserSNSList other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg__NotifyBattleManagerChange
  /// </summary>
  public sealed partial class NotifyBattleManagerChange : pb::IMessage<NotifyBattleManagerChange> {
    private static readonly pb::MessageParser<NotifyBattleManagerChange> _parser = new pb::MessageParser<NotifyBattleManagerChange>(() => new NotifyBattleManagerChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBattleManagerChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleManagerChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleManagerChange(NotifyBattleManagerChange other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBattleManagerChange Clone() {
      return new NotifyBattleManagerChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBattleManagerChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBattleManagerChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBattleManagerChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBeAddFriendMsg
  /// </summary>
  public sealed partial class NotifyBeAddFriendMs : pb::IMessage<NotifyBeAddFriendMs> {
    private static readonly pb::MessageParser<NotifyBeAddFriendMs> _parser = new pb::MessageParser<NotifyBeAddFriendMs>(() => new NotifyBeAddFriendMs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBeAddFriendMs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBeAddFriendMs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBeAddFriendMs(NotifyBeAddFriendMs other) : this() {
      msgnum_ = other.msgnum_;
      sendnickname_ = other.sendnickname_;
      recnickname_ = other.recnickname_;
      sdnderGuididx_ = other.sdnderGuididx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBeAddFriendMs Clone() {
      return new NotifyBeAddFriendMs(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "sendnickname" field.</summary>
    public const int SendnicknameFieldNumber = 2;
    private string sendnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sendnickname {
      get { return sendnickname_; }
      set {
        sendnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recnickname" field.</summary>
    public const int RecnicknameFieldNumber = 3;
    private string recnickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recnickname {
      get { return recnickname_; }
      set {
        recnickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdnder_guididx" field.</summary>
    public const int SdnderGuididxFieldNumber = 4;
    private ulong sdnderGuididx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SdnderGuididx {
      get { return sdnderGuididx_; }
      set {
        sdnderGuididx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBeAddFriendMs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBeAddFriendMs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if (Sendnickname != other.Sendnickname) return false;
      if (Recnickname != other.Recnickname) return false;
      if (SdnderGuididx != other.SdnderGuididx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (Sendnickname.Length != 0) hash ^= Sendnickname.GetHashCode();
      if (Recnickname.Length != 0) hash ^= Recnickname.GetHashCode();
      if (SdnderGuididx != 0UL) hash ^= SdnderGuididx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      if (Sendnickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sendnickname);
      }
      if (Recnickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Recnickname);
      }
      if (SdnderGuididx != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SdnderGuididx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      if (Sendnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sendnickname);
      }
      if (Recnickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recnickname);
      }
      if (SdnderGuididx != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SdnderGuididx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBeAddFriendMs other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.Sendnickname.Length != 0) {
        Sendnickname = other.Sendnickname;
      }
      if (other.Recnickname.Length != 0) {
        Recnickname = other.Recnickname;
      }
      if (other.SdnderGuididx != 0UL) {
        SdnderGuididx = other.SdnderGuididx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Sendnickname = input.ReadString();
            break;
          }
          case 26: {
            Recnickname = input.ReadString();
            break;
          }
          case 32: {
            SdnderGuididx = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyMsgFromUser
  /// </summary>
  public sealed partial class NotifyMsgFromUser : pb::IMessage<NotifyMsgFromUser> {
    private static readonly pb::MessageParser<NotifyMsgFromUser> _parser = new pb::MessageParser<NotifyMsgFromUser>(() => new NotifyMsgFromUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMsgFromUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMsgFromUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMsgFromUser(NotifyMsgFromUser other) : this() {
      msgnum_ = other.msgnum_;
      guididx_ = other.guididx_;
      nickname_ = other.nickname_;
      headid_ = other.headid_;
      chatstr_ = other.chatstr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMsgFromUser Clone() {
      return new NotifyMsgFromUser(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "guididx" field.</summary>
    public const int GuididxFieldNumber = 2;
    private ulong guididx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guididx {
      get { return guididx_; }
      set {
        guididx_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headid" field.</summary>
    public const int HeadidFieldNumber = 4;
    private int headid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Headid {
      get { return headid_; }
      set {
        headid_ = value;
      }
    }

    /// <summary>Field number for the "chatstr" field.</summary>
    public const int ChatstrFieldNumber = 5;
    private string chatstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chatstr {
      get { return chatstr_; }
      set {
        chatstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMsgFromUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMsgFromUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if (Guididx != other.Guididx) return false;
      if (Nickname != other.Nickname) return false;
      if (Headid != other.Headid) return false;
      if (Chatstr != other.Chatstr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (Guididx != 0UL) hash ^= Guididx.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Headid != 0) hash ^= Headid.GetHashCode();
      if (Chatstr.Length != 0) hash ^= Chatstr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      if (Guididx != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guididx);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Headid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Headid);
      }
      if (Chatstr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Chatstr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      if (Guididx != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guididx);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Headid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
      }
      if (Chatstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chatstr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMsgFromUser other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.Guididx != 0UL) {
        Guididx = other.Guididx;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Headid != 0) {
        Headid = other.Headid;
      }
      if (other.Chatstr.Length != 0) {
        Chatstr = other.Chatstr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guididx = input.ReadUInt64();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Headid = input.ReadInt32();
            break;
          }
          case 42: {
            Chatstr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyUserRemoveList
  /// </summary>
  public sealed partial class NotifyUserSNSListChange : pb::IMessage<NotifyUserSNSListChange> {
    private static readonly pb::MessageParser<NotifyUserSNSListChange> _parser = new pb::MessageParser<NotifyUserSNSListChange>(() => new NotifyUserSNSListChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyUserSNSListChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSListChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSListChange(NotifyUserSNSListChange other) : this() {
      msgnum_ = other.msgnum_;
      guididx_ = other.guididx_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyUserSNSListChange Clone() {
      return new NotifyUserSNSListChange(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "guididx" field.</summary>
    public const int GuididxFieldNumber = 2;
    private ulong guididx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guididx {
      get { return guididx_; }
      set {
        guididx_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyUserSNSListChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyUserSNSListChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if (Guididx != other.Guididx) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (Guididx != 0UL) hash ^= Guididx.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      if (Guididx != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guididx);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      if (Guididx != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guididx);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyUserSNSListChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.Guididx != 0UL) {
        Guididx = other.Guididx;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guididx = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_UserBeInvitedToBattle
  /// </summary>
  public sealed partial class UserBeInvitedToBattle : pb::IMessage<UserBeInvitedToBattle> {
    private static readonly pb::MessageParser<UserBeInvitedToBattle> _parser = new pb::MessageParser<UserBeInvitedToBattle>(() => new UserBeInvitedToBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBeInvitedToBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBeInvitedToBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBeInvitedToBattle(UserBeInvitedToBattle other) : this() {
      msgnum_ = other.msgnum_;
      battleid_ = other.battleid_;
      pwd_ = other.pwd_;
      invitor_ = other.invitor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBeInvitedToBattle Clone() {
      return new UserBeInvitedToBattle(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private int battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int PwdFieldNumber = 3;
    private string pwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Invitor" field.</summary>
    public const int InvitorFieldNumber = 4;
    private string invitor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Invitor {
      get { return invitor_; }
      set {
        invitor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBeInvitedToBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBeInvitedToBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if (Battleid != other.Battleid) return false;
      if (Pwd != other.Pwd) return false;
      if (Invitor != other.Invitor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (Battleid != 0) hash ^= Battleid.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (Invitor.Length != 0) hash ^= Invitor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      if (Battleid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Battleid);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pwd);
      }
      if (Invitor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Invitor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      if (Battleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battleid);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (Invitor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Invitor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBeInvitedToBattle other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.Battleid != 0) {
        Battleid = other.Battleid;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      if (other.Invitor.Length != 0) {
        Invitor = other.Invitor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadInt32();
            break;
          }
          case 26: {
            Pwd = input.ReadString();
            break;
          }
          case 34: {
            Invitor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg__NotifyAFPData
  /// </summary>
  public sealed partial class NotifyAFPData : pb::IMessage<NotifyAFPData> {
    private static readonly pb::MessageParser<NotifyAFPData> _parser = new pb::MessageParser<NotifyAFPData>(() => new NotifyAFPData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyAFPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAFPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAFPData(NotifyAFPData other) : this() {
      msgnum_ = other.msgnum_;
      guid_ = other.guid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAFPData Clone() {
      return new NotifyAFPData(this);
    }

    /// <summary>Field number for the "msgnum" field.</summary>
    public const int MsgnumFieldNumber = 1;
    private global::GSToGC.MsgID msgnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgnum {
      get { return msgnum_; }
      set {
        msgnum_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyAFPData.Types.FPInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::GSToGC.NotifyAFPData.Types.FPInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyAFPData.Types.FPInfo> info_ = new pbc::RepeatedField<global::GSToGC.NotifyAFPData.Types.FPInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyAFPData.Types.FPInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyAFPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyAFPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgnum != other.Msgnum) return false;
      if (Guid != other.Guid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgnum != 0) hash ^= Msgnum.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgnum != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgnum);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgnum);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyAFPData other) {
      if (other == null) {
        return;
      }
      if (other.Msgnum != 0) {
        Msgnum = other.Msgnum;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgnum_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyAFPData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EnumFpType {
        [pbr::OriginalName("unknow")] Unknow = 0,
        /// <summary>
        ///物理伤害
        /// </summary>
        [pbr::OriginalName("PhyHurt")] PhyHurt = 1,
        /// <summary>
        ///魔法伤害
        /// </summary>
        [pbr::OriginalName("MagicHurt")] MagicHurt = 2,
        /// <summary>
        ///当前HP
        /// </summary>
        [pbr::OriginalName("CurHP")] CurHp = 3,
        /// <summary>
        ///当前MP
        /// </summary>
        [pbr::OriginalName("CurMP")] CurMp = 4,
        /// <summary>
        ///物攻
        /// </summary>
        [pbr::OriginalName("PhyAttack")] PhyAttack = 5,
        /// <summary>
        ///魔攻
        /// </summary>
        [pbr::OriginalName("MagicAttack")] MagicAttack = 6,
        /// <summary>
        ///物抗
        /// </summary>
        [pbr::OriginalName("PhyDefense")] PhyDefense = 7,
        /// <summary>
        ///魔抗
        /// </summary>
        [pbr::OriginalName("MagicDefense")] MagicDefense = 8,
        /// <summary>
        ///移动速度
        /// </summary>
        [pbr::OriginalName("MoveSpeed")] MoveSpeed = 9,
        /// <summary>
        ///攻速
        /// </summary>
        [pbr::OriginalName("AttackSpeed")] AttackSpeed = 10,
        /// <summary>
        ///最大MP
        /// </summary>
        [pbr::OriginalName("MaxHP")] MaxHp = 11,
        /// <summary>
        ///最大HP
        /// </summary>
        [pbr::OriginalName("MaxMP")] MaxMp = 12,
        /// <summary>
        ///HP回复
        /// </summary>
        [pbr::OriginalName("HPRecoverRate")] HprecoverRate = 13,
        /// <summary>
        ///MP回复
        /// </summary>
        [pbr::OriginalName("MPRecoverRate")] MprecoverRate = 14,
        /// <summary>
        ///复活时间	
        /// </summary>
        [pbr::OriginalName("ReliveTime")] ReliveTime = 15,
        /// <summary>
        ///昏迷
        /// </summary>
        [pbr::OriginalName("Dizziness")] Dizziness = 16,
        /// <summary>
        ///沉默
        /// </summary>
        [pbr::OriginalName("Silence")] Silence = 17,
        /// <summary>
        ///未使用
        /// </summary>
        [pbr::OriginalName("PosMove")] PosMove = 18,
        /// <summary>
        ///未使用
        /// </summary>
        [pbr::OriginalName("Rebound")] Rebound = 19,
        /// <summary>
        ///物理吸血
        /// </summary>
        [pbr::OriginalName("PhySuckBlood")] PhySuckBlood = 20,
        /// <summary>
        ///缴械
        /// </summary>
        [pbr::OriginalName("Disarm")] Disarm = 21,
        /// <summary>
        ///束缚
        /// </summary>
        [pbr::OriginalName("Restrain")] Restrain = 22,
        /// <summary>
        ///暴击概率
        /// </summary>
        [pbr::OriginalName("CriPersent")] CriPersent = 23,
        /// <summary>
        ///暴击伤害加成
        /// </summary>
        [pbr::OriginalName("CriHarm")] CriHarm = 24,
        /// <summary>
        ///金钱回复
        /// </summary>
        [pbr::OriginalName("CPRecover")] Cprecover = 25,
        /// <summary>
        ///被动
        /// </summary>
        [pbr::OriginalName("PassitiveSkill")] PassitiveSkill = 26,
        /// <summary>
        ///隐身
        /// </summary>
        [pbr::OriginalName("Invisible")] Invisible = 27,
        /// <summary>
        ///射程
        /// </summary>
        [pbr::OriginalName("AttackDist")] AttackDist = 28,
        /// <summary>
        ///真实伤害
        /// </summary>
        [pbr::OriginalName("TrueHurt")] TrueHurt = 29,
        /// <summary>
        ///物理穿透数值
        /// </summary>
        [pbr::OriginalName("PhyPassNum")] PhyPassNum = 30,
        /// <summary>
        ///物理穿透比例
        /// </summary>
        [pbr::OriginalName("PhyPassPercent")] PhyPassPercent = 31,
        /// <summary>
        ///魔法穿透数值
        /// </summary>
        [pbr::OriginalName("MagicPassNum")] MagicPassNum = 32,
        /// <summary>
        ///魔法穿透比例
        /// </summary>
        [pbr::OriginalName("MagicPassPercent")] MagicPassPercent = 33,
        /// <summary>
        ///冷却缩减
        /// </summary>
        [pbr::OriginalName("CooldownReduce")] CooldownReduce = 34,
        /// <summary>
        ///物理减伤千分比
        /// </summary>
        [pbr::OriginalName("PhyDmgReduce")] PhyDmgReduce = 35,
        /// <summary>
        ///魔法减伤千分比
        /// </summary>
        [pbr::OriginalName("MagicDmgReduce")] MagicDmgReduce = 36,
        /// <summary>
        ///真实减伤千分比
        /// </summary>
        [pbr::OriginalName("TrueDmgReduce")] TrueDmgReduce = 37,
        /// <summary>
        ///物理减伤数值
        /// </summary>
        [pbr::OriginalName("PhyDmgReduceNum")] PhyDmgReduceNum = 38,
        /// <summary>
        ///魔法减伤数值
        /// </summary>
        [pbr::OriginalName("MagicDmgReduceNum")] MagicDmgReduceNum = 39,
        /// <summary>
        ///真实减伤数值
        /// </summary>
        [pbr::OriginalName("TrueDmgReduceNum")] TrueDmgReduceNum = 40,
        /// <summary>
        ///法术吸血
        /// </summary>
        [pbr::OriginalName("MagicSuckBlood")] MagicSuckBlood = 41,
      }

      public sealed partial class FPInfo : pb::IMessage<FPInfo> {
        private static readonly pb::MessageParser<FPInfo> _parser = new pb::MessageParser<FPInfo>(() => new FPInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FPInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyAFPData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPInfo(FPInfo other) : this() {
          type_ = other.type_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPInfo Clone() {
          return new FPInfo(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FPInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FPInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Value != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Type);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FPInfo other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = input.ReadInt32();
                break;
              }
              case 16: {
                Value = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???nNetMsg_NotifyUserBaseInfo
  ///eMsgToGCFromGS_NotifyUserBaseInfo
  /// </summary>
  public sealed partial class UserBaseInfo : pb::IMessage<UserBaseInfo> {
    private static readonly pb::MessageParser<UserBaseInfo> _parser = new pb::MessageParser<UserBaseInfo>(() => new UserBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfo(UserBaseInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      name_ = other.name_;
      nickname_ = other.nickname_;
      headid_ = other.headid_;
      sex_ = other.sex_;
      curscore_ = other.curscore_;
      curdiamoand_ = other.curdiamoand_;
      curgold_ = other.curgold_;
      mapid_ = other.mapid_;
      ifreconnect_ = other.ifreconnect_;
      battleid_ = other.battleid_;
      level_ = other.level_;
      vipLevel_ = other.vipLevel_;
      vipScore_ = other.vipScore_;
      curExp_ = other.curExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfo Clone() {
      return new UserBaseInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headid" field.</summary>
    public const int HeadidFieldNumber = 5;
    private int headid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Headid {
      get { return headid_; }
      set {
        headid_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "curscore" field.</summary>
    public const int CurscoreFieldNumber = 7;
    private long curscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curscore {
      get { return curscore_; }
      set {
        curscore_ = value;
      }
    }

    /// <summary>Field number for the "curdiamoand" field.</summary>
    public const int CurdiamoandFieldNumber = 8;
    private long curdiamoand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curdiamoand {
      get { return curdiamoand_; }
      set {
        curdiamoand_ = value;
      }
    }

    /// <summary>Field number for the "curgold" field.</summary>
    public const int CurgoldFieldNumber = 9;
    private long curgold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curgold {
      get { return curgold_; }
      set {
        curgold_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 11;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "ifreconnect" field.</summary>
    public const int IfreconnectFieldNumber = 12;
    private bool ifreconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ifreconnect {
      get { return ifreconnect_; }
      set {
        ifreconnect_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 13;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 14;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 15;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "vip_score" field.</summary>
    public const int VipScoreFieldNumber = 16;
    private int vipScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipScore {
      get { return vipScore_; }
      set {
        vipScore_ = value;
      }
    }

    /// <summary>Field number for the "cur_exp" field.</summary>
    public const int CurExpFieldNumber = 17;
    private int curExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurExp {
      get { return curExp_; }
      set {
        curExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Nickname != other.Nickname) return false;
      if (Headid != other.Headid) return false;
      if (Sex != other.Sex) return false;
      if (Curscore != other.Curscore) return false;
      if (Curdiamoand != other.Curdiamoand) return false;
      if (Curgold != other.Curgold) return false;
      if (Mapid != other.Mapid) return false;
      if (Ifreconnect != other.Ifreconnect) return false;
      if (Battleid != other.Battleid) return false;
      if (Level != other.Level) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipScore != other.VipScore) return false;
      if (CurExp != other.CurExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Headid != 0) hash ^= Headid.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Curscore != 0L) hash ^= Curscore.GetHashCode();
      if (Curdiamoand != 0L) hash ^= Curdiamoand.GetHashCode();
      if (Curgold != 0L) hash ^= Curgold.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Ifreconnect != false) hash ^= Ifreconnect.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (VipScore != 0) hash ^= VipScore.GetHashCode();
      if (CurExp != 0) hash ^= CurExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nickname);
      }
      if (Headid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Headid);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (Curscore != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Curscore);
      }
      if (Curdiamoand != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Curdiamoand);
      }
      if (Curgold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Curgold);
      }
      if (Mapid != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Mapid);
      }
      if (Ifreconnect != false) {
        output.WriteRawTag(96);
        output.WriteBool(Ifreconnect);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Battleid);
      }
      if (Level != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Level);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VipLevel);
      }
      if (VipScore != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VipScore);
      }
      if (CurExp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CurExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Headid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Curscore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curscore);
      }
      if (Curdiamoand != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curdiamoand);
      }
      if (Curgold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curgold);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Ifreconnect != false) {
        size += 1 + 1;
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (VipScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VipScore);
      }
      if (CurExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Headid != 0) {
        Headid = other.Headid;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Curscore != 0L) {
        Curscore = other.Curscore;
      }
      if (other.Curdiamoand != 0L) {
        Curdiamoand = other.Curdiamoand;
      }
      if (other.Curgold != 0L) {
        Curgold = other.Curgold;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Ifreconnect != false) {
        Ifreconnect = other.Ifreconnect;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.VipScore != 0) {
        VipScore = other.VipScore;
      }
      if (other.CurExp != 0) {
        CurExp = other.CurExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Nickname = input.ReadString();
            break;
          }
          case 40: {
            Headid = input.ReadInt32();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            Curscore = input.ReadInt64();
            break;
          }
          case 64: {
            Curdiamoand = input.ReadInt64();
            break;
          }
          case 72: {
            Curgold = input.ReadInt64();
            break;
          }
          case 88: {
            Mapid = input.ReadInt32();
            break;
          }
          case 96: {
            Ifreconnect = input.ReadBool();
            break;
          }
          case 104: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 112: {
            Level = input.ReadInt32();
            break;
          }
          case 120: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 128: {
            VipScore = input.ReadInt32();
            break;
          }
          case 136: {
            CurExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySystemAnnounce : pb::IMessage<NotifySystemAnnounce> {
    private static readonly pb::MessageParser<NotifySystemAnnounce> _parser = new pb::MessageParser<NotifySystemAnnounce>(() => new NotifySystemAnnounce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySystemAnnounce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySystemAnnounce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySystemAnnounce(NotifySystemAnnounce other) : this() {
      msgid_ = other.msgid_;
      type_ = other.type_;
      announce_ = other.announce_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySystemAnnounce Clone() {
      return new NotifySystemAnnounce(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "announce" field.</summary>
    public const int AnnounceFieldNumber = 3;
    private string announce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Announce {
      get { return announce_; }
      set {
        announce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySystemAnnounce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySystemAnnounce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Type != other.Type) return false;
      if (Announce != other.Announce) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Announce.Length != 0) hash ^= Announce.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Announce.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Announce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Announce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Announce);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySystemAnnounce other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Announce.Length != 0) {
        Announce = other.Announce;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Announce = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyNetClash
  ///eMsgToGCFromGS_NotifyNetClash
  /// </summary>
  public sealed partial class NetClash : pb::IMessage<NetClash> {
    private static readonly pb::MessageParser<NetClash> _parser = new pb::MessageParser<NetClash>(() => new NetClash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetClash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetClash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetClash(NetClash other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetClash Clone() {
      return new NetClash(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetClash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetClash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetClash other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_WarningToSelectHero
  /// </summary>
  public sealed partial class WarningToSelectHero : pb::IMessage<WarningToSelectHero> {
    private static readonly pb::MessageParser<WarningToSelectHero> _parser = new pb::MessageParser<WarningToSelectHero>(() => new WarningToSelectHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarningToSelectHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningToSelectHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningToSelectHero(WarningToSelectHero other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningToSelectHero Clone() {
      return new WarningToSelectHero(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarningToSelectHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarningToSelectHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarningToSelectHero other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelLeading
  /// </summary>
  public sealed partial class NotifySkillModelLeading : pb::IMessage<NotifySkillModelLeading> {
    private static readonly pb::MessageParser<NotifySkillModelLeading> _parser = new pb::MessageParser<NotifySkillModelLeading>(() => new NotifySkillModelLeading());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelLeading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeading(NotifySkillModelLeading other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      uniqueid_ = other.uniqueid_;
      targuid_ = other.targuid_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelLeading Clone() {
      return new NotifySkillModelLeading(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 5;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelLeading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelLeading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      if (Targuid != other.Targuid) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Uniqueid);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Targuid);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelLeading other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadInt32();
            break;
          }
          case 40: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyErrorCode
  ///eMsgToGCFromGS_GCAskRet
  /// </summary>
  public sealed partial class AskRet : pb::IMessage<AskRet> {
    private static readonly pb::MessageParser<AskRet> _parser = new pb::MessageParser<AskRet>(() => new AskRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRet(AskRet other) : this() {
      msgid_ = other.msgid_;
      askid_ = other.askid_;
      errorcode_ = other.errorcode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRet Clone() {
      return new AskRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "askid" field.</summary>
    public const int AskidFieldNumber = 2;
    private int askid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Askid {
      get { return askid_; }
      set {
        askid_ = value;
      }
    }

    /// <summary>Field number for the "errorcode" field.</summary>
    public const int ErrorcodeFieldNumber = 3;
    private int errorcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errorcode {
      get { return errorcode_; }
      set {
        errorcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Askid != other.Askid) return false;
      if (Errorcode != other.Errorcode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Askid != 0) hash ^= Askid.GetHashCode();
      if (Errorcode != 0) hash ^= Errorcode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Askid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Askid);
      }
      if (Errorcode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Errorcode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Askid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Askid);
      }
      if (Errorcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errorcode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Askid != 0) {
        Askid = other.Askid;
      }
      if (other.Errorcode != 0) {
        Errorcode = other.Errorcode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Askid = input.ReadInt32();
            break;
          }
          case 24: {
            Errorcode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyCSHeroList : pb::IMessage<NotifyCSHeroList> {
    private static readonly pb::MessageParser<NotifyCSHeroList> _parser = new pb::MessageParser<NotifyCSHeroList>(() => new NotifyCSHeroList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyCSHeroList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCSHeroList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCSHeroList(NotifyCSHeroList other) : this() {
      msgid_ = other.msgid_;
      herocfg_ = other.herocfg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCSHeroList Clone() {
      return new NotifyCSHeroList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "herocfg" field.</summary>
    public const int HerocfgFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyCSHeroList.Types.HeroListCfg> _repeated_herocfg_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyCSHeroList.Types.HeroListCfg.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyCSHeroList.Types.HeroListCfg> herocfg_ = new pbc::RepeatedField<global::GSToGC.NotifyCSHeroList.Types.HeroListCfg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyCSHeroList.Types.HeroListCfg> Herocfg {
      get { return herocfg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyCSHeroList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyCSHeroList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!herocfg_.Equals(other.herocfg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= herocfg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      herocfg_.WriteTo(output, _repeated_herocfg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += herocfg_.CalculateSize(_repeated_herocfg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyCSHeroList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      herocfg_.Add(other.herocfg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            herocfg_.AddEntriesFrom(input, _repeated_herocfg_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyCSHeroList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HeroListCfg : pb::IMessage<HeroListCfg> {
        private static readonly pb::MessageParser<HeroListCfg> _parser = new pb::MessageParser<HeroListCfg>(() => new HeroListCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeroListCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyCSHeroList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroListCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroListCfg(HeroListCfg other) : this() {
          heroid_ = other.heroid_;
          expiredTime_ = other.expiredTime_;
          ifFree_ = other.ifFree_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeroListCfg Clone() {
          return new HeroListCfg(this);
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 1;
        private uint heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        /// <summary>Field number for the "expired_time" field.</summary>
        public const int ExpiredTimeFieldNumber = 2;
        private long expiredTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpiredTime {
          get { return expiredTime_; }
          set {
            expiredTime_ = value;
          }
        }

        /// <summary>Field number for the "if_free" field.</summary>
        public const int IfFreeFieldNumber = 3;
        private bool ifFree_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfFree {
          get { return ifFree_; }
          set {
            ifFree_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeroListCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeroListCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Heroid != other.Heroid) return false;
          if (ExpiredTime != other.ExpiredTime) return false;
          if (IfFree != other.IfFree) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (ExpiredTime != 0L) hash ^= ExpiredTime.GetHashCode();
          if (IfFree != false) hash ^= IfFree.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Heroid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Heroid);
          }
          if (ExpiredTime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(ExpiredTime);
          }
          if (IfFree != false) {
            output.WriteRawTag(24);
            output.WriteBool(IfFree);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
          }
          if (ExpiredTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiredTime);
          }
          if (IfFree != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeroListCfg other) {
          if (other == null) {
            return;
          }
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          if (other.ExpiredTime != 0L) {
            ExpiredTime = other.ExpiredTime;
          }
          if (other.IfFree != false) {
            IfFree = other.IfFree;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Heroid = input.ReadUInt32();
                break;
              }
              case 16: {
                ExpiredTime = input.ReadInt64();
                break;
              }
              case 24: {
                IfFree = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class HeroList : pb::IMessage<HeroList> {
    private static readonly pb::MessageParser<HeroList> _parser = new pb::MessageParser<HeroList>(() => new HeroList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList(HeroList other) : this() {
      msgid_ = other.msgid_;
      heroid_ = other.heroid_.Clone();
      timeDiff_ = other.timeDiff_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroList Clone() {
      return new HeroList(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_heroid_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> heroid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Heroid {
      get { return heroid_; }
    }

    /// <summary>Field number for the "timeDiff" field.</summary>
    public const int TimeDiffFieldNumber = 3;
    private long timeDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeDiff {
      get { return timeDiff_; }
      set {
        timeDiff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!heroid_.Equals(other.heroid_)) return false;
      if (TimeDiff != other.TimeDiff) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= heroid_.GetHashCode();
      if (TimeDiff != 0L) hash ^= TimeDiff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      heroid_.WriteTo(output, _repeated_heroid_codec);
      if (TimeDiff != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeDiff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += heroid_.CalculateSize(_repeated_heroid_codec);
      if (TimeDiff != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeDiff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroList other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      heroid_.Add(other.heroid_);
      if (other.TimeDiff != 0L) {
        TimeDiff = other.TimeDiff;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            heroid_.AddEntriesFrom(input, _repeated_heroid_codec);
            break;
          }
          case 24: {
            TimeDiff = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleBaseInfo : pb::IMessage<BattleBaseInfo> {
    private static readonly pb::MessageParser<BattleBaseInfo> _parser = new pb::MessageParser<BattleBaseInfo>(() => new BattleBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBaseInfo(BattleBaseInfo other) : this() {
      msgid_ = other.msgid_;
      battleid_ = other.battleid_;
      mapid_ = other.mapid_;
      ifReconnect_ = other.ifReconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBaseInfo Clone() {
      return new BattleBaseInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "ifReconnect" field.</summary>
    public const int IfReconnectFieldNumber = 4;
    private bool ifReconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfReconnect {
      get { return ifReconnect_; }
      set {
        ifReconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battleid != other.Battleid) return false;
      if (Mapid != other.Mapid) return false;
      if (IfReconnect != other.IfReconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (IfReconnect != false) hash ^= IfReconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
      if (IfReconnect != false) {
        output.WriteRawTag(32);
        output.WriteBool(IfReconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (IfReconnect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.IfReconnect != false) {
        IfReconnect = other.IfReconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 32: {
            IfReconnect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomBaseInfo : pb::IMessage<RoomBaseInfo> {
    private static readonly pb::MessageParser<RoomBaseInfo> _parser = new pb::MessageParser<RoomBaseInfo>(() => new RoomBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBaseInfo(RoomBaseInfo other) : this() {
      msgid_ = other.msgid_;
      roomid_ = other.roomid_;
      mapid_ = other.mapid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBaseInfo Clone() {
      return new RoomBaseInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 2;
    private ulong roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Roomid != other.Roomid) return false;
      if (Mapid != other.Mapid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Roomid != 0UL) hash ^= Roomid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Roomid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Roomid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Roomid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roomid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Roomid != 0UL) {
        Roomid = other.Roomid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Roomid = input.ReadUInt64();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBattleBaseInfo
  ///eMsgToGCFromGS_NotifyBattleSeatPosInfo
  /// </summary>
  public sealed partial class BattleSeatPosInfo : pb::IMessage<BattleSeatPosInfo> {
    private static readonly pb::MessageParser<BattleSeatPosInfo> _parser = new pb::MessageParser<BattleSeatPosInfo>(() => new BattleSeatPosInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSeatPosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSeatPosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSeatPosInfo(BattleSeatPosInfo other) : this() {
      msgid_ = other.msgid_;
      posinfo_ = other.posinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSeatPosInfo Clone() {
      return new BattleSeatPosInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "posinfo" field.</summary>
    public const int PosinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.BattleSeatPosInfo.Types.PosInfo> _repeated_posinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.BattleSeatPosInfo.Types.PosInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.BattleSeatPosInfo.Types.PosInfo> posinfo_ = new pbc::RepeatedField<global::GSToGC.BattleSeatPosInfo.Types.PosInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.BattleSeatPosInfo.Types.PosInfo> Posinfo {
      get { return posinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSeatPosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSeatPosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!posinfo_.Equals(other.posinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= posinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      posinfo_.WriteTo(output, _repeated_posinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += posinfo_.CalculateSize(_repeated_posinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSeatPosInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      posinfo_.Add(other.posinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            posinfo_.AddEntriesFrom(input, _repeated_posinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleSeatPosInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PosInfo : pb::IMessage<PosInfo> {
        private static readonly pb::MessageParser<PosInfo> _parser = new pb::MessageParser<PosInfo>(() => new PosInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PosInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.BattleSeatPosInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosInfo(PosInfo other) : this() {
          pos_ = other.pos_;
          guid_ = other.guid_;
          nickname_ = other.nickname_;
          ifmaster_ = other.ifmaster_;
          ifready_ = other.ifready_;
          headid_ = other.headid_;
          gold_ = other.gold_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosInfo Clone() {
          return new PosInfo(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private int pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 2;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 3;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ifmaster" field.</summary>
        public const int IfmasterFieldNumber = 4;
        private bool ifmaster_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Ifmaster {
          get { return ifmaster_; }
          set {
            ifmaster_ = value;
          }
        }

        /// <summary>Field number for the "ifready" field.</summary>
        public const int IfreadyFieldNumber = 5;
        private bool ifready_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Ifready {
          get { return ifready_; }
          set {
            ifready_ = value;
          }
        }

        /// <summary>Field number for the "headid" field.</summary>
        public const int HeadidFieldNumber = 6;
        private int headid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Headid {
          get { return headid_; }
          set {
            headid_ = value;
          }
        }

        /// <summary>Field number for the "gold" field.</summary>
        public const int GoldFieldNumber = 7;
        private long gold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Gold {
          get { return gold_; }
          set {
            gold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PosInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PosInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pos != other.Pos) return false;
          if (Guid != other.Guid) return false;
          if (Nickname != other.Nickname) return false;
          if (Ifmaster != other.Ifmaster) return false;
          if (Ifready != other.Ifready) return false;
          if (Headid != other.Headid) return false;
          if (Gold != other.Gold) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Ifmaster != false) hash ^= Ifmaster.GetHashCode();
          if (Ifready != false) hash ^= Ifready.GetHashCode();
          if (Headid != 0) hash ^= Headid.GetHashCode();
          if (Gold != 0L) hash ^= Gold.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Pos);
          }
          if (Guid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Guid);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Nickname);
          }
          if (Ifmaster != false) {
            output.WriteRawTag(32);
            output.WriteBool(Ifmaster);
          }
          if (Ifready != false) {
            output.WriteRawTag(40);
            output.WriteBool(Ifready);
          }
          if (Headid != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Headid);
          }
          if (Gold != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(Gold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
          }
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Ifmaster != false) {
            size += 1 + 1;
          }
          if (Ifready != false) {
            size += 1 + 1;
          }
          if (Headid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
          }
          if (Gold != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PosInfo other) {
          if (other == null) {
            return;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Ifmaster != false) {
            Ifmaster = other.Ifmaster;
          }
          if (other.Ifready != false) {
            Ifready = other.Ifready;
          }
          if (other.Headid != 0) {
            Headid = other.Headid;
          }
          if (other.Gold != 0L) {
            Gold = other.Gold;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Pos = input.ReadInt32();
                break;
              }
              case 16: {
                Guid = input.ReadUInt64();
                break;
              }
              case 26: {
                Nickname = input.ReadString();
                break;
              }
              case 32: {
                Ifmaster = input.ReadBool();
                break;
              }
              case 40: {
                Ifready = input.ReadBool();
                break;
              }
              case 48: {
                Headid = input.ReadInt32();
                break;
              }
              case 56: {
                Gold = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyBattleStateChange
  /// </summary>
  public sealed partial class BattleStateChange : pb::IMessage<BattleStateChange> {
    private static readonly pb::MessageParser<BattleStateChange> _parser = new pb::MessageParser<BattleStateChange>(() => new BattleStateChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStateChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStateChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStateChange(BattleStateChange other) : this() {
      msgid_ = other.msgid_;
      state_ = other.state_;
      statetimeleft_ = other.statetimeleft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStateChange Clone() {
      return new BattleStateChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "statetimeleft" field.</summary>
    public const int StatetimeleftFieldNumber = 3;
    private int statetimeleft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Statetimeleft {
      get { return statetimeleft_; }
      set {
        statetimeleft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStateChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStateChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (State != other.State) return false;
      if (Statetimeleft != other.Statetimeleft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Statetimeleft != 0) hash ^= Statetimeleft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Statetimeleft != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Statetimeleft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Statetimeleft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Statetimeleft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStateChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Statetimeleft != 0) {
        Statetimeleft = other.Statetimeleft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Statetimeleft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyCurBattleChange
  /// </summary>
  public sealed partial class CurBattleChange : pb::IMessage<CurBattleChange> {
    private static readonly pb::MessageParser<CurBattleChange> _parser = new pb::MessageParser<CurBattleChange>(() => new CurBattleChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurBattleChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurBattleChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurBattleChange(CurBattleChange other) : this() {
      msgid_ = other.msgid_;
      ssid_ = other.ssid_;
      battleid_ = other.battleid_;
      mapid_ = other.mapid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurBattleChange Clone() {
      return new CurBattleChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 2;
    private int ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 3;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 4;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurBattleChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurBattleChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Ssid != other.Ssid) return false;
      if (Battleid != other.Battleid) return false;
      if (Mapid != other.Mapid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Ssid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ssid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Battleid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mapid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurBattleChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Ssid = input.ReadInt32();
            break;
          }
          case 24: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 32: {
            Mapid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pos : pb::IMessage<Pos> {
    private static readonly pb::MessageParser<Pos> _parser = new pb::MessageParser<Pos>(() => new Pos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos(Pos other) : this() {
      x_ = other.x_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos Clone() {
      return new Pos(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pos other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dir : pb::IMessage<Dir> {
    private static readonly pb::MessageParser<Dir> _parser = new pb::MessageParser<Dir>(() => new Dir());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dir> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dir() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dir(Dir other) : this() {
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dir Clone() {
      return new Dir(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 4;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dir);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dir other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dir other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 32: {
            Angle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GOAppear : pb::IMessage<GOAppear> {
    private static readonly pb::MessageParser<GOAppear> _parser = new pb::MessageParser<GOAppear>(() => new GOAppear());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GOAppear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOAppear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOAppear(GOAppear other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOAppear Clone() {
      return new GOAppear(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.GOAppear.Types.AppearInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.GOAppear.Types.AppearInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.GOAppear.Types.AppearInfo> info_ = new pbc::RepeatedField<global::GSToGC.GOAppear.Types.AppearInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.GOAppear.Types.AppearInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GOAppear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GOAppear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GOAppear other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GOAppear message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AppearInfo : pb::IMessage<AppearInfo> {
        private static readonly pb::MessageParser<AppearInfo> _parser = new pb::MessageParser<AppearInfo>(() => new AppearInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.GOAppear.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearInfo(AppearInfo other) : this() {
          masterguid_ = other.masterguid_;
          objguid_ = other.objguid_;
          camp_ = other.camp_;
          pos_ = other.pos_ != null ? other.pos_.Clone() : null;
          dir_ = other.dir_ != null ? other.dir_.Clone() : null;
          hp_ = other.hp_;
          mp_ = other.mp_;
          objType_ = other.objType_;
          objTypeId_ = other.objTypeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearInfo Clone() {
          return new AppearInfo(this);
        }

        /// <summary>Field number for the "masterguid" field.</summary>
        public const int MasterguidFieldNumber = 1;
        private ulong masterguid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Masterguid {
          get { return masterguid_; }
          set {
            masterguid_ = value;
          }
        }

        /// <summary>Field number for the "objguid" field.</summary>
        public const int ObjguidFieldNumber = 2;
        private ulong objguid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Objguid {
          get { return objguid_; }
          set {
            objguid_ = value;
          }
        }

        /// <summary>Field number for the "camp" field.</summary>
        public const int CampFieldNumber = 3;
        private int camp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Camp {
          get { return camp_; }
          set {
            camp_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 4;
        private global::GSToGC.Pos pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GSToGC.Pos Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "dir" field.</summary>
        public const int DirFieldNumber = 5;
        private global::GSToGC.Dir dir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GSToGC.Dir Dir {
          get { return dir_; }
          set {
            dir_ = value;
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 6;
        private uint hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "mp" field.</summary>
        public const int MpFieldNumber = 7;
        private uint mp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Mp {
          get { return mp_; }
          set {
            mp_ = value;
          }
        }

        /// <summary>Field number for the "obj_type" field.</summary>
        public const int ObjTypeFieldNumber = 8;
        private global::GSToGC.ObjType objType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GSToGC.ObjType ObjType {
          get { return objType_; }
          set {
            objType_ = value;
          }
        }

        /// <summary>Field number for the "obj_type_id" field.</summary>
        public const int ObjTypeIdFieldNumber = 9;
        private uint objTypeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ObjTypeId {
          get { return objTypeId_; }
          set {
            objTypeId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AppearInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Masterguid != other.Masterguid) return false;
          if (Objguid != other.Objguid) return false;
          if (Camp != other.Camp) return false;
          if (!object.Equals(Pos, other.Pos)) return false;
          if (!object.Equals(Dir, other.Dir)) return false;
          if (Hp != other.Hp) return false;
          if (Mp != other.Mp) return false;
          if (ObjType != other.ObjType) return false;
          if (ObjTypeId != other.ObjTypeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Masterguid != 0UL) hash ^= Masterguid.GetHashCode();
          if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
          if (Camp != 0) hash ^= Camp.GetHashCode();
          if (pos_ != null) hash ^= Pos.GetHashCode();
          if (dir_ != null) hash ^= Dir.GetHashCode();
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Mp != 0) hash ^= Mp.GetHashCode();
          if (ObjType != 0) hash ^= ObjType.GetHashCode();
          if (ObjTypeId != 0) hash ^= ObjTypeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Masterguid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Masterguid);
          }
          if (Objguid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Objguid);
          }
          if (Camp != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Camp);
          }
          if (pos_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Pos);
          }
          if (dir_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Dir);
          }
          if (Hp != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Hp);
          }
          if (Mp != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Mp);
          }
          if (ObjType != 0) {
            output.WriteRawTag(64);
            output.WriteEnum((int) ObjType);
          }
          if (ObjTypeId != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(ObjTypeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Masterguid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Masterguid);
          }
          if (Objguid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
          }
          if (Camp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
          }
          if (pos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
          }
          if (dir_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
          }
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
          }
          if (Mp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mp);
          }
          if (ObjType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjType);
          }
          if (ObjTypeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjTypeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearInfo other) {
          if (other == null) {
            return;
          }
          if (other.Masterguid != 0UL) {
            Masterguid = other.Masterguid;
          }
          if (other.Objguid != 0UL) {
            Objguid = other.Objguid;
          }
          if (other.Camp != 0) {
            Camp = other.Camp;
          }
          if (other.pos_ != null) {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            Pos.MergeFrom(other.Pos);
          }
          if (other.dir_ != null) {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            Dir.MergeFrom(other.Dir);
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Mp != 0) {
            Mp = other.Mp;
          }
          if (other.ObjType != 0) {
            ObjType = other.ObjType;
          }
          if (other.ObjTypeId != 0) {
            ObjTypeId = other.ObjTypeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Masterguid = input.ReadUInt64();
                break;
              }
              case 16: {
                Objguid = input.ReadUInt64();
                break;
              }
              case 24: {
                Camp = input.ReadInt32();
                break;
              }
              case 34: {
                if (pos_ == null) {
                  pos_ = new global::GSToGC.Pos();
                }
                input.ReadMessage(pos_);
                break;
              }
              case 42: {
                if (dir_ == null) {
                  dir_ = new global::GSToGC.Dir();
                }
                input.ReadMessage(dir_);
                break;
              }
              case 48: {
                Hp = input.ReadUInt32();
                break;
              }
              case 56: {
                Mp = input.ReadUInt32();
                break;
              }
              case 64: {
                objType_ = (global::GSToGC.ObjType) input.ReadEnum();
                break;
              }
              case 72: {
                ObjTypeId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameObjectDisAppear
  /// </summary>
  public sealed partial class DisappearInfo : pb::IMessage<DisappearInfo> {
    private static readonly pb::MessageParser<DisappearInfo> _parser = new pb::MessageParser<DisappearInfo>(() => new DisappearInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisappearInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisappearInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisappearInfo(DisappearInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisappearInfo Clone() {
      return new DisappearInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_guid_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> guid_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Guid {
      get { return guid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisappearInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisappearInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!guid_.Equals(other.guid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= guid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      guid_.WriteTo(output, _repeated_guid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += guid_.CalculateSize(_repeated_guid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisappearInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      guid_.Add(other.guid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            guid_.AddEntriesFrom(input, _repeated_guid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameObjectFreeState
  /// </summary>
  public sealed partial class FreeState : pb::IMessage<FreeState> {
    private static readonly pb::MessageParser<FreeState> _parser = new pb::MessageParser<FreeState>(() => new FreeState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreeState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeState(FreeState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeState Clone() {
      return new FreeState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreeState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreeState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreeState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameObjectRunState
  /// </summary>
  public sealed partial class RunningState : pb::IMessage<RunningState> {
    private static readonly pb::MessageParser<RunningState> _parser = new pb::MessageParser<RunningState>(() => new RunningState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunningState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningState(RunningState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      movespeed_ = other.movespeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunningState Clone() {
      return new RunningState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "movespeed" field.</summary>
    public const int MovespeedFieldNumber = 5;
    private int movespeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Movespeed {
      get { return movespeed_; }
      set {
        movespeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunningState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunningState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Movespeed != other.Movespeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Movespeed != 0) hash ^= Movespeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (Movespeed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Movespeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Movespeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Movespeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunningState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Movespeed != 0) {
        Movespeed = other.Movespeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 40: {
            Movespeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyPrepareSkill
  /// </summary>
  public sealed partial class PrepareSkillState : pb::IMessage<PrepareSkillState> {
    private static readonly pb::MessageParser<PrepareSkillState> _parser = new pb::MessageParser<PrepareSkillState>(() => new PrepareSkillState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrepareSkillState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareSkillState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareSkillState(PrepareSkillState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      skillid_ = other.skillid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareSkillState Clone() {
      return new PrepareSkillState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 6;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 7;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrepareSkillState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrepareSkillState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (Skillid != other.Skillid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      if (Speed != other.Speed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Targuid);
      }
      if (Speed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrepareSkillState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 48: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 56: {
            Speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyReleaseSkill
  /// </summary>
  public sealed partial class ReleasingSkillState : pb::IMessage<ReleasingSkillState> {
    private static readonly pb::MessageParser<ReleasingSkillState> _parser = new pb::MessageParser<ReleasingSkillState>(() => new ReleasingSkillState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleasingSkillState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasingSkillState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasingSkillState(ReleasingSkillState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      skillid_ = other.skillid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasingSkillState Clone() {
      return new ReleasingSkillState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 6;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleasingSkillState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleasingSkillState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (Skillid != other.Skillid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Targuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleasingSkillState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 48: {
            Targuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyUsingSkill
  /// </summary>
  public sealed partial class UsingSkillState : pb::IMessage<UsingSkillState> {
    private static readonly pb::MessageParser<UsingSkillState> _parser = new pb::MessageParser<UsingSkillState>(() => new UsingSkillState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsingSkillState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsingSkillState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsingSkillState(UsingSkillState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      skillid_ = other.skillid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsingSkillState Clone() {
      return new UsingSkillState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 6;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsingSkillState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsingSkillState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (Skillid != other.Skillid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Targuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsingSkillState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 48: {
            Targuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyLastingSkill
  /// </summary>
  public sealed partial class LastingSkillState : pb::IMessage<LastingSkillState> {
    private static readonly pb::MessageParser<LastingSkillState> _parser = new pb::MessageParser<LastingSkillState>(() => new LastingSkillState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastingSkillState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastingSkillState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastingSkillState(LastingSkillState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      skillid_ = other.skillid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastingSkillState Clone() {
      return new LastingSkillState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 6;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastingSkillState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastingSkillState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (Skillid != other.Skillid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Targuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastingSkillState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 48: {
            Targuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameObjectDeadState
  /// </summary>
  public sealed partial class DeadState : pb::IMessage<DeadState> {
    private static readonly pb::MessageParser<DeadState> _parser = new pb::MessageParser<DeadState>(() => new DeadState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeadState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeadState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeadState(DeadState other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      spot_ = other.spot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeadState Clone() {
      return new DeadState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "spot" field.</summary>
    public const int SpotFieldNumber = 5;
    private bool spot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Spot {
      get { return spot_; }
      set {
        spot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeadState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeadState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Spot != other.Spot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Spot != false) hash ^= Spot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (Spot != false) {
        output.WriteRawTag(40);
        output.WriteBool(Spot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Spot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeadState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Spot != false) {
        Spot = other.Spot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 40: {
            Spot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGoodsInfo
  /// </summary>
  public sealed partial class NotifyGoodsInfo : pb::IMessage<NotifyGoodsInfo> {
    private static readonly pb::MessageParser<NotifyGoodsInfo> _parser = new pb::MessageParser<NotifyGoodsInfo>(() => new NotifyGoodsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyGoodsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsInfo(NotifyGoodsInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGoodsInfo Clone() {
      return new NotifyGoodsInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo> info_ = new pbc::RepeatedField<global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyGoodsInfo.Types.GoodsInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyGoodsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyGoodsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyGoodsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyGoodsInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GoodsInfo : pb::IMessage<GoodsInfo> {
        private static readonly pb::MessageParser<GoodsInfo> _parser = new pb::MessageParser<GoodsInfo>(() => new GoodsInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GoodsInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyGoodsInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsInfo(GoodsInfo other) : this() {
          num_ = other.num_;
          pos_ = other.pos_;
          ifComposed_ = other.ifComposed_;
          tyepid_ = other.tyepid_;
          state_ = other.state_;
          statetime_ = other.statetime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsInfo Clone() {
          return new GoodsInfo(this);
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 1;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 2;
        private int pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "ifComposed" field.</summary>
        public const int IfComposedFieldNumber = 3;
        private bool ifComposed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfComposed {
          get { return ifComposed_; }
          set {
            ifComposed_ = value;
          }
        }

        /// <summary>Field number for the "tyepid" field.</summary>
        public const int TyepidFieldNumber = 4;
        private int tyepid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tyepid {
          get { return tyepid_; }
          set {
            tyepid_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 5;
        private int state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "statetime" field.</summary>
        public const int StatetimeFieldNumber = 6;
        private int statetime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Statetime {
          get { return statetime_; }
          set {
            statetime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GoodsInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GoodsInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Num != other.Num) return false;
          if (Pos != other.Pos) return false;
          if (IfComposed != other.IfComposed) return false;
          if (Tyepid != other.Tyepid) return false;
          if (State != other.State) return false;
          if (Statetime != other.Statetime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Num != 0) hash ^= Num.GetHashCode();
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (IfComposed != false) hash ^= IfComposed.GetHashCode();
          if (Tyepid != 0) hash ^= Tyepid.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          if (Statetime != 0) hash ^= Statetime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Num != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num);
          }
          if (Pos != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Pos);
          }
          if (IfComposed != false) {
            output.WriteRawTag(24);
            output.WriteBool(IfComposed);
          }
          if (Tyepid != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Tyepid);
          }
          if (State != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(State);
          }
          if (Statetime != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Statetime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
          }
          if (IfComposed != false) {
            size += 1 + 1;
          }
          if (Tyepid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tyepid);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          if (Statetime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Statetime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GoodsInfo other) {
          if (other == null) {
            return;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.IfComposed != false) {
            IfComposed = other.IfComposed;
          }
          if (other.Tyepid != 0) {
            Tyepid = other.Tyepid;
          }
          if (other.State != 0) {
            State = other.State;
          }
          if (other.Statetime != 0) {
            Statetime = other.Statetime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Num = input.ReadInt32();
                break;
              }
              case 16: {
                Pos = input.ReadInt32();
                break;
              }
              case 24: {
                IfComposed = input.ReadBool();
                break;
              }
              case 32: {
                Tyepid = input.ReadInt32();
                break;
              }
              case 40: {
                State = input.ReadInt32();
                break;
              }
              case 48: {
                Statetime = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyBattleStart
  /// </summary>
  public sealed partial class BattleLoadingState : pb::IMessage<BattleLoadingState> {
    private static readonly pb::MessageParser<BattleLoadingState> _parser = new pb::MessageParser<BattleLoadingState>(() => new BattleLoadingState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleLoadingState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoadingState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoadingState(BattleLoadingState other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      loadper_ = other.loadper_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoadingState Clone() {
      return new BattleLoadingState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "loadper" field.</summary>
    public const int LoadperFieldNumber = 3;
    private int loadper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Loadper {
      get { return loadper_; }
      set {
        loadper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleLoadingState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleLoadingState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Loadper != other.Loadper) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Loadper != 0) hash ^= Loadper.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Loadper != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Loadper);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Loadper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loadper);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleLoadingState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Loadper != 0) {
        Loadper = other.Loadper;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            Loadper = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroPosInfo : pb::IMessage<HeroPosInfo> {
    private static readonly pb::MessageParser<HeroPosInfo> _parser = new pb::MessageParser<HeroPosInfo>(() => new HeroPosInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroPosInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPosInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPosInfo(HeroPosInfo other) : this() {
      pos_ = other.pos_;
      heroid_ = other.heroid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPosInfo Clone() {
      return new HeroPosInfo(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 3;
    private int heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroPosInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroPosInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (Heroid != other.Heroid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Heroid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Heroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroPosInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Heroid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBattleHeroInfo
  /// </summary>
  public sealed partial class HeroInfo : pb::IMessage<HeroInfo> {
    private static readonly pb::MessageParser<HeroInfo> _parser = new pb::MessageParser<HeroInfo>(() => new HeroInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo(HeroInfo other) : this() {
      msgid_ = other.msgid_;
      heroposinfo_ = other.heroposinfo_ != null ? other.heroposinfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo Clone() {
      return new HeroInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "heroposinfo" field.</summary>
    public const int HeroposinfoFieldNumber = 2;
    private global::GSToGC.HeroPosInfo heroposinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.HeroPosInfo Heroposinfo {
      get { return heroposinfo_; }
      set {
        heroposinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (!object.Equals(Heroposinfo, other.Heroposinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (heroposinfo_ != null) hash ^= Heroposinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (heroposinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Heroposinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (heroposinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroposinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.heroposinfo_ != null) {
        if (heroposinfo_ == null) {
          heroposinfo_ = new global::GSToGC.HeroPosInfo();
        }
        Heroposinfo.MergeFrom(other.Heroposinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            if (heroposinfo_ == null) {
              heroposinfo_ = new global::GSToGC.HeroPosInfo();
            }
            input.ReadMessage(heroposinfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyRoomChat
  /// </summary>
  public sealed partial class ChatInRoom : pb::IMessage<ChatInRoom> {
    private static readonly pb::MessageParser<ChatInRoom> _parser = new pb::MessageParser<ChatInRoom>(() => new ChatInRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatInRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInRoom(ChatInRoom other) : this() {
      msgid_ = other.msgid_;
      pos_ = other.pos_;
      chat_ = other.chat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInRoom Clone() {
      return new ChatInRoom(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 3;
    private string chat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chat {
      get { return chat_; }
      set {
        chat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatInRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatInRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Pos != other.Pos) return false;
      if (Chat != other.Chat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Chat.Length != 0) hash ^= Chat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Chat.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Chat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Chat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatInRoom other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Chat.Length != 0) {
        Chat = other.Chat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 26: {
            Chat = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillHitTarget
  /// </summary>
  public sealed partial class SkillHitTar : pb::IMessage<SkillHitTar> {
    private static readonly pb::MessageParser<SkillHitTar> _parser = new pb::MessageParser<SkillHitTar>(() => new SkillHitTar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillHitTar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillHitTar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillHitTar(SkillHitTar other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      targuid_ = other.targuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillHitTar Clone() {
      return new SkillHitTar(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 4;
    private long targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillHitTar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillHitTar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (Targuid != other.Targuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Targuid != 0L) hash ^= Targuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (Targuid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Targuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Targuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Targuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillHitTar other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Targuid != 0L) {
        Targuid = other.Targuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            Targuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyHPChange
  /// </summary>
  public sealed partial class HPChange : pb::IMessage<HPChange> {
    private static readonly pb::MessageParser<HPChange> _parser = new pb::MessageParser<HPChange>(() => new HPChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPChange(HPChange other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      hp_ = other.hp_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPChange Clone() {
      return new HPChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private global::GSToGC.HPMPChangeReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.HPMPChangeReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Hp != other.Hp) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Reason != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HPChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            reason_ = (global::GSToGC.HPMPChangeReason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyMPChange
  /// </summary>
  public sealed partial class MpChange : pb::IMessage<MpChange> {
    private static readonly pb::MessageParser<MpChange> _parser = new pb::MessageParser<MpChange>(() => new MpChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MpChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MpChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MpChange(MpChange other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      mp_ = other.mp_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MpChange Clone() {
      return new MpChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 3;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private global::GSToGC.HPMPChangeReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.HPMPChangeReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MpChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MpChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Mp != other.Mp) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Mp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mp);
      }
      if (Reason != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MpChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Mp = input.ReadInt32();
            break;
          }
          case 32: {
            reason_ = (global::GSToGC.HPMPChangeReason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TryToChooseHero : pb::IMessage<TryToChooseHero> {
    private static readonly pb::MessageParser<TryToChooseHero> _parser = new pb::MessageParser<TryToChooseHero>(() => new TryToChooseHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TryToChooseHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryToChooseHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryToChooseHero(TryToChooseHero other) : this() {
      msgid_ = other.msgid_;
      pos_ = other.pos_;
      heroid_ = other.heroid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryToChooseHero Clone() {
      return new TryToChooseHero(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 3;
    private int heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TryToChooseHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TryToChooseHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Pos != other.Pos) return false;
      if (Heroid != other.Heroid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Heroid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Heroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TryToChooseHero other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Heroid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyToChooseHero
  /// </summary>
  public sealed partial class NotifyChooseHeroTimeEnd : pb::IMessage<NotifyChooseHeroTimeEnd> {
    private static readonly pb::MessageParser<NotifyChooseHeroTimeEnd> _parser = new pb::MessageParser<NotifyChooseHeroTimeEnd>(() => new NotifyChooseHeroTimeEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyChooseHeroTimeEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyChooseHeroTimeEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyChooseHeroTimeEnd(NotifyChooseHeroTimeEnd other) : this() {
      msgid_ = other.msgid_;
      heroposinfo_ = other.heroposinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyChooseHeroTimeEnd Clone() {
      return new NotifyChooseHeroTimeEnd(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "heroposinfo" field.</summary>
    public const int HeroposinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.HeroPosInfo> _repeated_heroposinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.HeroPosInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.HeroPosInfo> heroposinfo_ = new pbc::RepeatedField<global::GSToGC.HeroPosInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.HeroPosInfo> Heroposinfo {
      get { return heroposinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyChooseHeroTimeEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyChooseHeroTimeEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!heroposinfo_.Equals(other.heroposinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= heroposinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      heroposinfo_.WriteTo(output, _repeated_heroposinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += heroposinfo_.CalculateSize(_repeated_heroposinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyChooseHeroTimeEnd other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      heroposinfo_.Add(other.heroposinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            heroposinfo_.AddEntriesFrom(input, _repeated_heroposinfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillUnitInfo
  /// </summary>
  public sealed partial class SkillEntityInfo : pb::IMessage<SkillEntityInfo> {
    private static readonly pb::MessageParser<SkillEntityInfo> _parser = new pb::MessageParser<SkillEntityInfo>(() => new SkillEntityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillEntityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEntityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEntityInfo(SkillEntityInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      uniqueid_ = other.uniqueid_;
      tardir_ = other.tardir_ != null ? other.tardir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEntityInfo Clone() {
      return new SkillEntityInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 5;
    private long targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 6;
    private long uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    /// <summary>Field number for the "tardir" field.</summary>
    public const int TardirFieldNumber = 7;
    private global::GSToGC.Dir tardir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Tardir {
      get { return tardir_; }
      set {
        tardir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillEntityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillEntityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      if (!object.Equals(Tardir, other.Tardir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0L) hash ^= Targuid.GetHashCode();
      if (Uniqueid != 0L) hash ^= Uniqueid.GetHashCode();
      if (tardir_ != null) hash ^= Tardir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Targuid);
      }
      if (Uniqueid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Uniqueid);
      }
      if (tardir_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tardir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Targuid);
      }
      if (Uniqueid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uniqueid);
      }
      if (tardir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tardir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillEntityInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0L) {
        Targuid = other.Targuid;
      }
      if (other.Uniqueid != 0L) {
        Uniqueid = other.Uniqueid;
      }
      if (other.tardir_ != null) {
        if (tardir_ == null) {
          tardir_ = new global::GSToGC.Dir();
        }
        Tardir.MergeFrom(other.Tardir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 40: {
            Targuid = input.ReadInt64();
            break;
          }
          case 48: {
            Uniqueid = input.ReadInt64();
            break;
          }
          case 58: {
            if (tardir_ == null) {
              tardir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(tardir_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyFightPropertyInfo
  /// </summary>
  public sealed partial class FPInfo : pb::IMessage<FPInfo> {
    private static readonly pb::MessageParser<FPInfo> _parser = new pb::MessageParser<FPInfo>(() => new FPInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FPInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FPInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FPInfo(FPInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FPInfo Clone() {
      return new FPInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_info_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> info_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FPInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FPInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FPInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyHpInfo
  /// </summary>
  public sealed partial class NotifyHPInfo : pb::IMessage<NotifyHPInfo> {
    private static readonly pb::MessageParser<NotifyHPInfo> _parser = new pb::MessageParser<NotifyHPInfo>(() => new NotifyHPInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHPInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHPInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHPInfo(NotifyHPInfo other) : this() {
      msgid_ = other.msgid_;
      hpinfo_ = other.hpinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHPInfo Clone() {
      return new NotifyHPInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "hpinfo" field.</summary>
    public const int HpinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyHPInfo.Types.HPInfo> _repeated_hpinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyHPInfo.Types.HPInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyHPInfo.Types.HPInfo> hpinfo_ = new pbc::RepeatedField<global::GSToGC.NotifyHPInfo.Types.HPInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyHPInfo.Types.HPInfo> Hpinfo {
      get { return hpinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHPInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHPInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!hpinfo_.Equals(other.hpinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= hpinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      hpinfo_.WriteTo(output, _repeated_hpinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += hpinfo_.CalculateSize(_repeated_hpinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHPInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      hpinfo_.Add(other.hpinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            hpinfo_.AddEntriesFrom(input, _repeated_hpinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyHPInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HPInfo : pb::IMessage<HPInfo> {
        private static readonly pb::MessageParser<HPInfo> _parser = new pb::MessageParser<HPInfo>(() => new HPInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HPInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyHPInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HPInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HPInfo(HPInfo other) : this() {
          guid_ = other.guid_;
          curhp_ = other.curhp_;
          maxhp_ = other.maxhp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HPInfo Clone() {
          return new HPInfo(this);
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 1;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "curhp" field.</summary>
        public const int CurhpFieldNumber = 2;
        private int curhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Curhp {
          get { return curhp_; }
          set {
            curhp_ = value;
          }
        }

        /// <summary>Field number for the "maxhp" field.</summary>
        public const int MaxhpFieldNumber = 3;
        private int maxhp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxhp {
          get { return maxhp_; }
          set {
            maxhp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HPInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HPInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (Curhp != other.Curhp) return false;
          if (Maxhp != other.Maxhp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Curhp != 0) hash ^= Curhp.GetHashCode();
          if (Maxhp != 0) hash ^= Maxhp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Guid);
          }
          if (Curhp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Curhp);
          }
          if (Maxhp != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Maxhp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Curhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curhp);
          }
          if (Maxhp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxhp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HPInfo other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Curhp != 0) {
            Curhp = other.Curhp;
          }
          if (other.Maxhp != 0) {
            Maxhp = other.Maxhp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Guid = input.ReadUInt64();
                break;
              }
              case 16: {
                Curhp = input.ReadInt32();
                break;
              }
              case 24: {
                Maxhp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyMpInfo
  /// </summary>
  public sealed partial class NotifyMPInfo : pb::IMessage<NotifyMPInfo> {
    private static readonly pb::MessageParser<NotifyMPInfo> _parser = new pb::MessageParser<NotifyMPInfo>(() => new NotifyMPInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMPInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMPInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMPInfo(NotifyMPInfo other) : this() {
      msgid_ = other.msgid_;
      mpinfo_ = other.mpinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMPInfo Clone() {
      return new NotifyMPInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "mpinfo" field.</summary>
    public const int MpinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyMPInfo.Types.MPInfo> _repeated_mpinfo_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.NotifyMPInfo.Types.MPInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyMPInfo.Types.MPInfo> mpinfo_ = new pbc::RepeatedField<global::GSToGC.NotifyMPInfo.Types.MPInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyMPInfo.Types.MPInfo> Mpinfo {
      get { return mpinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMPInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMPInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!mpinfo_.Equals(other.mpinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= mpinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      mpinfo_.WriteTo(output, _repeated_mpinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += mpinfo_.CalculateSize(_repeated_mpinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMPInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      mpinfo_.Add(other.mpinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            mpinfo_.AddEntriesFrom(input, _repeated_mpinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyMPInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MPInfo : pb::IMessage<MPInfo> {
        private static readonly pb::MessageParser<MPInfo> _parser = new pb::MessageParser<MPInfo>(() => new MPInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MPInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyMPInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MPInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MPInfo(MPInfo other) : this() {
          guid_ = other.guid_;
          curmp_ = other.curmp_;
          maxmp_ = other.maxmp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MPInfo Clone() {
          return new MPInfo(this);
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 1;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "curmp" field.</summary>
        public const int CurmpFieldNumber = 2;
        private int curmp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Curmp {
          get { return curmp_; }
          set {
            curmp_ = value;
          }
        }

        /// <summary>Field number for the "maxmp" field.</summary>
        public const int MaxmpFieldNumber = 3;
        private int maxmp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxmp {
          get { return maxmp_; }
          set {
            maxmp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MPInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MPInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (Curmp != other.Curmp) return false;
          if (Maxmp != other.Maxmp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Curmp != 0) hash ^= Curmp.GetHashCode();
          if (Maxmp != 0) hash ^= Maxmp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Guid);
          }
          if (Curmp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Curmp);
          }
          if (Maxmp != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Maxmp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Curmp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curmp);
          }
          if (Maxmp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxmp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MPInfo other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Curmp != 0) {
            Curmp = other.Curmp;
          }
          if (other.Maxmp != 0) {
            Maxmp = other.Maxmp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Guid = input.ReadUInt64();
                break;
              }
              case 16: {
                Curmp = input.ReadInt32();
                break;
              }
              case 24: {
                Maxmp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyHeroInfo
  /// </summary>
  public sealed partial class NotifyHeroInfo : pb::IMessage<NotifyHeroInfo> {
    private static readonly pb::MessageParser<NotifyHeroInfo> _parser = new pb::MessageParser<NotifyHeroInfo>(() => new NotifyHeroInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHeroInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroInfo(NotifyHeroInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      level_ = other.level_;
      exp_ = other.exp_;
      fury_ = other.fury_;
      absorb1_ = other.absorb1_;
      absorb2_ = other.absorb2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroInfo Clone() {
      return new NotifyHeroInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "fury" field.</summary>
    public const int FuryFieldNumber = 5;
    private int fury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fury {
      get { return fury_; }
      set {
        fury_ = value;
      }
    }

    /// <summary>Field number for the "absorb1" field.</summary>
    public const int Absorb1FieldNumber = 6;
    private int absorb1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Absorb1 {
      get { return absorb1_; }
      set {
        absorb1_ = value;
      }
    }

    /// <summary>Field number for the "absorb2" field.</summary>
    public const int Absorb2FieldNumber = 7;
    private int absorb2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Absorb2 {
      get { return absorb2_; }
      set {
        absorb2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHeroInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHeroInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Fury != other.Fury) return false;
      if (Absorb1 != other.Absorb1) return false;
      if (Absorb2 != other.Absorb2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Fury != 0) hash ^= Fury.GetHashCode();
      if (Absorb1 != 0) hash ^= Absorb1.GetHashCode();
      if (Absorb2 != 0) hash ^= Absorb2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Fury != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Fury);
      }
      if (Absorb1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Absorb1);
      }
      if (Absorb2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Absorb2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Fury != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fury);
      }
      if (Absorb1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorb1);
      }
      if (Absorb2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorb2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHeroInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Fury != 0) {
        Fury = other.Fury;
      }
      if (other.Absorb1 != 0) {
        Absorb1 = other.Absorb1;
      }
      if (other.Absorb2 != 0) {
        Absorb2 = other.Absorb2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Fury = input.ReadInt32();
            break;
          }
          case 48: {
            Absorb1 = input.ReadInt32();
            break;
          }
          case 56: {
            Absorb2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillInfo
  /// </summary>
  public sealed partial class NotifySkillInfo : pb::IMessage<NotifySkillInfo> {
    private static readonly pb::MessageParser<NotifySkillInfo> _parser = new pb::MessageParser<NotifySkillInfo>(() => new NotifySkillInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillInfo(NotifySkillInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillslot_ = other.skillslot_;
      skillid_ = other.skillid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillInfo Clone() {
      return new NotifySkillInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillslot" field.</summary>
    public const int SkillslotFieldNumber = 3;
    private int skillslot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillslot {
      get { return skillslot_; }
      set {
        skillslot_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private int time_;
    /// <summary>
    ///	enum SkillState
    ///	{
    ///		free = 0;
    ///		prepare = 1;
    ///		release = 2;
    ///		cooldown = 3;
    ///	}
    ///	SkillState state = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillslot != other.Skillslot) return false;
      if (Skillid != other.Skillid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillslot != 0) hash ^= Skillslot.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillslot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillslot);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Skillid);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillslot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillslot);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillslot != 0) {
        Skillslot = other.Skillslot;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillslot = input.ReadInt32();
            break;
          }
          case 32: {
            Skillid = input.ReadInt32();
            break;
          }
          case 40: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBattleFinish
  /// </summary>
  public sealed partial class BattleFinish : pb::IMessage<BattleFinish> {
    private static readonly pb::MessageParser<BattleFinish> _parser = new pb::MessageParser<BattleFinish>(() => new BattleFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFinish(BattleFinish other) : this() {
      msgid_ = other.msgid_;
      bulidguid_ = other.bulidguid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFinish Clone() {
      return new BattleFinish(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "bulidguid" field.</summary>
    public const int BulidguidFieldNumber = 2;
    private ulong bulidguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bulidguid {
      get { return bulidguid_; }
      set {
        bulidguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Bulidguid != other.Bulidguid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Bulidguid != 0UL) hash ^= Bulidguid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Bulidguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Bulidguid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Bulidguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bulidguid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleFinish other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Bulidguid != 0UL) {
        Bulidguid = other.Bulidguid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Bulidguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyExpInfo
  /// </summary>
  public sealed partial class Exp : pb::IMessage<Exp> {
    private static readonly pb::MessageParser<Exp> _parser = new pb::MessageParser<Exp>(() => new Exp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exp(Exp other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exp Clone() {
      return new Exp(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int Exp_FieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp_ {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Exp_ != other.Exp_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Exp_ != 0) hash ^= Exp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Exp_ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Exp_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exp other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Exp_ != 0) {
        Exp_ = other.Exp_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Exp_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyLvInfo
  /// </summary>
  public sealed partial class LevelInfo : pb::IMessage<LevelInfo> {
    private static readonly pb::MessageParser<LevelInfo> _parser = new pb::MessageParser<LevelInfo>(() => new LevelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo(LevelInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo Clone() {
      return new LevelInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyAbsorbBegin
  /// </summary>
  public sealed partial class AbsorbBegin : pb::IMessage<AbsorbBegin> {
    private static readonly pb::MessageParser<AbsorbBegin> _parser = new pb::MessageParser<AbsorbBegin>(() => new AbsorbBegin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbsorbBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbBegin(AbsorbBegin other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      monsterguid_ = other.monsterguid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbBegin Clone() {
      return new AbsorbBegin(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "monsterguid" field.</summary>
    public const int MonsterguidFieldNumber = 3;
    private ulong monsterguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Monsterguid {
      get { return monsterguid_; }
      set {
        monsterguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbsorbBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbsorbBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Monsterguid != other.Monsterguid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Monsterguid != 0UL) hash ^= Monsterguid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Monsterguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Monsterguid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Monsterguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Monsterguid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbsorbBegin other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Monsterguid != 0UL) {
        Monsterguid = other.Monsterguid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Monsterguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyAbsorbMonsterResult
  /// </summary>
  public sealed partial class AbsorbRes : pb::IMessage<AbsorbRes> {
    private static readonly pb::MessageParser<AbsorbRes> _parser = new pb::MessageParser<AbsorbRes>(() => new AbsorbRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbsorbRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbRes(AbsorbRes other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      res_ = other.res_;
      absorb1_ = other.absorb1_;
      absorb2_ = other.absorb2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbsorbRes Clone() {
      return new AbsorbRes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 3;
    private bool res_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "absorb1" field.</summary>
    public const int Absorb1FieldNumber = 4;
    private int absorb1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Absorb1 {
      get { return absorb1_; }
      set {
        absorb1_ = value;
      }
    }

    /// <summary>Field number for the "absorb2" field.</summary>
    public const int Absorb2FieldNumber = 5;
    private int absorb2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Absorb2 {
      get { return absorb2_; }
      set {
        absorb2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbsorbRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbsorbRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Res != other.Res) return false;
      if (Absorb1 != other.Absorb1) return false;
      if (Absorb2 != other.Absorb2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Res != false) hash ^= Res.GetHashCode();
      if (Absorb1 != 0) hash ^= Absorb1.GetHashCode();
      if (Absorb2 != 0) hash ^= Absorb2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Res != false) {
        output.WriteRawTag(24);
        output.WriteBool(Res);
      }
      if (Absorb1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Absorb1);
      }
      if (Absorb2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Absorb2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Res != false) {
        size += 1 + 1;
      }
      if (Absorb1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorb1);
      }
      if (Absorb2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorb2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbsorbRes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Res != false) {
        Res = other.Res;
      }
      if (other.Absorb1 != 0) {
        Absorb1 = other.Absorb1;
      }
      if (other.Absorb2 != 0) {
        Absorb2 = other.Absorb2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Res = input.ReadBool();
            break;
          }
          case 32: {
            Absorb1 = input.ReadInt32();
            break;
          }
          case 40: {
            Absorb2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CancelAbsorb?????
  /// </summary>
  public sealed partial class CancelAbsorb : pb::IMessage<CancelAbsorb> {
    private static readonly pb::MessageParser<CancelAbsorb> _parser = new pb::MessageParser<CancelAbsorb>(() => new CancelAbsorb());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelAbsorb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAbsorb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAbsorb(CancelAbsorb other) : this() {
      msgid_ = other.msgid_;
      monsterid_ = other.monsterid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAbsorb Clone() {
      return new CancelAbsorb(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "monsterid" field.</summary>
    public const int MonsteridFieldNumber = 2;
    private int monsterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monsterid {
      get { return monsterid_; }
      set {
        monsterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelAbsorb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelAbsorb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Monsterid != other.Monsterid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Monsterid != 0) hash ^= Monsterid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Monsterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Monsterid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Monsterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monsterid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelAbsorb other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Monsterid != 0) {
        Monsterid = other.Monsterid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Monsterid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMst_NotifyUserGameInfo
  /// </summary>
  public sealed partial class UserGameInfo : pb::IMessage<UserGameInfo> {
    private static readonly pb::MessageParser<UserGameInfo> _parser = new pb::MessageParser<UserGameInfo>(() => new UserGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGameInfo(UserGameInfo other) : this() {
      msgid_ = other.msgid_;
      headid_ = other.headid_;
      nickname_ = other.nickname_;
      level_ = other.level_;
      upgradeexp_ = other.upgradeexp_;
      curexp_ = other.curexp_;
      totalgameinns_ = other.totalgameinns_;
      totalwintimes_ = other.totalwintimes_;
      herokills_ = other.herokills_;
      destorybuildings_ = other.destorybuildings_;
      deadtimes_ = other.deadtimes_;
      totalAchnum_ = other.totalAchnum_;
      achnum_ = other.achnum_;
      vipscore_ = other.vipscore_;
      assistnum_ = other.assistnum_;
      ladderscore_ = other.ladderscore_;
      guildname_ = other.guildname_;
      expAdtime_ = other.expAdtime_;
      goldAddtime_ = other.goldAddtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGameInfo Clone() {
      return new UserGameInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "headid" field.</summary>
    public const int HeadidFieldNumber = 2;
    private int headid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Headid {
      get { return headid_; }
      set {
        headid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "upgradeexp" field.</summary>
    public const int UpgradeexpFieldNumber = 5;
    private int upgradeexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Upgradeexp {
      get { return upgradeexp_; }
      set {
        upgradeexp_ = value;
      }
    }

    /// <summary>Field number for the "curexp" field.</summary>
    public const int CurexpFieldNumber = 6;
    private int curexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curexp {
      get { return curexp_; }
      set {
        curexp_ = value;
      }
    }

    /// <summary>Field number for the "totalgameinns" field.</summary>
    public const int TotalgameinnsFieldNumber = 7;
    private int totalgameinns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Totalgameinns {
      get { return totalgameinns_; }
      set {
        totalgameinns_ = value;
      }
    }

    /// <summary>Field number for the "totalwintimes" field.</summary>
    public const int TotalwintimesFieldNumber = 8;
    private int totalwintimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Totalwintimes {
      get { return totalwintimes_; }
      set {
        totalwintimes_ = value;
      }
    }

    /// <summary>Field number for the "herokills" field.</summary>
    public const int HerokillsFieldNumber = 9;
    private int herokills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Herokills {
      get { return herokills_; }
      set {
        herokills_ = value;
      }
    }

    /// <summary>Field number for the "destorybuildings" field.</summary>
    public const int DestorybuildingsFieldNumber = 10;
    private int destorybuildings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Destorybuildings {
      get { return destorybuildings_; }
      set {
        destorybuildings_ = value;
      }
    }

    /// <summary>Field number for the "deadtimes" field.</summary>
    public const int DeadtimesFieldNumber = 11;
    private int deadtimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deadtimes {
      get { return deadtimes_; }
      set {
        deadtimes_ = value;
      }
    }

    /// <summary>Field number for the "total_achnum" field.</summary>
    public const int TotalAchnumFieldNumber = 12;
    private int totalAchnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalAchnum {
      get { return totalAchnum_; }
      set {
        totalAchnum_ = value;
      }
    }

    /// <summary>Field number for the "achnum" field.</summary>
    public const int AchnumFieldNumber = 13;
    private int achnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Achnum {
      get { return achnum_; }
      set {
        achnum_ = value;
      }
    }

    /// <summary>Field number for the "vipscore" field.</summary>
    public const int VipscoreFieldNumber = 14;
    private int vipscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vipscore {
      get { return vipscore_; }
      set {
        vipscore_ = value;
      }
    }

    /// <summary>Field number for the "assistnum" field.</summary>
    public const int AssistnumFieldNumber = 15;
    private int assistnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assistnum {
      get { return assistnum_; }
      set {
        assistnum_ = value;
      }
    }

    /// <summary>Field number for the "ladderscore" field.</summary>
    public const int LadderscoreFieldNumber = 16;
    private int ladderscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ladderscore {
      get { return ladderscore_; }
      set {
        ladderscore_ = value;
      }
    }

    /// <summary>Field number for the "guildname" field.</summary>
    public const int GuildnameFieldNumber = 17;
    private string guildname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guildname {
      get { return guildname_; }
      set {
        guildname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exp_adtime" field.</summary>
    public const int ExpAdtimeFieldNumber = 18;
    private long expAdtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpAdtime {
      get { return expAdtime_; }
      set {
        expAdtime_ = value;
      }
    }

    /// <summary>Field number for the "gold_addtime" field.</summary>
    public const int GoldAddtimeFieldNumber = 19;
    private long goldAddtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoldAddtime {
      get { return goldAddtime_; }
      set {
        goldAddtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Headid != other.Headid) return false;
      if (Nickname != other.Nickname) return false;
      if (Level != other.Level) return false;
      if (Upgradeexp != other.Upgradeexp) return false;
      if (Curexp != other.Curexp) return false;
      if (Totalgameinns != other.Totalgameinns) return false;
      if (Totalwintimes != other.Totalwintimes) return false;
      if (Herokills != other.Herokills) return false;
      if (Destorybuildings != other.Destorybuildings) return false;
      if (Deadtimes != other.Deadtimes) return false;
      if (TotalAchnum != other.TotalAchnum) return false;
      if (Achnum != other.Achnum) return false;
      if (Vipscore != other.Vipscore) return false;
      if (Assistnum != other.Assistnum) return false;
      if (Ladderscore != other.Ladderscore) return false;
      if (Guildname != other.Guildname) return false;
      if (ExpAdtime != other.ExpAdtime) return false;
      if (GoldAddtime != other.GoldAddtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Headid != 0) hash ^= Headid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Upgradeexp != 0) hash ^= Upgradeexp.GetHashCode();
      if (Curexp != 0) hash ^= Curexp.GetHashCode();
      if (Totalgameinns != 0) hash ^= Totalgameinns.GetHashCode();
      if (Totalwintimes != 0) hash ^= Totalwintimes.GetHashCode();
      if (Herokills != 0) hash ^= Herokills.GetHashCode();
      if (Destorybuildings != 0) hash ^= Destorybuildings.GetHashCode();
      if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
      if (TotalAchnum != 0) hash ^= TotalAchnum.GetHashCode();
      if (Achnum != 0) hash ^= Achnum.GetHashCode();
      if (Vipscore != 0) hash ^= Vipscore.GetHashCode();
      if (Assistnum != 0) hash ^= Assistnum.GetHashCode();
      if (Ladderscore != 0) hash ^= Ladderscore.GetHashCode();
      if (Guildname.Length != 0) hash ^= Guildname.GetHashCode();
      if (ExpAdtime != 0L) hash ^= ExpAdtime.GetHashCode();
      if (GoldAddtime != 0L) hash ^= GoldAddtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Headid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Headid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Upgradeexp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Upgradeexp);
      }
      if (Curexp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Curexp);
      }
      if (Totalgameinns != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Totalgameinns);
      }
      if (Totalwintimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Totalwintimes);
      }
      if (Herokills != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Herokills);
      }
      if (Destorybuildings != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Destorybuildings);
      }
      if (Deadtimes != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Deadtimes);
      }
      if (TotalAchnum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TotalAchnum);
      }
      if (Achnum != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Achnum);
      }
      if (Vipscore != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Vipscore);
      }
      if (Assistnum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Assistnum);
      }
      if (Ladderscore != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Ladderscore);
      }
      if (Guildname.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Guildname);
      }
      if (ExpAdtime != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ExpAdtime);
      }
      if (GoldAddtime != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(GoldAddtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Headid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Headid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Upgradeexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Upgradeexp);
      }
      if (Curexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curexp);
      }
      if (Totalgameinns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Totalgameinns);
      }
      if (Totalwintimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Totalwintimes);
      }
      if (Herokills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Herokills);
      }
      if (Destorybuildings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Destorybuildings);
      }
      if (Deadtimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadtimes);
      }
      if (TotalAchnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalAchnum);
      }
      if (Achnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Achnum);
      }
      if (Vipscore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vipscore);
      }
      if (Assistnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assistnum);
      }
      if (Ladderscore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ladderscore);
      }
      if (Guildname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Guildname);
      }
      if (ExpAdtime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExpAdtime);
      }
      if (GoldAddtime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GoldAddtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserGameInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Headid != 0) {
        Headid = other.Headid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Upgradeexp != 0) {
        Upgradeexp = other.Upgradeexp;
      }
      if (other.Curexp != 0) {
        Curexp = other.Curexp;
      }
      if (other.Totalgameinns != 0) {
        Totalgameinns = other.Totalgameinns;
      }
      if (other.Totalwintimes != 0) {
        Totalwintimes = other.Totalwintimes;
      }
      if (other.Herokills != 0) {
        Herokills = other.Herokills;
      }
      if (other.Destorybuildings != 0) {
        Destorybuildings = other.Destorybuildings;
      }
      if (other.Deadtimes != 0) {
        Deadtimes = other.Deadtimes;
      }
      if (other.TotalAchnum != 0) {
        TotalAchnum = other.TotalAchnum;
      }
      if (other.Achnum != 0) {
        Achnum = other.Achnum;
      }
      if (other.Vipscore != 0) {
        Vipscore = other.Vipscore;
      }
      if (other.Assistnum != 0) {
        Assistnum = other.Assistnum;
      }
      if (other.Ladderscore != 0) {
        Ladderscore = other.Ladderscore;
      }
      if (other.Guildname.Length != 0) {
        Guildname = other.Guildname;
      }
      if (other.ExpAdtime != 0L) {
        ExpAdtime = other.ExpAdtime;
      }
      if (other.GoldAddtime != 0L) {
        GoldAddtime = other.GoldAddtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Headid = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Upgradeexp = input.ReadInt32();
            break;
          }
          case 48: {
            Curexp = input.ReadInt32();
            break;
          }
          case 56: {
            Totalgameinns = input.ReadInt32();
            break;
          }
          case 64: {
            Totalwintimes = input.ReadInt32();
            break;
          }
          case 72: {
            Herokills = input.ReadInt32();
            break;
          }
          case 80: {
            Destorybuildings = input.ReadInt32();
            break;
          }
          case 88: {
            Deadtimes = input.ReadInt32();
            break;
          }
          case 96: {
            TotalAchnum = input.ReadInt32();
            break;
          }
          case 104: {
            Achnum = input.ReadInt32();
            break;
          }
          case 112: {
            Vipscore = input.ReadInt32();
            break;
          }
          case 120: {
            Assistnum = input.ReadInt32();
            break;
          }
          case 128: {
            Ladderscore = input.ReadInt32();
            break;
          }
          case 138: {
            Guildname = input.ReadString();
            break;
          }
          case 144: {
            ExpAdtime = input.ReadInt64();
            break;
          }
          case 152: {
            GoldAddtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyHeroKills
  /// </summary>
  public sealed partial class HeroKills : pb::IMessage<HeroKills> {
    private static readonly pb::MessageParser<HeroKills> _parser = new pb::MessageParser<HeroKills>(() => new HeroKills());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroKills> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroKills() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroKills(HeroKills other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      kills_ = other.kills_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroKills Clone() {
      return new HeroKills(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 3;
    private int kills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kills {
      get { return kills_; }
      set {
        kills_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroKills);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroKills other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Kills != other.Kills) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Kills != 0) hash ^= Kills.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Kills != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Kills);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Kills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kills);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroKills other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Kills != 0) {
        Kills = other.Kills;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Kills = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyCurDeadTimes
  /// </summary>
  public sealed partial class CurDeadTimes : pb::IMessage<CurDeadTimes> {
    private static readonly pb::MessageParser<CurDeadTimes> _parser = new pb::MessageParser<CurDeadTimes>(() => new CurDeadTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurDeadTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurDeadTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurDeadTimes(CurDeadTimes other) : this() {
      msgid_ = other.msgid_;
      objguid_ = other.objguid_;
      deadtimes_ = other.deadtimes_;
      killerCamp_ = other.killerCamp_;
      reasonheroguid_ = other.reasonheroguid_;
      ifAced_ = other.ifAced_;
      camp_ = other.camp_;
      herostate_ = other.herostate_;
      herotitle_ = other.herotitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurDeadTimes Clone() {
      return new CurDeadTimes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "objguid" field.</summary>
    public const int ObjguidFieldNumber = 2;
    private ulong objguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Objguid {
      get { return objguid_; }
      set {
        objguid_ = value;
      }
    }

    /// <summary>Field number for the "deadtimes" field.</summary>
    public const int DeadtimesFieldNumber = 3;
    private int deadtimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deadtimes {
      get { return deadtimes_; }
      set {
        deadtimes_ = value;
      }
    }

    /// <summary>Field number for the "killer_camp" field.</summary>
    public const int KillerCampFieldNumber = 4;
    private int killerCamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillerCamp {
      get { return killerCamp_; }
      set {
        killerCamp_ = value;
      }
    }

    /// <summary>Field number for the "reasonheroguid" field.</summary>
    public const int ReasonheroguidFieldNumber = 5;
    private ulong reasonheroguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Reasonheroguid {
      get { return reasonheroguid_; }
      set {
        reasonheroguid_ = value;
      }
    }

    /// <summary>Field number for the "ifAced" field.</summary>
    public const int IfAcedFieldNumber = 6;
    private bool ifAced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfAced {
      get { return ifAced_; }
      set {
        ifAced_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 7;
    private int camp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "herostate" field.</summary>
    public const int HerostateFieldNumber = 8;
    private int herostate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Herostate {
      get { return herostate_; }
      set {
        herostate_ = value;
      }
    }

    /// <summary>Field number for the "herotitle" field.</summary>
    public const int HerotitleFieldNumber = 9;
    private int herotitle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Herotitle {
      get { return herotitle_; }
      set {
        herotitle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurDeadTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurDeadTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Objguid != other.Objguid) return false;
      if (Deadtimes != other.Deadtimes) return false;
      if (KillerCamp != other.KillerCamp) return false;
      if (Reasonheroguid != other.Reasonheroguid) return false;
      if (IfAced != other.IfAced) return false;
      if (Camp != other.Camp) return false;
      if (Herostate != other.Herostate) return false;
      if (Herotitle != other.Herotitle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
      if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
      if (KillerCamp != 0) hash ^= KillerCamp.GetHashCode();
      if (Reasonheroguid != 0UL) hash ^= Reasonheroguid.GetHashCode();
      if (IfAced != false) hash ^= IfAced.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (Herostate != 0) hash ^= Herostate.GetHashCode();
      if (Herotitle != 0) hash ^= Herotitle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Objguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Objguid);
      }
      if (Deadtimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Deadtimes);
      }
      if (KillerCamp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KillerCamp);
      }
      if (Reasonheroguid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Reasonheroguid);
      }
      if (IfAced != false) {
        output.WriteRawTag(48);
        output.WriteBool(IfAced);
      }
      if (Camp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Camp);
      }
      if (Herostate != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Herostate);
      }
      if (Herotitle != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Herotitle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Objguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
      }
      if (Deadtimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadtimes);
      }
      if (KillerCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillerCamp);
      }
      if (Reasonheroguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Reasonheroguid);
      }
      if (IfAced != false) {
        size += 1 + 1;
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (Herostate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Herostate);
      }
      if (Herotitle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Herotitle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurDeadTimes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Objguid != 0UL) {
        Objguid = other.Objguid;
      }
      if (other.Deadtimes != 0) {
        Deadtimes = other.Deadtimes;
      }
      if (other.KillerCamp != 0) {
        KillerCamp = other.KillerCamp;
      }
      if (other.Reasonheroguid != 0UL) {
        Reasonheroguid = other.Reasonheroguid;
      }
      if (other.IfAced != false) {
        IfAced = other.IfAced;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.Herostate != 0) {
        Herostate = other.Herostate;
      }
      if (other.Herotitle != 0) {
        Herotitle = other.Herotitle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Objguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Deadtimes = input.ReadInt32();
            break;
          }
          case 32: {
            KillerCamp = input.ReadInt32();
            break;
          }
          case 40: {
            Reasonheroguid = input.ReadUInt64();
            break;
          }
          case 48: {
            IfAced = input.ReadBool();
            break;
          }
          case 56: {
            Camp = input.ReadInt32();
            break;
          }
          case 64: {
            Herostate = input.ReadInt32();
            break;
          }
          case 72: {
            Herotitle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyCurCP
  /// </summary>
  public sealed partial class CurCP : pb::IMessage<CurCP> {
    private static readonly pb::MessageParser<CurCP> _parser = new pb::MessageParser<CurCP>(() => new CurCP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurCP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurCP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurCP(CurCP other) : this() {
      msgid_ = other.msgid_;
      targetguid_ = other.targetguid_;
      personCp_ = other.personCp_;
      teamCp_ = other.teamCp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurCP Clone() {
      return new CurCP(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "targetguid" field.</summary>
    public const int TargetguidFieldNumber = 2;
    private ulong targetguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetguid {
      get { return targetguid_; }
      set {
        targetguid_ = value;
      }
    }

    /// <summary>Field number for the "person_cp" field.</summary>
    public const int PersonCpFieldNumber = 3;
    private int personCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonCp {
      get { return personCp_; }
      set {
        personCp_ = value;
      }
    }

    /// <summary>Field number for the "team_cp" field.</summary>
    public const int TeamCpFieldNumber = 4;
    private int teamCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamCp {
      get { return teamCp_; }
      set {
        teamCp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurCP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurCP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Targetguid != other.Targetguid) return false;
      if (PersonCp != other.PersonCp) return false;
      if (TeamCp != other.TeamCp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Targetguid != 0UL) hash ^= Targetguid.GetHashCode();
      if (PersonCp != 0) hash ^= PersonCp.GetHashCode();
      if (TeamCp != 0) hash ^= TeamCp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Targetguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Targetguid);
      }
      if (PersonCp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PersonCp);
      }
      if (TeamCp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamCp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Targetguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetguid);
      }
      if (PersonCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonCp);
      }
      if (TeamCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamCp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurCP other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Targetguid != 0UL) {
        Targetguid = other.Targetguid;
      }
      if (other.PersonCp != 0) {
        PersonCp = other.PersonCp;
      }
      if (other.TeamCp != 0) {
        TeamCp = other.TeamCp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Targetguid = input.ReadUInt64();
            break;
          }
          case 24: {
            PersonCp = input.ReadInt32();
            break;
          }
          case 32: {
            TeamCp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???
  /// </summary>
  public sealed partial class CurAtkSpeed : pb::IMessage<CurAtkSpeed> {
    private static readonly pb::MessageParser<CurAtkSpeed> _parser = new pb::MessageParser<CurAtkSpeed>(() => new CurAtkSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurAtkSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurAtkSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurAtkSpeed(CurAtkSpeed other) : this() {
      msgid_ = other.msgid_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurAtkSpeed Clone() {
      return new CurAtkSpeed(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.CurAtkSpeed.Types.SpeedInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.CurAtkSpeed.Types.SpeedInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.CurAtkSpeed.Types.SpeedInfo> info_ = new pbc::RepeatedField<global::GSToGC.CurAtkSpeed.Types.SpeedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.CurAtkSpeed.Types.SpeedInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurAtkSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurAtkSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurAtkSpeed other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CurAtkSpeed message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SpeedInfo : pb::IMessage<SpeedInfo> {
        private static readonly pb::MessageParser<SpeedInfo> _parser = new pb::MessageParser<SpeedInfo>(() => new SpeedInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpeedInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.CurAtkSpeed.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedInfo(SpeedInfo other) : this() {
          guid_ = other.guid_;
          speed_ = other.speed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpeedInfo Clone() {
          return new SpeedInfo(this);
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 1;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 2;
        private int speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpeedInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpeedInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (Speed != other.Speed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Speed != 0) hash ^= Speed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Guid);
          }
          if (Speed != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Speed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpeedInfo other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Speed != 0) {
            Speed = other.Speed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Guid = input.ReadUInt64();
                break;
              }
              case 16: {
                Speed = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyFuryValue
  /// </summary>
  public sealed partial class FuryVal : pb::IMessage<FuryVal> {
    private static readonly pb::MessageParser<FuryVal> _parser = new pb::MessageParser<FuryVal>(() => new FuryVal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuryVal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryVal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryVal(FuryVal other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      fury_ = other.fury_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryVal Clone() {
      return new FuryVal(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "fury" field.</summary>
    public const int FuryFieldNumber = 3;
    private int fury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fury {
      get { return fury_; }
      set {
        fury_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuryVal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuryVal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Fury != other.Fury) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Fury != 0) hash ^= Fury.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Fury != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Fury);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Fury != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fury);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuryVal other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Fury != 0) {
        Fury = other.Fury;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Fury = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyFuryState
  /// </summary>
  public sealed partial class FuryState : pb::IMessage<FuryState> {
    private static readonly pb::MessageParser<FuryState> _parser = new pb::MessageParser<FuryState>(() => new FuryState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuryState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryState(FuryState other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuryState Clone() {
      return new FuryState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuryState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuryState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuryState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyHeroReborn : pb::IMessage<NotifyHeroReborn> {
    private static readonly pb::MessageParser<NotifyHeroReborn> _parser = new pb::MessageParser<NotifyHeroReborn>(() => new NotifyHeroReborn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHeroReborn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroReborn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroReborn(NotifyHeroReborn other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHeroReborn Clone() {
      return new NotifyHeroReborn(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHeroReborn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHeroReborn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHeroReborn other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyHeroRebornTimes
  /// </summary>
  public sealed partial class RebornTimes : pb::IMessage<RebornTimes> {
    private static readonly pb::MessageParser<RebornTimes> _parser = new pb::MessageParser<RebornTimes>(() => new RebornTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RebornTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornTimes(RebornTimes other) : this() {
      msgid_ = other.msgid_;
      masterguid_ = other.masterguid_;
      sendtimes_ = other.sendtimes_;
      gold_ = other.gold_;
      remainTimes_ = other.remainTimes_;
      rebornTime_ = other.rebornTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornTimes Clone() {
      return new RebornTimes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "masterguid" field.</summary>
    public const int MasterguidFieldNumber = 2;
    private ulong masterguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Masterguid {
      get { return masterguid_; }
      set {
        masterguid_ = value;
      }
    }

    /// <summary>Field number for the "sendtimes" field.</summary>
    public const int SendtimesFieldNumber = 3;
    private long sendtimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sendtimes {
      get { return sendtimes_; }
      set {
        sendtimes_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "remain_times" field.</summary>
    public const int RemainTimesFieldNumber = 5;
    private int remainTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTimes {
      get { return remainTimes_; }
      set {
        remainTimes_ = value;
      }
    }

    /// <summary>Field number for the "reborn_time" field.</summary>
    public const int RebornTimeFieldNumber = 6;
    private int rebornTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RebornTime {
      get { return rebornTime_; }
      set {
        rebornTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RebornTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RebornTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Masterguid != other.Masterguid) return false;
      if (Sendtimes != other.Sendtimes) return false;
      if (Gold != other.Gold) return false;
      if (RemainTimes != other.RemainTimes) return false;
      if (RebornTime != other.RebornTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Masterguid != 0UL) hash ^= Masterguid.GetHashCode();
      if (Sendtimes != 0L) hash ^= Sendtimes.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (RemainTimes != 0) hash ^= RemainTimes.GetHashCode();
      if (RebornTime != 0) hash ^= RebornTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Masterguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Masterguid);
      }
      if (Sendtimes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Sendtimes);
      }
      if (Gold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Gold);
      }
      if (RemainTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainTimes);
      }
      if (RebornTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RebornTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Masterguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Masterguid);
      }
      if (Sendtimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sendtimes);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (RemainTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTimes);
      }
      if (RebornTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebornTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RebornTimes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Masterguid != 0UL) {
        Masterguid = other.Masterguid;
      }
      if (other.Sendtimes != 0L) {
        Sendtimes = other.Sendtimes;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.RemainTimes != 0) {
        RemainTimes = other.RemainTimes;
      }
      if (other.RebornTime != 0) {
        RebornTime = other.RebornTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Masterguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Sendtimes = input.ReadInt64();
            break;
          }
          case 32: {
            Gold = input.ReadInt64();
            break;
          }
          case 40: {
            RemainTimes = input.ReadInt32();
            break;
          }
          case 48: {
            RebornTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBuyRebornSuccess
  /// </summary>
  public sealed partial class RebornSuccess : pb::IMessage<RebornSuccess> {
    private static readonly pb::MessageParser<RebornSuccess> _parser = new pb::MessageParser<RebornSuccess>(() => new RebornSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RebornSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornSuccess(RebornSuccess other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornSuccess Clone() {
      return new RebornSuccess(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RebornSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RebornSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RebornSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyCPChange
  /// </summary>
  public sealed partial class PersonCPChange : pb::IMessage<PersonCPChange> {
    private static readonly pb::MessageParser<PersonCPChange> _parser = new pb::MessageParser<PersonCPChange>(() => new PersonCPChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonCPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonCPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonCPChange(PersonCPChange other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      cp_ = other.cp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonCPChange Clone() {
      return new PersonCPChange(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "cp" field.</summary>
    public const int CpFieldNumber = 3;
    private int cp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cp {
      get { return cp_; }
      set {
        cp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonCPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonCPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Cp != other.Cp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Cp != 0) hash ^= Cp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Cp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Cp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonCPChange other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Cp != 0) {
        Cp = other.Cp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Cp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_BroadCurBattleResult
  /// </summary>
  public sealed partial class BroadcastBatteleRes : pb::IMessage<BroadcastBatteleRes> {
    private static readonly pb::MessageParser<BroadcastBatteleRes> _parser = new pb::MessageParser<BroadcastBatteleRes>(() => new BroadcastBatteleRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastBatteleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBatteleRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBatteleRes(BroadcastBatteleRes other) : this() {
      msgid_ = other.msgid_;
      ifwin_ = other.ifwin_;
      resinfo_ = other.resinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBatteleRes Clone() {
      return new BroadcastBatteleRes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "ifwin" field.</summary>
    public const int IfwinFieldNumber = 2;
    private bool ifwin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ifwin {
      get { return ifwin_; }
      set {
        ifwin_ = value;
      }
    }

    /// <summary>Field number for the "resinfo" field.</summary>
    public const int ResinfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GSToGC.BroadcastBatteleRes.Types.ResInfo> _repeated_resinfo_codec
        = pb::FieldCodec.ForMessage(26, global::GSToGC.BroadcastBatteleRes.Types.ResInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.BroadcastBatteleRes.Types.ResInfo> resinfo_ = new pbc::RepeatedField<global::GSToGC.BroadcastBatteleRes.Types.ResInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.BroadcastBatteleRes.Types.ResInfo> Resinfo {
      get { return resinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastBatteleRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastBatteleRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Ifwin != other.Ifwin) return false;
      if(!resinfo_.Equals(other.resinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Ifwin != false) hash ^= Ifwin.GetHashCode();
      hash ^= resinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Ifwin != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ifwin);
      }
      resinfo_.WriteTo(output, _repeated_resinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Ifwin != false) {
        size += 1 + 1;
      }
      size += resinfo_.CalculateSize(_repeated_resinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastBatteleRes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Ifwin != false) {
        Ifwin = other.Ifwin;
      }
      resinfo_.Add(other.resinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Ifwin = input.ReadBool();
            break;
          }
          case 26: {
            resinfo_.AddEntriesFrom(input, _repeated_resinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BroadcastBatteleRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ResInfo : pb::IMessage<ResInfo> {
        private static readonly pb::MessageParser<ResInfo> _parser = new pb::MessageParser<ResInfo>(() => new ResInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.BroadcastBatteleRes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResInfo(ResInfo other) : this() {
          objguid_ = other.objguid_;
          heroid_ = other.heroid_;
          nickname_ = other.nickname_;
          curlevel_ = other.curlevel_;
          killtimes_ = other.killtimes_;
          deadtimes_ = other.deadtimes_;
          asstimes_ = other.asstimes_;
          totalcp_ = other.totalcp_;
          lasthit_ = other.lasthit_;
          camgpid_ = other.camgpid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResInfo Clone() {
          return new ResInfo(this);
        }

        /// <summary>Field number for the "objguid" field.</summary>
        public const int ObjguidFieldNumber = 1;
        private ulong objguid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Objguid {
          get { return objguid_; }
          set {
            objguid_ = value;
          }
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 2;
        private int heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 3;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "curlevel" field.</summary>
        public const int CurlevelFieldNumber = 4;
        private int curlevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Curlevel {
          get { return curlevel_; }
          set {
            curlevel_ = value;
          }
        }

        /// <summary>Field number for the "killtimes" field.</summary>
        public const int KilltimesFieldNumber = 5;
        private int killtimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Killtimes {
          get { return killtimes_; }
          set {
            killtimes_ = value;
          }
        }

        /// <summary>Field number for the "deadtimes" field.</summary>
        public const int DeadtimesFieldNumber = 6;
        private int deadtimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Deadtimes {
          get { return deadtimes_; }
          set {
            deadtimes_ = value;
          }
        }

        /// <summary>Field number for the "asstimes" field.</summary>
        public const int AsstimesFieldNumber = 7;
        private int asstimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Asstimes {
          get { return asstimes_; }
          set {
            asstimes_ = value;
          }
        }

        /// <summary>Field number for the "totalcp" field.</summary>
        public const int TotalcpFieldNumber = 8;
        private int totalcp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Totalcp {
          get { return totalcp_; }
          set {
            totalcp_ = value;
          }
        }

        /// <summary>Field number for the "lasthit" field.</summary>
        public const int LasthitFieldNumber = 9;
        private int lasthit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lasthit {
          get { return lasthit_; }
          set {
            lasthit_ = value;
          }
        }

        /// <summary>Field number for the "camgpid" field.</summary>
        public const int CamgpidFieldNumber = 10;
        private int camgpid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Camgpid {
          get { return camgpid_; }
          set {
            camgpid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ResInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Objguid != other.Objguid) return false;
          if (Heroid != other.Heroid) return false;
          if (Nickname != other.Nickname) return false;
          if (Curlevel != other.Curlevel) return false;
          if (Killtimes != other.Killtimes) return false;
          if (Deadtimes != other.Deadtimes) return false;
          if (Asstimes != other.Asstimes) return false;
          if (Totalcp != other.Totalcp) return false;
          if (Lasthit != other.Lasthit) return false;
          if (Camgpid != other.Camgpid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Objguid != 0UL) hash ^= Objguid.GetHashCode();
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Curlevel != 0) hash ^= Curlevel.GetHashCode();
          if (Killtimes != 0) hash ^= Killtimes.GetHashCode();
          if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
          if (Asstimes != 0) hash ^= Asstimes.GetHashCode();
          if (Totalcp != 0) hash ^= Totalcp.GetHashCode();
          if (Lasthit != 0) hash ^= Lasthit.GetHashCode();
          if (Camgpid != 0) hash ^= Camgpid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Objguid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Objguid);
          }
          if (Heroid != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Heroid);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Nickname);
          }
          if (Curlevel != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Curlevel);
          }
          if (Killtimes != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Killtimes);
          }
          if (Deadtimes != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Deadtimes);
          }
          if (Asstimes != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Asstimes);
          }
          if (Totalcp != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(Totalcp);
          }
          if (Lasthit != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Lasthit);
          }
          if (Camgpid != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(Camgpid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Objguid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Objguid);
          }
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Curlevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curlevel);
          }
          if (Killtimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Killtimes);
          }
          if (Deadtimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadtimes);
          }
          if (Asstimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Asstimes);
          }
          if (Totalcp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Totalcp);
          }
          if (Lasthit != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lasthit);
          }
          if (Camgpid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camgpid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResInfo other) {
          if (other == null) {
            return;
          }
          if (other.Objguid != 0UL) {
            Objguid = other.Objguid;
          }
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Curlevel != 0) {
            Curlevel = other.Curlevel;
          }
          if (other.Killtimes != 0) {
            Killtimes = other.Killtimes;
          }
          if (other.Deadtimes != 0) {
            Deadtimes = other.Deadtimes;
          }
          if (other.Asstimes != 0) {
            Asstimes = other.Asstimes;
          }
          if (other.Totalcp != 0) {
            Totalcp = other.Totalcp;
          }
          if (other.Lasthit != 0) {
            Lasthit = other.Lasthit;
          }
          if (other.Camgpid != 0) {
            Camgpid = other.Camgpid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Objguid = input.ReadUInt64();
                break;
              }
              case 16: {
                Heroid = input.ReadInt32();
                break;
              }
              case 26: {
                Nickname = input.ReadString();
                break;
              }
              case 32: {
                Curlevel = input.ReadInt32();
                break;
              }
              case 40: {
                Killtimes = input.ReadInt32();
                break;
              }
              case 48: {
                Deadtimes = input.ReadInt32();
                break;
              }
              case 56: {
                Asstimes = input.ReadInt32();
                break;
              }
              case 64: {
                Totalcp = input.ReadInt32();
                break;
              }
              case 72: {
                Lasthit = input.ReadInt32();
                break;
              }
              case 80: {
                Camgpid = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BroadcastBattelePersonalRes : pb::IMessage<BroadcastBattelePersonalRes> {
    private static readonly pb::MessageParser<BroadcastBattelePersonalRes> _parser = new pb::MessageParser<BroadcastBattelePersonalRes>(() => new BroadcastBattelePersonalRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastBattelePersonalRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattelePersonalRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattelePersonalRes(BroadcastBattelePersonalRes other) : this() {
      msgid_ = other.msgid_;
      gotGold_ = other.gotGold_;
      oldLv_ = other.oldLv_;
      oldExp_ = other.oldExp_;
      curLv_ = other.curLv_;
      curExp_ = other.curExp_;
      gotExp_ = other.gotExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBattelePersonalRes Clone() {
      return new BroadcastBattelePersonalRes(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "got_gold" field.</summary>
    public const int GotGoldFieldNumber = 2;
    private long gotGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GotGold {
      get { return gotGold_; }
      set {
        gotGold_ = value;
      }
    }

    /// <summary>Field number for the "old_lv" field.</summary>
    public const int OldLvFieldNumber = 3;
    private int oldLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldLv {
      get { return oldLv_; }
      set {
        oldLv_ = value;
      }
    }

    /// <summary>Field number for the "old_exp" field.</summary>
    public const int OldExpFieldNumber = 4;
    private int oldExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldExp {
      get { return oldExp_; }
      set {
        oldExp_ = value;
      }
    }

    /// <summary>Field number for the "cur_lv" field.</summary>
    public const int CurLvFieldNumber = 5;
    private int curLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurLv {
      get { return curLv_; }
      set {
        curLv_ = value;
      }
    }

    /// <summary>Field number for the "cur_exp" field.</summary>
    public const int CurExpFieldNumber = 6;
    private int curExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurExp {
      get { return curExp_; }
      set {
        curExp_ = value;
      }
    }

    /// <summary>Field number for the "got_exp" field.</summary>
    public const int GotExpFieldNumber = 7;
    private int gotExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GotExp {
      get { return gotExp_; }
      set {
        gotExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastBattelePersonalRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastBattelePersonalRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (GotGold != other.GotGold) return false;
      if (OldLv != other.OldLv) return false;
      if (OldExp != other.OldExp) return false;
      if (CurLv != other.CurLv) return false;
      if (CurExp != other.CurExp) return false;
      if (GotExp != other.GotExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (GotGold != 0L) hash ^= GotGold.GetHashCode();
      if (OldLv != 0) hash ^= OldLv.GetHashCode();
      if (OldExp != 0) hash ^= OldExp.GetHashCode();
      if (CurLv != 0) hash ^= CurLv.GetHashCode();
      if (CurExp != 0) hash ^= CurExp.GetHashCode();
      if (GotExp != 0) hash ^= GotExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (GotGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GotGold);
      }
      if (OldLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OldLv);
      }
      if (OldExp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldExp);
      }
      if (CurLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurLv);
      }
      if (CurExp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurExp);
      }
      if (GotExp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GotExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (GotGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GotGold);
      }
      if (OldLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldLv);
      }
      if (OldExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldExp);
      }
      if (CurLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurLv);
      }
      if (CurExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurExp);
      }
      if (GotExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GotExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastBattelePersonalRes other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.GotGold != 0L) {
        GotGold = other.GotGold;
      }
      if (other.OldLv != 0) {
        OldLv = other.OldLv;
      }
      if (other.OldExp != 0) {
        OldExp = other.OldExp;
      }
      if (other.CurLv != 0) {
        CurLv = other.CurLv;
      }
      if (other.CurExp != 0) {
        CurExp = other.CurExp;
      }
      if (other.GotExp != 0) {
        GotExp = other.GotExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            GotGold = input.ReadInt64();
            break;
          }
          case 24: {
            OldLv = input.ReadInt32();
            break;
          }
          case 32: {
            OldExp = input.ReadInt32();
            break;
          }
          case 40: {
            CurLv = input.ReadInt32();
            break;
          }
          case 48: {
            CurExp = input.ReadInt32();
            break;
          }
          case 56: {
            GotExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMst_BroadBuildingDestroyByWho
  /// </summary>
  public sealed partial class BroadcastBuildingDestory : pb::IMessage<BroadcastBuildingDestory> {
    private static readonly pb::MessageParser<BroadcastBuildingDestory> _parser = new pb::MessageParser<BroadcastBuildingDestory>(() => new BroadcastBuildingDestory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastBuildingDestory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBuildingDestory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBuildingDestory(BroadcastBuildingDestory other) : this() {
      msgid_ = other.msgid_;
      buildingguid_ = other.buildingguid_;
      buildingCamp_ = other.buildingCamp_;
      killerGuid_ = other.killerGuid_;
      killerCamp_ = other.killerCamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastBuildingDestory Clone() {
      return new BroadcastBuildingDestory(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "buildingguid" field.</summary>
    public const int BuildingguidFieldNumber = 2;
    private ulong buildingguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Buildingguid {
      get { return buildingguid_; }
      set {
        buildingguid_ = value;
      }
    }

    /// <summary>Field number for the "building_camp" field.</summary>
    public const int BuildingCampFieldNumber = 3;
    private int buildingCamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingCamp {
      get { return buildingCamp_; }
      set {
        buildingCamp_ = value;
      }
    }

    /// <summary>Field number for the "killer_guid" field.</summary>
    public const int KillerGuidFieldNumber = 4;
    private ulong killerGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KillerGuid {
      get { return killerGuid_; }
      set {
        killerGuid_ = value;
      }
    }

    /// <summary>Field number for the "killer_camp" field.</summary>
    public const int KillerCampFieldNumber = 5;
    private int killerCamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillerCamp {
      get { return killerCamp_; }
      set {
        killerCamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastBuildingDestory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastBuildingDestory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Buildingguid != other.Buildingguid) return false;
      if (BuildingCamp != other.BuildingCamp) return false;
      if (KillerGuid != other.KillerGuid) return false;
      if (KillerCamp != other.KillerCamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Buildingguid != 0UL) hash ^= Buildingguid.GetHashCode();
      if (BuildingCamp != 0) hash ^= BuildingCamp.GetHashCode();
      if (KillerGuid != 0UL) hash ^= KillerGuid.GetHashCode();
      if (KillerCamp != 0) hash ^= KillerCamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Buildingguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Buildingguid);
      }
      if (BuildingCamp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuildingCamp);
      }
      if (KillerGuid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(KillerGuid);
      }
      if (KillerCamp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(KillerCamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Buildingguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Buildingguid);
      }
      if (BuildingCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingCamp);
      }
      if (KillerGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KillerGuid);
      }
      if (KillerCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillerCamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastBuildingDestory other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Buildingguid != 0UL) {
        Buildingguid = other.Buildingguid;
      }
      if (other.BuildingCamp != 0) {
        BuildingCamp = other.BuildingCamp;
      }
      if (other.KillerGuid != 0UL) {
        KillerGuid = other.KillerGuid;
      }
      if (other.KillerCamp != 0) {
        KillerCamp = other.KillerCamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Buildingguid = input.ReadUInt64();
            break;
          }
          case 24: {
            BuildingCamp = input.ReadInt32();
            break;
          }
          case 32: {
            KillerGuid = input.ReadUInt64();
            break;
          }
          case 40: {
            KillerCamp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///??????????BattleSeatPosInfo????????????????????????
  /// </summary>
  public sealed partial class HeroMoveInfo : pb::IMessage<HeroMoveInfo> {
    private static readonly pb::MessageParser<HeroMoveInfo> _parser = new pb::MessageParser<HeroMoveInfo>(() => new HeroMoveInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMoveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMoveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMoveInfo(HeroMoveInfo other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMoveInfo Clone() {
      return new HeroMoveInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMoveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMoveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (dir_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dir);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMoveInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_BroadcastPlayFinishVedio
  /// </summary>
  public sealed partial class PlayFinishVedio : pb::IMessage<PlayFinishVedio> {
    private static readonly pb::MessageParser<PlayFinishVedio> _parser = new pb::MessageParser<PlayFinishVedio>(() => new PlayFinishVedio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayFinishVedio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayFinishVedio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayFinishVedio(PlayFinishVedio other) : this() {
      msgid_ = other.msgid_;
      wincamp_ = other.wincamp_;
      losercamp_ = other.losercamp_;
      mapid_ = other.mapid_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayFinishVedio Clone() {
      return new PlayFinishVedio(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "wincamp" field.</summary>
    public const int WincampFieldNumber = 2;
    private int wincamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wincamp {
      get { return wincamp_; }
      set {
        wincamp_ = value;
      }
    }

    /// <summary>Field number for the "losercamp" field.</summary>
    public const int LosercampFieldNumber = 3;
    private int losercamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Losercamp {
      get { return losercamp_; }
      set {
        losercamp_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 4;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 5;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayFinishVedio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayFinishVedio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Wincamp != other.Wincamp) return false;
      if (Losercamp != other.Losercamp) return false;
      if (Mapid != other.Mapid) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Wincamp != 0) hash ^= Wincamp.GetHashCode();
      if (Losercamp != 0) hash ^= Losercamp.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Wincamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Wincamp);
      }
      if (Losercamp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Losercamp);
      }
      if (Mapid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mapid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Wincamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wincamp);
      }
      if (Losercamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losercamp);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayFinishVedio other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Wincamp != 0) {
        Wincamp = other.Wincamp;
      }
      if (other.Losercamp != 0) {
        Losercamp = other.Losercamp;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Wincamp = input.ReadInt32();
            break;
          }
          case 24: {
            Losercamp = input.ReadInt32();
            break;
          }
          case 32: {
            Mapid = input.ReadInt32();
            break;
          }
          case 40: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyLeaveBattleSuccess
  /// </summary>
  public sealed partial class LeaveBattleSuccess : pb::IMessage<LeaveBattleSuccess> {
    private static readonly pb::MessageParser<LeaveBattleSuccess> _parser = new pb::MessageParser<LeaveBattleSuccess>(() => new LeaveBattleSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveBattleSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleSuccess(LeaveBattleSuccess other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleSuccess Clone() {
      return new LeaveBattleSuccess(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveBattleSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveBattleSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveBattleSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNotifyBornSoldier
  /// </summary>
  public sealed partial class BornSoler : pb::IMessage<BornSoler> {
    private static readonly pb::MessageParser<BornSoler> _parser = new pb::MessageParser<BornSoler>(() => new BornSoler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BornSoler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BornSoler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BornSoler(BornSoler other) : this() {
      msgid_ = other.msgid_;
      type_ = other.type_;
      camp_ = other.camp_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BornSoler Clone() {
      return new BornSoler(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private int camp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 5;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BornSoler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BornSoler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Type != other.Type) return false;
      if (Camp != other.Camp) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Camp);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BornSoler other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Camp = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillEnd
  /// </summary>
  public sealed partial class SkillEnd : pb::IMessage<SkillEnd> {
    private static readonly pb::MessageParser<SkillEnd> _parser = new pb::MessageParser<SkillEnd>(() => new SkillEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEnd(SkillEnd other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      targuid_ = other.targuid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEnd Clone() {
      return new SkillEnd(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 4;
    private long targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 5;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (Targuid != other.Targuid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Targuid != 0L) hash ^= Targuid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (Targuid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Targuid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Targuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Targuid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillEnd other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Targuid != 0L) {
        Targuid = other.Targuid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            Targuid = input.ReadInt64();
            break;
          }
          case 40: {
            Uniqueid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AltarBSIco : pb::IMessage<AltarBSIco> {
    private static readonly pb::MessageParser<AltarBSIco> _parser = new pb::MessageParser<AltarBSIco>(() => new AltarBSIco());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AltarBSIco> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltarBSIco() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltarBSIco(AltarBSIco other) : this() {
      msgid_ = other.msgid_;
      index_ = other.index_;
      type_ = other.type_;
      optype_ = other.optype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltarBSIco Clone() {
      return new AltarBSIco(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 4;
    private int optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AltarBSIco);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AltarBSIco other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Index != other.Index) return false;
      if (Type != other.Type) return false;
      if (Optype != other.Optype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Optype != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Optype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Optype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AltarBSIco other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Optype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameOjectReleaseSkill
  /// </summary>
  public sealed partial class GOReleaseSkill : pb::IMessage<GOReleaseSkill> {
    private static readonly pb::MessageParser<GOReleaseSkill> _parser = new pb::MessageParser<GOReleaseSkill>(() => new GOReleaseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GOReleaseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOReleaseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOReleaseSkill(GOReleaseSkill other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      state_ = other.state_;
      curPos_ = other.curPos_ != null ? other.curPos_.Clone() : null;
      curDir_ = other.curDir_ != null ? other.curDir_.Clone() : null;
      targuid_ = other.targuid_;
      tarpos_ = other.tarpos_ != null ? other.tarpos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOReleaseSkill Clone() {
      return new GOReleaseSkill(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::GSToGC.SkillState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.SkillState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "curPos" field.</summary>
    public const int CurPosFieldNumber = 5;
    private global::GSToGC.Pos curPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos CurPos {
      get { return curPos_; }
      set {
        curPos_ = value;
      }
    }

    /// <summary>Field number for the "curDir" field.</summary>
    public const int CurDirFieldNumber = 6;
    private global::GSToGC.Dir curDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir CurDir {
      get { return curDir_; }
      set {
        curDir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 7;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "tarpos" field.</summary>
    public const int TarposFieldNumber = 8;
    private global::GSToGC.Pos tarpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Tarpos {
      get { return tarpos_; }
      set {
        tarpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GOReleaseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GOReleaseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (State != other.State) return false;
      if (!object.Equals(CurPos, other.CurPos)) return false;
      if (!object.Equals(CurDir, other.CurDir)) return false;
      if (Targuid != other.Targuid) return false;
      if (!object.Equals(Tarpos, other.Tarpos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (curPos_ != null) hash ^= CurPos.GetHashCode();
      if (curDir_ != null) hash ^= CurDir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (tarpos_ != null) hash ^= Tarpos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (curPos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurPos);
      }
      if (curDir_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CurDir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Targuid);
      }
      if (tarpos_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Tarpos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (curPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurPos);
      }
      if (curDir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurDir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (tarpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tarpos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GOReleaseSkill other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.curPos_ != null) {
        if (curPos_ == null) {
          curPos_ = new global::GSToGC.Pos();
        }
        CurPos.MergeFrom(other.CurPos);
      }
      if (other.curDir_ != null) {
        if (curDir_ == null) {
          curDir_ = new global::GSToGC.Dir();
        }
        CurDir.MergeFrom(other.CurDir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.tarpos_ != null) {
        if (tarpos_ == null) {
          tarpos_ = new global::GSToGC.Pos();
        }
        Tarpos.MergeFrom(other.Tarpos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            state_ = (global::GSToGC.SkillState) input.ReadEnum();
            break;
          }
          case 42: {
            if (curPos_ == null) {
              curPos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(curPos_);
            break;
          }
          case 50: {
            if (curDir_ == null) {
              curDir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(curDir_);
            break;
          }
          case 56: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 66: {
            if (tarpos_ == null) {
              tarpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(tarpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyGameObjectSkillCD
  /// </summary>
  public sealed partial class GOSkillCD : pb::IMessage<GOSkillCD> {
    private static readonly pb::MessageParser<GOSkillCD> _parser = new pb::MessageParser<GOSkillCD>(() => new GOSkillCD());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GOSkillCD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOSkillCD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOSkillCD(GOSkillCD other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GOSkillCD Clone() {
      return new GOSkillCD(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GOSkillCD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GOSkillCD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GOSkillCD other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelEmit
  /// </summary>
  public sealed partial class EmitSkill : pb::IMessage<EmitSkill> {
    private static readonly pb::MessageParser<EmitSkill> _parser = new pb::MessageParser<EmitSkill>(() => new EmitSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmitSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitSkill(EmitSkill other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      uniqueid_ = other.uniqueid_;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      tarpos_ = other.tarpos_ != null ? other.tarpos_.Clone() : null;
      ifAbsorbSkill_ = other.ifAbsorbSkill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitSkill Clone() {
      return new EmitSkill(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 6;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "tarpos" field.</summary>
    public const int TarposFieldNumber = 7;
    private global::GSToGC.Pos tarpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Tarpos {
      get { return tarpos_; }
      set {
        tarpos_ = value;
      }
    }

    /// <summary>Field number for the "ifAbsorbSkill" field.</summary>
    public const int IfAbsorbSkillFieldNumber = 8;
    private bool ifAbsorbSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfAbsorbSkill {
      get { return ifAbsorbSkill_; }
      set {
        ifAbsorbSkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmitSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmitSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      if (!object.Equals(Tarpos, other.Tarpos)) return false;
      if (IfAbsorbSkill != other.IfAbsorbSkill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (tarpos_ != null) hash ^= Tarpos.GetHashCode();
      if (IfAbsorbSkill != false) hash ^= IfAbsorbSkill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Uniqueid);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Targuid);
      }
      if (tarpos_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tarpos);
      }
      if (IfAbsorbSkill != false) {
        output.WriteRawTag(64);
        output.WriteBool(IfAbsorbSkill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (tarpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tarpos);
      }
      if (IfAbsorbSkill != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmitSkill other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.tarpos_ != null) {
        if (tarpos_ == null) {
          tarpos_ = new global::GSToGC.Pos();
        }
        Tarpos.MergeFrom(other.Tarpos);
      }
      if (other.IfAbsorbSkill != false) {
        IfAbsorbSkill = other.IfAbsorbSkill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadInt32();
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 48: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 58: {
            if (tarpos_ == null) {
              tarpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(tarpos_);
            break;
          }
          case 64: {
            IfAbsorbSkill = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelEmitDestroy
  /// </summary>
  public sealed partial class DestroyEmitEffect : pb::IMessage<DestroyEmitEffect> {
    private static readonly pb::MessageParser<DestroyEmitEffect> _parser = new pb::MessageParser<DestroyEmitEffect>(() => new DestroyEmitEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyEmitEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyEmitEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyEmitEffect(DestroyEmitEffect other) : this() {
      msgid_ = other.msgid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyEmitEffect Clone() {
      return new DestroyEmitEffect(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 2;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyEmitEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyEmitEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyEmitEffect other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Uniqueid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitTar : pb::IMessage<HitTar> {
    private static readonly pb::MessageParser<HitTar> _parser = new pb::MessageParser<HitTar>(() => new HitTar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitTar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitTar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitTar(HitTar other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      targuid_ = other.targuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitTar Clone() {
      return new HitTar(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 4;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitTar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitTar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Targuid != other.Targuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Targuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitTar other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Targuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelRange
  /// </summary>
  public sealed partial class RangeEffect : pb::IMessage<RangeEffect> {
    private static readonly pb::MessageParser<RangeEffect> _parser = new pb::MessageParser<RangeEffect>(() => new RangeEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffect(RangeEffect other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      uniqueid_ = other.uniqueid_;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffect Clone() {
      return new RangeEffect(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private uint uniqueid_;
    /// <summary>
    ///?????????????????
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Uniqueid);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (pos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uniqueid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeEffect other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 50: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelRangeEnd
  /// </summary>
  public sealed partial class RangeEffectEnd : pb::IMessage<RangeEffectEnd> {
    private static readonly pb::MessageParser<RangeEffectEnd> _parser = new pb::MessageParser<RangeEffectEnd>(() => new RangeEffectEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeEffectEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffectEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffectEnd(RangeEffectEnd other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeEffectEnd Clone() {
      return new RangeEffectEnd(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 3;
    private uint uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeEffectEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeEffectEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeEffectEnd other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Uniqueid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelSummonEffect
  /// </summary>
  public sealed partial class SummonEffect : pb::IMessage<SummonEffect> {
    private static readonly pb::MessageParser<SummonEffect> _parser = new pb::MessageParser<SummonEffect>(() => new SummonEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummonEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffect(SummonEffect other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      npcguid_ = other.npcguid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffect Clone() {
      return new SummonEffect(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "npcguid" field.</summary>
    public const int NpcguidFieldNumber = 4;
    private ulong npcguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Npcguid {
      get { return npcguid_; }
      set {
        npcguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummonEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummonEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Npcguid != other.Npcguid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Npcguid != 0UL) hash ^= Npcguid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Npcguid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Npcguid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Npcguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcguid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummonEffect other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Npcguid != 0UL) {
        Npcguid = other.Npcguid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Npcguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelBuf
  /// </summary>
  public sealed partial class BuffEffect : pb::IMessage<BuffEffect> {
    private static readonly pb::MessageParser<BuffEffect> _parser = new pb::MessageParser<BuffEffect>(() => new BuffEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffect(BuffEffect other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      uniqueid_ = other.uniqueid_;
      targuid_ = other.targuid_;
      time_ = other.time_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffect Clone() {
      return new BuffEffect(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private uint uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 5;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      if (Targuid != other.Targuid) return false;
      if (Time != other.Time) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Uniqueid);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Targuid);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uniqueid);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffEffect other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadUInt32();
            break;
          }
          case 40: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
          case 56: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySummonLifeTime
  /// </summary>
  public sealed partial class NotifySummonLifeTime : pb::IMessage<NotifySummonLifeTime> {
    private static readonly pb::MessageParser<NotifySummonLifeTime> _parser = new pb::MessageParser<NotifySummonLifeTime>(() => new NotifySummonLifeTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySummonLifeTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySummonLifeTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySummonLifeTime(NotifySummonLifeTime other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      lifetime_ = other.lifetime_;
      resttime_ = other.resttime_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySummonLifeTime Clone() {
      return new NotifySummonLifeTime(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 3;
    private int lifetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "resttime" field.</summary>
    public const int ResttimeFieldNumber = 4;
    private int resttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resttime {
      get { return resttime_; }
      set {
        resttime_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 6;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySummonLifeTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySummonLifeTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Lifetime != other.Lifetime) return false;
      if (Resttime != other.Resttime) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Lifetime != 0) hash ^= Lifetime.GetHashCode();
      if (Resttime != 0) hash ^= Resttime.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Lifetime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lifetime);
      }
      if (Resttime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Resttime);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Lifetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lifetime);
      }
      if (Resttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resttime);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySummonLifeTime other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Lifetime != 0) {
        Lifetime = other.Lifetime;
      }
      if (other.Resttime != 0) {
        Resttime = other.Resttime;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Lifetime = input.ReadInt32();
            break;
          }
          case 32: {
            Resttime = input.ReadInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 50: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelStartForceMove
  /// </summary>
  public sealed partial class NotifySkillModelStartForceMove : pb::IMessage<NotifySkillModelStartForceMove> {
    private static readonly pb::MessageParser<NotifySkillModelStartForceMove> _parser = new pb::MessageParser<NotifySkillModelStartForceMove>(() => new NotifySkillModelStartForceMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelStartForceMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMove(NotifySkillModelStartForceMove other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      pod_ = other.pod_ != null ? other.pod_.Clone() : null;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMove Clone() {
      return new NotifySkillModelStartForceMove(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private int effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "pod" field.</summary>
    public const int PodFieldNumber = 5;
    private global::GSToGC.Pos pod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pod {
      get { return pod_; }
      set {
        pod_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelStartForceMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelStartForceMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (!object.Equals(Pod, other.Pod)) return false;
      if (Speed != other.Speed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (pod_ != null) hash ^= Pod.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Effectid);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (pod_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pod);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (pod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pod);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelStartForceMove other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.pod_ != null) {
        if (pod_ == null) {
          pod_ = new global::GSToGC.Pos();
        }
        Pod.MergeFrom(other.Pod);
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadInt32();
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 42: {
            if (pod_ == null) {
              pod_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pod_);
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelStartForceMoveStop
  /// </summary>
  public sealed partial class NotifySkillModelStartForceMoveStop : pb::IMessage<NotifySkillModelStartForceMoveStop> {
    private static readonly pb::MessageParser<NotifySkillModelStartForceMoveStop> _parser = new pb::MessageParser<NotifySkillModelStartForceMoveStop>(() => new NotifySkillModelStartForceMoveStop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelStartForceMoveStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveStop(NotifySkillModelStartForceMoveStop other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveStop Clone() {
      return new NotifySkillModelStartForceMoveStop(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private int effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelStartForceMoveStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelStartForceMoveStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Effectid);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelStartForceMoveStop other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelStartForceMoveTeleport
  /// </summary>
  public sealed partial class NotifySkillModelStartForceMoveTeleport : pb::IMessage<NotifySkillModelStartForceMoveTeleport> {
    private static readonly pb::MessageParser<NotifySkillModelStartForceMoveTeleport> _parser = new pb::MessageParser<NotifySkillModelStartForceMoveTeleport>(() => new NotifySkillModelStartForceMoveTeleport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelStartForceMoveTeleport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveTeleport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveTeleport(NotifySkillModelStartForceMoveTeleport other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      beginpos_ = other.beginpos_ != null ? other.beginpos_.Clone() : null;
      begindir_ = other.begindir_ != null ? other.begindir_.Clone() : null;
      tarpos_ = other.tarpos_ != null ? other.tarpos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartForceMoveTeleport Clone() {
      return new NotifySkillModelStartForceMoveTeleport(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private int effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "beginpos" field.</summary>
    public const int BeginposFieldNumber = 4;
    private global::GSToGC.Pos beginpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Beginpos {
      get { return beginpos_; }
      set {
        beginpos_ = value;
      }
    }

    /// <summary>Field number for the "begindir" field.</summary>
    public const int BegindirFieldNumber = 5;
    private global::GSToGC.Dir begindir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Begindir {
      get { return begindir_; }
      set {
        begindir_ = value;
      }
    }

    /// <summary>Field number for the "tarpos" field.</summary>
    public const int TarposFieldNumber = 6;
    private global::GSToGC.Pos tarpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Tarpos {
      get { return tarpos_; }
      set {
        tarpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelStartForceMoveTeleport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelStartForceMoveTeleport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (!object.Equals(Beginpos, other.Beginpos)) return false;
      if (!object.Equals(Begindir, other.Begindir)) return false;
      if (!object.Equals(Tarpos, other.Tarpos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (beginpos_ != null) hash ^= Beginpos.GetHashCode();
      if (begindir_ != null) hash ^= Begindir.GetHashCode();
      if (tarpos_ != null) hash ^= Tarpos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Effectid);
      }
      if (beginpos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Beginpos);
      }
      if (begindir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Begindir);
      }
      if (tarpos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Tarpos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
      }
      if (beginpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beginpos);
      }
      if (begindir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Begindir);
      }
      if (tarpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tarpos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelStartForceMoveTeleport other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.beginpos_ != null) {
        if (beginpos_ == null) {
          beginpos_ = new global::GSToGC.Pos();
        }
        Beginpos.MergeFrom(other.Beginpos);
      }
      if (other.begindir_ != null) {
        if (begindir_ == null) {
          begindir_ = new global::GSToGC.Dir();
        }
        Begindir.MergeFrom(other.Begindir);
      }
      if (other.tarpos_ != null) {
        if (tarpos_ == null) {
          tarpos_ = new global::GSToGC.Pos();
        }
        Tarpos.MergeFrom(other.Tarpos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadInt32();
            break;
          }
          case 34: {
            if (beginpos_ == null) {
              beginpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(beginpos_);
            break;
          }
          case 42: {
            if (begindir_ == null) {
              begindir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(begindir_);
            break;
          }
          case 50: {
            if (tarpos_ == null) {
              tarpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(tarpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///??OnNetMsg_NotifySkillModelPurification
  /// </summary>
  public sealed partial class NotifySkillModelPurification : pb::IMessage<NotifySkillModelPurification> {
    private static readonly pb::MessageParser<NotifySkillModelPurification> _parser = new pb::MessageParser<NotifySkillModelPurification>(() => new NotifySkillModelPurification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelPurification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurification(NotifySkillModelPurification other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      targetguid_ = other.targetguid_;
      effectid_ = other.effectid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelPurification Clone() {
      return new NotifySkillModelPurification(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "targetguid" field.</summary>
    public const int TargetguidFieldNumber = 3;
    private ulong targetguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetguid {
      get { return targetguid_; }
      set {
        targetguid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 4;
    private int effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelPurification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelPurification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Targetguid != other.Targetguid) return false;
      if (Effectid != other.Effectid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Targetguid != 0UL) hash ^= Targetguid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Targetguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Targetguid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Effectid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Targetguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetguid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelPurification other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Targetguid != 0UL) {
        Targetguid = other.Targetguid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Targetguid = input.ReadUInt64();
            break;
          }
          case 32: {
            Effectid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelStartLink : pb::IMessage<NotifySkillModelStartLink> {
    private static readonly pb::MessageParser<NotifySkillModelStartLink> _parser = new pb::MessageParser<NotifySkillModelStartLink>(() => new NotifySkillModelStartLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelStartLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartLink(NotifySkillModelStartLink other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      beginpos_ = other.beginpos_ != null ? other.beginpos_.Clone() : null;
      targetguid_ = other.targetguid_;
      effectid_ = other.effectid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStartLink Clone() {
      return new NotifySkillModelStartLink(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beginpos" field.</summary>
    public const int BeginposFieldNumber = 3;
    private global::GSToGC.Pos beginpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Beginpos {
      get { return beginpos_; }
      set {
        beginpos_ = value;
      }
    }

    /// <summary>Field number for the "targetguid" field.</summary>
    public const int TargetguidFieldNumber = 4;
    private ulong targetguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetguid {
      get { return targetguid_; }
      set {
        targetguid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 5;
    private int effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 6;
    private uint uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelStartLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelStartLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Beginpos, other.Beginpos)) return false;
      if (Targetguid != other.Targetguid) return false;
      if (Effectid != other.Effectid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (beginpos_ != null) hash ^= Beginpos.GetHashCode();
      if (Targetguid != 0UL) hash ^= Targetguid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (beginpos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Beginpos);
      }
      if (Targetguid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Targetguid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Effectid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (beginpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beginpos);
      }
      if (Targetguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetguid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelStartLink other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.beginpos_ != null) {
        if (beginpos_ == null) {
          beginpos_ = new global::GSToGC.Pos();
        }
        Beginpos.MergeFrom(other.Beginpos);
      }
      if (other.Targetguid != 0UL) {
        Targetguid = other.Targetguid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (beginpos_ == null) {
              beginpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(beginpos_);
            break;
          }
          case 32: {
            Targetguid = input.ReadUInt64();
            break;
          }
          case 40: {
            Effectid = input.ReadInt32();
            break;
          }
          case 48: {
            Uniqueid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifySkillModelStopLink : pb::IMessage<NotifySkillModelStopLink> {
    private static readonly pb::MessageParser<NotifySkillModelStopLink> _parser = new pb::MessageParser<NotifySkillModelStopLink>(() => new NotifySkillModelStopLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelStopLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStopLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStopLink(NotifySkillModelStopLink other) : this() {
      msgid_ = other.msgid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelStopLink Clone() {
      return new NotifySkillModelStopLink(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 2;
    private uint uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelStopLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelStopLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelStopLink other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Uniqueid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillPassitive
  /// </summary>
  public sealed partial class NotifyPassitiveSkillRelease : pb::IMessage<NotifyPassitiveSkillRelease> {
    private static readonly pb::MessageParser<NotifyPassitiveSkillRelease> _parser = new pb::MessageParser<NotifyPassitiveSkillRelease>(() => new NotifyPassitiveSkillRelease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveSkillRelease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillRelease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillRelease(NotifyPassitiveSkillRelease other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      timeLeft_ = other.timeLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillRelease Clone() {
      return new NotifyPassitiveSkillRelease(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "timeLeft" field.</summary>
    public const int TimeLeftFieldNumber = 4;
    private int timeLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLeft {
      get { return timeLeft_; }
      set {
        timeLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveSkillRelease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveSkillRelease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (TimeLeft != other.TimeLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (TimeLeft != 0) hash ^= TimeLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (TimeLeft != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (TimeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveSkillRelease other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.TimeLeft != 0) {
        TimeLeft = other.TimeLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            TimeLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillPassitiveLoad
  /// </summary>
  public sealed partial class NotifyPassitiveSkillLoad : pb::IMessage<NotifyPassitiveSkillLoad> {
    private static readonly pb::MessageParser<NotifyPassitiveSkillLoad> _parser = new pb::MessageParser<NotifyPassitiveSkillLoad>(() => new NotifyPassitiveSkillLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveSkillLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillLoad(NotifyPassitiveSkillLoad other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillLoad Clone() {
      return new NotifyPassitiveSkillLoad(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveSkillLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveSkillLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveSkillLoad other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillPassitiveUnLoad
  /// </summary>
  public sealed partial class NotifyPassitiveSkillUnLoad : pb::IMessage<NotifyPassitiveSkillUnLoad> {
    private static readonly pb::MessageParser<NotifyPassitiveSkillUnLoad> _parser = new pb::MessageParser<NotifyPassitiveSkillUnLoad>(() => new NotifyPassitiveSkillUnLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyPassitiveSkillUnLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillUnLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillUnLoad(NotifyPassitiveSkillUnLoad other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillid_ = other.skillid_;
      uniqueid_ = other.uniqueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyPassitiveSkillUnLoad Clone() {
      return new NotifyPassitiveSkillUnLoad(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 4;
    private int uniqueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyPassitiveSkillUnLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyPassitiveSkillUnLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillid != other.Skillid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Uniqueid != 0) hash ^= Uniqueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skillid);
      }
      if (Uniqueid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Uniqueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (Uniqueid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uniqueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyPassitiveSkillUnLoad other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Uniqueid != 0) {
        Uniqueid = other.Uniqueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillid = input.ReadInt32();
            break;
          }
          case 32: {
            Uniqueid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillModelEmitTurn
  /// </summary>
  public sealed partial class NotifySkillModelEmitTurn : pb::IMessage<NotifySkillModelEmitTurn> {
    private static readonly pb::MessageParser<NotifySkillModelEmitTurn> _parser = new pb::MessageParser<NotifySkillModelEmitTurn>(() => new NotifySkillModelEmitTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillModelEmitTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitTurn(NotifySkillModelEmitTurn other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      effectid_ = other.effectid_;
      progectid_ = other.progectid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      targuid_ = other.targuid_;
      tarpos_ = other.tarpos_ != null ? other.tarpos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillModelEmitTurn Clone() {
      return new NotifySkillModelEmitTurn(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "progectid" field.</summary>
    public const int ProgectidFieldNumber = 4;
    private int progectid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progectid {
      get { return progectid_; }
      set {
        progectid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 6;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "targuid" field.</summary>
    public const int TarguidFieldNumber = 7;
    private ulong targuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targuid {
      get { return targuid_; }
      set {
        targuid_ = value;
      }
    }

    /// <summary>Field number for the "tarpos" field.</summary>
    public const int TarposFieldNumber = 8;
    private global::GSToGC.Pos tarpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Tarpos {
      get { return tarpos_; }
      set {
        tarpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillModelEmitTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillModelEmitTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Effectid != other.Effectid) return false;
      if (Progectid != other.Progectid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Targuid != other.Targuid) return false;
      if (!object.Equals(Tarpos, other.Tarpos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (Progectid != 0) hash ^= Progectid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Targuid != 0UL) hash ^= Targuid.GetHashCode();
      if (tarpos_ != null) hash ^= Tarpos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (Progectid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Progectid);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Dir);
      }
      if (Targuid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Targuid);
      }
      if (tarpos_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Tarpos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (Progectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progectid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Targuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targuid);
      }
      if (tarpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tarpos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillModelEmitTurn other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.Progectid != 0) {
        Progectid = other.Progectid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Targuid != 0UL) {
        Targuid = other.Targuid;
      }
      if (other.tarpos_ != null) {
        if (tarpos_ == null) {
          tarpos_ = new global::GSToGC.Pos();
        }
        Tarpos.MergeFrom(other.Tarpos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            Progectid = input.ReadInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 50: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 56: {
            Targuid = input.ReadUInt64();
            break;
          }
          case 66: {
            if (tarpos_ == null) {
              tarpos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(tarpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBornObj
  /// </summary>
  public sealed partial class NotifyBornObj : pb::IMessage<NotifyBornObj> {
    private static readonly pb::MessageParser<NotifyBornObj> _parser = new pb::MessageParser<NotifyBornObj>(() => new NotifyBornObj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBornObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBornObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBornObj(NotifyBornObj other) : this() {
      msgid_ = other.msgid_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBornObj Clone() {
      return new NotifyBornObj(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBornObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBornObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBornObj other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyReconnectInfo
  /// </summary>
  public sealed partial class NotifyReconnectInfo : pb::IMessage<NotifyReconnectInfo> {
    private static readonly pb::MessageParser<NotifyReconnectInfo> _parser = new pb::MessageParser<NotifyReconnectInfo>(() => new NotifyReconnectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyReconnectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyReconnectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyReconnectInfo(NotifyReconnectInfo other) : this() {
      msgid_ = other.msgid_;
      battlestate_ = other.battlestate_;
      remainTimes_ = other.remainTimes_;
      ifob_ = other.ifob_;
      reconnectinfo_ = other.reconnectinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyReconnectInfo Clone() {
      return new NotifyReconnectInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "battlestate" field.</summary>
    public const int BattlestateFieldNumber = 2;
    private int battlestate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlestate {
      get { return battlestate_; }
      set {
        battlestate_ = value;
      }
    }

    /// <summary>Field number for the "remain_times" field.</summary>
    public const int RemainTimesFieldNumber = 3;
    private int remainTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTimes {
      get { return remainTimes_; }
      set {
        remainTimes_ = value;
      }
    }

    /// <summary>Field number for the "ifob" field.</summary>
    public const int IfobFieldNumber = 4;
    private bool ifob_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ifob {
      get { return ifob_; }
      set {
        ifob_ = value;
      }
    }

    /// <summary>Field number for the "reconnectinfo" field.</summary>
    public const int ReconnectinfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo> _repeated_reconnectinfo_codec
        = pb::FieldCodec.ForMessage(42, global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo> reconnectinfo_ = new pbc::RepeatedField<global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.NotifyReconnectInfo.Types.ReconnectInfo> Reconnectinfo {
      get { return reconnectinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyReconnectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyReconnectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Battlestate != other.Battlestate) return false;
      if (RemainTimes != other.RemainTimes) return false;
      if (Ifob != other.Ifob) return false;
      if(!reconnectinfo_.Equals(other.reconnectinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Battlestate != 0) hash ^= Battlestate.GetHashCode();
      if (RemainTimes != 0) hash ^= RemainTimes.GetHashCode();
      if (Ifob != false) hash ^= Ifob.GetHashCode();
      hash ^= reconnectinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Battlestate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Battlestate);
      }
      if (RemainTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTimes);
      }
      if (Ifob != false) {
        output.WriteRawTag(32);
        output.WriteBool(Ifob);
      }
      reconnectinfo_.WriteTo(output, _repeated_reconnectinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Battlestate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlestate);
      }
      if (RemainTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTimes);
      }
      if (Ifob != false) {
        size += 1 + 1;
      }
      size += reconnectinfo_.CalculateSize(_repeated_reconnectinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyReconnectInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Battlestate != 0) {
        Battlestate = other.Battlestate;
      }
      if (other.RemainTimes != 0) {
        RemainTimes = other.RemainTimes;
      }
      if (other.Ifob != false) {
        Ifob = other.Ifob;
      }
      reconnectinfo_.Add(other.reconnectinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battlestate = input.ReadInt32();
            break;
          }
          case 24: {
            RemainTimes = input.ReadInt32();
            break;
          }
          case 32: {
            Ifob = input.ReadBool();
            break;
          }
          case 42: {
            reconnectinfo_.AddEntriesFrom(input, _repeated_reconnectinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotifyReconnectInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReconnectInfo : pb::IMessage<ReconnectInfo> {
        private static readonly pb::MessageParser<ReconnectInfo> _parser = new pb::MessageParser<ReconnectInfo>(() => new ReconnectInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReconnectInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.NotifyReconnectInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReconnectInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReconnectInfo(ReconnectInfo other) : this() {
          pos_ = other.pos_;
          guid_ = other.guid_;
          nickname_ = other.nickname_;
          heroid_ = other.heroid_;
          ifselected_ = other.ifselected_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReconnectInfo Clone() {
          return new ReconnectInfo(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private int pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 2;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 3;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 4;
        private uint heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        /// <summary>Field number for the "ifselected" field.</summary>
        public const int IfselectedFieldNumber = 5;
        private bool ifselected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Ifselected {
          get { return ifselected_; }
          set {
            ifselected_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReconnectInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReconnectInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pos != other.Pos) return false;
          if (Guid != other.Guid) return false;
          if (Nickname != other.Nickname) return false;
          if (Heroid != other.Heroid) return false;
          if (Ifselected != other.Ifselected) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (Ifselected != false) hash ^= Ifselected.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Pos);
          }
          if (Guid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Guid);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Nickname);
          }
          if (Heroid != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Heroid);
          }
          if (Ifselected != false) {
            output.WriteRawTag(40);
            output.WriteBool(Ifselected);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
          }
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
          }
          if (Ifselected != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReconnectInfo other) {
          if (other == null) {
            return;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          if (other.Ifselected != false) {
            Ifselected = other.Ifselected;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Pos = input.ReadInt32();
                break;
              }
              case 16: {
                Guid = input.ReadUInt64();
                break;
              }
              case 26: {
                Nickname = input.ReadString();
                break;
              }
              case 32: {
                Heroid = input.ReadUInt32();
                break;
              }
              case 40: {
                Ifselected = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///???OnNetMsg_NotifyOBReturnBattleRoom
  /// </summary>
  public sealed partial class NotifyOBReturnBattleRoom : pb::IMessage<NotifyOBReturnBattleRoom> {
    private static readonly pb::MessageParser<NotifyOBReturnBattleRoom> _parser = new pb::MessageParser<NotifyOBReturnBattleRoom>(() => new NotifyOBReturnBattleRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOBReturnBattleRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBReturnBattleRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBReturnBattleRoom(NotifyOBReturnBattleRoom other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBReturnBattleRoom Clone() {
      return new NotifyOBReturnBattleRoom(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyOBReturnBattleRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyOBReturnBattleRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyOBReturnBattleRoom other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyOBAppear
  /// </summary>
  public sealed partial class NotifyOBAppear : pb::IMessage<NotifyOBAppear> {
    private static readonly pb::MessageParser<NotifyOBAppear> _parser = new pb::MessageParser<NotifyOBAppear>(() => new NotifyOBAppear());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyOBAppear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBAppear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBAppear(NotifyOBAppear other) : this() {
      msgid_ = other.msgid_;
      obid_ = other.obid_;
      camp_ = other.camp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyOBAppear Clone() {
      return new NotifyOBAppear(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "obid" field.</summary>
    public const int ObidFieldNumber = 2;
    private ulong obid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Obid {
      get { return obid_; }
      set {
        obid_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private int camp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyOBAppear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyOBAppear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Obid != other.Obid) return false;
      if (Camp != other.Camp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Obid != 0UL) hash ^= Obid.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Obid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Obid);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Camp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Obid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Obid);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyOBAppear other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Obid != 0UL) {
        Obid = other.Obid;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Obid = input.ReadUInt64();
            break;
          }
          case 24: {
            Camp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg__NotifyKillNPC
  /// </summary>
  public sealed partial class NotifyKillNPC : pb::IMessage<NotifyKillNPC> {
    private static readonly pb::MessageParser<NotifyKillNPC> _parser = new pb::MessageParser<NotifyKillNPC>(() => new NotifyKillNPC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyKillNPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyKillNPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyKillNPC(NotifyKillNPC other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      killnum_ = other.killnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyKillNPC Clone() {
      return new NotifyKillNPC(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "killnum" field.</summary>
    public const int KillnumFieldNumber = 3;
    private uint killnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Killnum {
      get { return killnum_; }
      set {
        killnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyKillNPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyKillNPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Killnum != other.Killnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Killnum != 0) hash ^= Killnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Killnum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Killnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Killnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Killnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyKillNPC other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Killnum != 0) {
        Killnum = other.Killnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Killnum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyAltarBSIco : pb::IMessage<NotifyAltarBSIco> {
    private static readonly pb::MessageParser<NotifyAltarBSIco> _parser = new pb::MessageParser<NotifyAltarBSIco>(() => new NotifyAltarBSIco());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyAltarBSIco> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAltarBSIco() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAltarBSIco(NotifyAltarBSIco other) : this() {
      msgid_ = other.msgid_;
      altarid_ = other.altarid_;
      objtype_ = other.objtype_;
      optype_ = other.optype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAltarBSIco Clone() {
      return new NotifyAltarBSIco(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "altarid" field.</summary>
    public const int AltaridFieldNumber = 2;
    private uint altarid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Altarid {
      get { return altarid_; }
      set {
        altarid_ = value;
      }
    }

    /// <summary>Field number for the "objtype" field.</summary>
    public const int ObjtypeFieldNumber = 3;
    private uint objtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Objtype {
      get { return objtype_; }
      set {
        objtype_ = value;
      }
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 4;
    private uint optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyAltarBSIco);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyAltarBSIco other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Altarid != other.Altarid) return false;
      if (Objtype != other.Objtype) return false;
      if (Optype != other.Optype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Altarid != 0) hash ^= Altarid.GetHashCode();
      if (Objtype != 0) hash ^= Objtype.GetHashCode();
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Altarid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Altarid);
      }
      if (Objtype != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Objtype);
      }
      if (Optype != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Optype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Altarid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Altarid);
      }
      if (Objtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Objtype);
      }
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyAltarBSIco other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Altarid != 0) {
        Altarid = other.Altarid;
      }
      if (other.Objtype != 0) {
        Objtype = other.Objtype;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Altarid = input.ReadUInt32();
            break;
          }
          case 24: {
            Objtype = input.ReadUInt32();
            break;
          }
          case 32: {
            Optype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifySkillUpLv
  /// </summary>
  public sealed partial class NotifySkillUpLv : pb::IMessage<NotifySkillUpLv> {
    private static readonly pb::MessageParser<NotifySkillUpLv> _parser = new pb::MessageParser<NotifySkillUpLv>(() => new NotifySkillUpLv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifySkillUpLv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillUpLv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillUpLv(NotifySkillUpLv other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      skillpos_ = other.skillpos_;
      skillid_ = other.skillid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifySkillUpLv Clone() {
      return new NotifySkillUpLv(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillpos" field.</summary>
    public const int SkillposFieldNumber = 3;
    private uint skillpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillpos {
      get { return skillpos_; }
      set {
        skillpos_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifySkillUpLv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifySkillUpLv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Skillpos != other.Skillpos) return false;
      if (Skillid != other.Skillid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Skillpos != 0) hash ^= Skillpos.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Skillpos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Skillpos);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Skillpos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillpos);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifySkillUpLv other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Skillpos != 0) {
        Skillpos = other.Skillpos;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Skillpos = input.ReadUInt32();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg_NotifyBlastHurt
  /// </summary>
  public sealed partial class NotifyBlastHurt : pb::IMessage<NotifyBlastHurt> {
    private static readonly pb::MessageParser<NotifyBlastHurt> _parser = new pb::MessageParser<NotifyBlastHurt>(() => new NotifyBlastHurt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyBlastHurt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBlastHurt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBlastHurt(NotifyBlastHurt other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      blasthp_ = other.blasthp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyBlastHurt Clone() {
      return new NotifyBlastHurt(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "blasthp" field.</summary>
    public const int BlasthpFieldNumber = 3;
    private int blasthp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Blasthp {
      get { return blasthp_; }
      set {
        blasthp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyBlastHurt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyBlastHurt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Blasthp != other.Blasthp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Blasthp != 0) hash ^= Blasthp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Blasthp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Blasthp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Blasthp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blasthp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyBlastHurt other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Blasthp != 0) {
        Blasthp = other.Blasthp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Blasthp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///???OnNetMsg__NotifyGameObjectReliveState
  /// </summary>
  public sealed partial class NotifyGameObjectReliveState : pb::IMessage<NotifyGameObjectReliveState> {
    private static readonly pb::MessageParser<NotifyGameObjectReliveState> _parser = new pb::MessageParser<NotifyGameObjectReliveState>(() => new NotifyGameObjectReliveState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyGameObjectReliveState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGameObjectReliveState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGameObjectReliveState(NotifyGameObjectReliveState other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyGameObjectReliveState Clone() {
      return new NotifyGameObjectReliveState(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::GSToGC.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::GSToGC.Dir dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.Dir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyGameObjectReliveState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyGameObjectReliveState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyGameObjectReliveState other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GSToGC.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::GSToGC.Dir();
        }
        Dir.MergeFrom(other.Dir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::GSToGC.Pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (dir_ == null) {
              dir_ = new global::GSToGC.Dir();
            }
            input.ReadMessage(dir_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyCurGold : pb::IMessage<NotifyCurGold> {
    private static readonly pb::MessageParser<NotifyCurGold> _parser = new pb::MessageParser<NotifyCurGold>(() => new NotifyCurGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyCurGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurGold(NotifyCurGold other) : this() {
      msgid_ = other.msgid_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurGold Clone() {
      return new NotifyCurGold(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private ulong gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyCurGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyCurGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Gold != 0UL) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Gold != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Gold != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyCurGold other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Gold != 0UL) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Gold = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGs_NotifyCurDiamond = 123
  /// </summary>
  public sealed partial class NotifyCurDiamond : pb::IMessage<NotifyCurDiamond> {
    private static readonly pb::MessageParser<NotifyCurDiamond> _parser = new pb::MessageParser<NotifyCurDiamond>(() => new NotifyCurDiamond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyCurDiamond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurDiamond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurDiamond(NotifyCurDiamond other) : this() {
      msgid_ = other.msgid_;
      diamond_ = other.diamond_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyCurDiamond Clone() {
      return new NotifyCurDiamond(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 2;
    private ulong diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyCurDiamond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyCurDiamond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Diamond != other.Diamond) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Diamond != 0UL) hash ^= Diamond.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Diamond != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Diamond);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Diamond != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diamond);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyCurDiamond other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Diamond != 0UL) {
        Diamond = other.Diamond;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Diamond = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyGetloginRewardSuccess
  /// </summary>
  public sealed partial class GetloginRewardSuccess : pb::IMessage<GetloginRewardSuccess> {
    private static readonly pb::MessageParser<GetloginRewardSuccess> _parser = new pb::MessageParser<GetloginRewardSuccess>(() => new GetloginRewardSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetloginRewardSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginRewardSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginRewardSuccess(GetloginRewardSuccess other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginRewardSuccess Clone() {
      return new GetloginRewardSuccess(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetloginRewardSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetloginRewardSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetloginRewardSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyGetloginReward_Skin
  /// </summary>
  public sealed partial class GetloginReward_Skin : pb::IMessage<GetloginReward_Skin> {
    private static readonly pb::MessageParser<GetloginReward_Skin> _parser = new pb::MessageParser<GetloginReward_Skin>(() => new GetloginReward_Skin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetloginReward_Skin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Skin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Skin(GetloginReward_Skin other) : this() {
      msgid_ = other.msgid_;
      skinid_ = other.skinid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Skin Clone() {
      return new GetloginReward_Skin(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "skinid" field.</summary>
    public const int SkinidFieldNumber = 2;
    private long skinid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Skinid {
      get { return skinid_; }
      set {
        skinid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetloginReward_Skin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetloginReward_Skin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Skinid != other.Skinid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Skinid != 0L) hash ^= Skinid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Skinid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Skinid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Skinid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Skinid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetloginReward_Skin other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Skinid != 0L) {
        Skinid = other.Skinid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Skinid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyGetloginReward_Rune
  /// </summary>
  public sealed partial class GetloginReward_Rune : pb::IMessage<GetloginReward_Rune> {
    private static readonly pb::MessageParser<GetloginReward_Rune> _parser = new pb::MessageParser<GetloginReward_Rune>(() => new GetloginReward_Rune());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetloginReward_Rune> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Rune() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Rune(GetloginReward_Rune other) : this() {
      msgid_ = other.msgid_;
      runeid_ = other.runeid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Rune Clone() {
      return new GetloginReward_Rune(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "runeid" field.</summary>
    public const int RuneidFieldNumber = 2;
    private long runeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Runeid {
      get { return runeid_; }
      set {
        runeid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetloginReward_Rune);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetloginReward_Rune other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Runeid != other.Runeid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Runeid != 0L) hash ^= Runeid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Runeid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Runeid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Runeid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Runeid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetloginReward_Rune other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Runeid != 0L) {
        Runeid = other.Runeid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Runeid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromGS_NotifyGetloginReward_Hero
  /// </summary>
  public sealed partial class GetloginReward_Hero : pb::IMessage<GetloginReward_Hero> {
    private static readonly pb::MessageParser<GetloginReward_Hero> _parser = new pb::MessageParser<GetloginReward_Hero>(() => new GetloginReward_Hero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetloginReward_Hero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Hero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Hero(GetloginReward_Hero other) : this() {
      msgid_ = other.msgid_;
      heroid_ = other.heroid_;
      expiredTime_ = other.expiredTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetloginReward_Hero Clone() {
      return new GetloginReward_Hero(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 2;
    private uint heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "expired_time" field.</summary>
    public const int ExpiredTimeFieldNumber = 3;
    private long expiredTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiredTime {
      get { return expiredTime_; }
      set {
        expiredTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetloginReward_Hero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetloginReward_Hero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Heroid != other.Heroid) return false;
      if (ExpiredTime != other.ExpiredTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (ExpiredTime != 0L) hash ^= ExpiredTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Heroid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Heroid);
      }
      if (ExpiredTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpiredTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
      }
      if (ExpiredTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiredTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetloginReward_Hero other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      if (other.ExpiredTime != 0L) {
        ExpiredTime = other.ExpiredTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Heroid = input.ReadUInt32();
            break;
          }
          case 24: {
            ExpiredTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToGCFromBS_NotifyCanInviteFriends
  /// </summary>
  public sealed partial class CanInviteFriends : pb::IMessage<CanInviteFriends> {
    private static readonly pb::MessageParser<CanInviteFriends> _parser = new pb::MessageParser<CanInviteFriends>(() => new CanInviteFriends());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanInviteFriends> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanInviteFriends() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanInviteFriends(CanInviteFriends other) : this() {
      msgid_ = other.msgid_;
      friends_ = other.friends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanInviteFriends Clone() {
      return new CanInviteFriends(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.CanInviteFriends.Types.Friends> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.CanInviteFriends.Types.Friends.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.CanInviteFriends.Types.Friends> friends_ = new pbc::RepeatedField<global::GSToGC.CanInviteFriends.Types.Friends>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.CanInviteFriends.Types.Friends> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanInviteFriends);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanInviteFriends other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!friends_.Equals(other.friends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= friends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanInviteFriends other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      friends_.Add(other.friends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CanInviteFriends message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Friends : pb::IMessage<Friends> {
        private static readonly pb::MessageParser<Friends> _parser = new pb::MessageParser<Friends>(() => new Friends());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Friends> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GSToGC.CanInviteFriends.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Friends() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Friends(Friends other) : this() {
          headerId_ = other.headerId_;
          nickname_ = other.nickname_;
          guididx_ = other.guididx_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Friends Clone() {
          return new Friends(this);
        }

        /// <summary>Field number for the "HeaderId" field.</summary>
        public const int HeaderIdFieldNumber = 1;
        private int headerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HeaderId {
          get { return headerId_; }
          set {
            headerId_ = value;
          }
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 2;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "guididx" field.</summary>
        public const int GuididxFieldNumber = 3;
        private ulong guididx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guididx {
          get { return guididx_; }
          set {
            guididx_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Friends);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Friends other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HeaderId != other.HeaderId) return false;
          if (Nickname != other.Nickname) return false;
          if (Guididx != other.Guididx) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HeaderId != 0) hash ^= HeaderId.GetHashCode();
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Guididx != 0UL) hash ^= Guididx.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HeaderId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(HeaderId);
          }
          if (Nickname.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Nickname);
          }
          if (Guididx != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Guididx);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HeaderId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeaderId);
          }
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Guididx != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guididx);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Friends other) {
          if (other == null) {
            return;
          }
          if (other.HeaderId != 0) {
            HeaderId = other.HeaderId;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Guididx != 0UL) {
            Guididx = other.Guididx;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HeaderId = input.ReadInt32();
                break;
              }
              case 18: {
                Nickname = input.ReadString();
                break;
              }
              case 24: {
                Guididx = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgToGCFromBS_NotifyCurLastHitNum = 142;
  /// </summary>
  public sealed partial class LastHitNum : pb::IMessage<LastHitNum> {
    private static readonly pb::MessageParser<LastHitNum> _parser = new pb::MessageParser<LastHitNum>(() => new LastHitNum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastHitNum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastHitNum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastHitNum(LastHitNum other) : this() {
      msgid_ = other.msgid_;
      guid_ = other.guid_;
      lhnum_ = other.lhnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastHitNum Clone() {
      return new LastHitNum(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "lhnum" field.</summary>
    public const int LhnumFieldNumber = 3;
    private int lhnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lhnum {
      get { return lhnum_; }
      set {
        lhnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastHitNum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastHitNum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Guid != other.Guid) return false;
      if (Lhnum != other.Lhnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Lhnum != 0) hash ^= Lhnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Lhnum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lhnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Lhnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lhnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastHitNum other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Lhnum != 0) {
        Lhnum = other.Lhnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Lhnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      roomId_ = other.roomId_;
      ifPwd_ = other.ifPwd_;
      mapId_ = other.mapId_;
      master_ = other.master_;
      curUserCount_ = other.curUserCount_;
      maxUserCount_ = other.maxUserCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "ifPwd" field.</summary>
    public const int IfPwdFieldNumber = 2;
    private int ifPwd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IfPwd {
      get { return ifPwd_; }
      set {
        ifPwd_ = value;
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 3;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 4;
    private string master_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Master {
      get { return master_; }
      set {
        master_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curUserCount" field.</summary>
    public const int CurUserCountFieldNumber = 5;
    private int curUserCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurUserCount {
      get { return curUserCount_; }
      set {
        curUserCount_ = value;
      }
    }

    /// <summary>Field number for the "maxUserCount" field.</summary>
    public const int MaxUserCountFieldNumber = 6;
    private int maxUserCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserCount {
      get { return maxUserCount_; }
      set {
        maxUserCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (IfPwd != other.IfPwd) return false;
      if (MapId != other.MapId) return false;
      if (Master != other.Master) return false;
      if (CurUserCount != other.CurUserCount) return false;
      if (MaxUserCount != other.MaxUserCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (IfPwd != 0) hash ^= IfPwd.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (Master.Length != 0) hash ^= Master.GetHashCode();
      if (CurUserCount != 0) hash ^= CurUserCount.GetHashCode();
      if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (IfPwd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IfPwd);
      }
      if (MapId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapId);
      }
      if (Master.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Master);
      }
      if (CurUserCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurUserCount);
      }
      if (MaxUserCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxUserCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (IfPwd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IfPwd);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (Master.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Master);
      }
      if (CurUserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurUserCount);
      }
      if (MaxUserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.IfPwd != 0) {
        IfPwd = other.IfPwd;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.Master.Length != 0) {
        Master = other.Master;
      }
      if (other.CurUserCount != 0) {
        CurUserCount = other.CurUserCount;
      }
      if (other.MaxUserCount != 0) {
        MaxUserCount = other.MaxUserCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            IfPwd = input.ReadInt32();
            break;
          }
          case 24: {
            MapId = input.ReadInt32();
            break;
          }
          case 34: {
            Master = input.ReadString();
            break;
          }
          case 40: {
            CurUserCount = input.ReadInt32();
            break;
          }
          case 48: {
            MaxUserCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRoomListRet : pb::IMessage<AskRoomListRet> {
    private static readonly pb::MessageParser<AskRoomListRet> _parser = new pb::MessageParser<AskRoomListRet>(() => new AskRoomListRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRoomListRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GSToGC.GSToGCReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRoomListRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRoomListRet(AskRoomListRet other) : this() {
      msgid_ = other.msgid_;
      roomlist_ = other.roomlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRoomListRet Clone() {
      return new AskRoomListRet(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::GSToGC.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GSToGC.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "roomlist" field.</summary>
    public const int RoomlistFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GSToGC.RoomInfo> _repeated_roomlist_codec
        = pb::FieldCodec.ForMessage(18, global::GSToGC.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::GSToGC.RoomInfo> roomlist_ = new pbc::RepeatedField<global::GSToGC.RoomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GSToGC.RoomInfo> Roomlist {
      get { return roomlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRoomListRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRoomListRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if(!roomlist_.Equals(other.roomlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      hash ^= roomlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      roomlist_.WriteTo(output, _repeated_roomlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      size += roomlist_.CalculateSize(_repeated_roomlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRoomListRet other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      roomlist_.Add(other.roomlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::GSToGC.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            roomlist_.AddEntriesFrom(input, _repeated_roomlist_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
