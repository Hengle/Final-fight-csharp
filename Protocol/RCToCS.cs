// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RCToCS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RCToCS {

  /// <summary>Holder for reflection information generated from RCToCS.proto</summary>
  public static partial class RCToCSReflection {

    #region Descriptor
    /// <summary>File descriptor for RCToCS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RCToCSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxSQ1RvQ1MucHJvdG8SBlJDVG9DUyIqCgpRdWVyeUNES2V5EhwKBW1zZ2lk",
            "GAEgASgOMg0uUkNUb0NTLk1zZ0lEIv4BCgtDcmVhdGVDREtleRIcCgVtc2dp",
            "ZBgBIAEoDjINLlJDVG9DUy5Nc2dJRBINCgV0aXRsZRgCIAEoCRIQCghwbGF0",
            "Zm9ybRgDIAEoBRIQCghlbmRfdGltZRgEIAEoBBIPCgdjb250ZW50GAUgASgJ",
            "EhEKCWdpZnRfdHlwZRgGIAEoBRIqCgRnaWZ0GAcgAygLMhwuUkNUb0NTLkNy",
            "ZWF0ZUNES2V5LmdpZnRJbmZvEhAKCGNvZGVfbGVuGAggASgFEg0KBWNka2V5",
            "GAkgAygJGi0KCGdpZnRJbmZvEg8KB2l0ZW1faWQYASABKAUSEAoIaXRlbV9u",
            "dW0YAiABKAUizAEKDUFza0FkZE1haWxSZXESHAoFbXNnaWQYASABKA4yDS5S",
            "Q1RvQ1MuTXNnSUQSDAoEdHlwZRgCIAEoBRILCgNzZGsYAyABKAUSDQoFdGl0",
            "bGUYBCABKAkSDwoHY29udGVudBgFIAEoCRIMCgRnaWZ0GAYgASgJEhIKCmNy",
            "ZWF0ZXRpbWUYByABKAkSDwoHZW5kdGltZRgIIAEoCRIOCgZzZW5kZXIYCSAB",
            "KAkSEgoKdXNlcklkbGlzdBgKIAMoAxILCgNkYXkYCyABKAUiNgoJQXNrUmVn",
            "aXN0EhwKBW1zZ2lkGAEgASgOMg0uUkNUb0NTLk1zZ0lEEgsKA2tleRgCIAEo",
            "DCItCg1Bc2tTZXJ2ZXJJbmZvEhwKBW1zZ2lkGAEgASgOMg0uUkNUb0NTLk1z",
            "Z0lEIjEKEUFza1NlcnZlclVzZXJJbmZvEhwKBW1zZ2lkGAEgASgOMg0uUkNU",
            "b0NTLk1zZ0lEIi0KDUFza05vdGljZUluZm8SHAoFbXNnaWQYASABKA4yDS5S",
            "Q1RvQ1MuTXNnSUQitAEKDEFza0FkZE5vdGljZRIcCgVtc2dpZBgBIAEoDjIN",
            "LlJDVG9DUy5Nc2dJRBIQCghwbGF0Zm9ybRgCIAEoBRINCgV0aXRsZRgDIAEo",
            "DBIMCgRmbGFnGAQgASgFEg0KBXN0YXRlGAUgASgFEhAKCHByaW9yaXR5GAYg",
            "ASgFEhEKCW5vdGljZU1zZxgHIAEoDBIRCglzdGFyX3RpbWUYCCABKAQSEAoI",
            "ZW5kX3RpbWUYCSABKAQiQQoPQXNrRGVsZXRlTm90aWNlEhwKBW1zZ2lkGAEg",
            "ASgOMg0uUkNUb0NTLk1zZ0lEEhAKCG5vdGljZUlkGAIgASgFKtgCCgVNc2dJ",
            "RBIKCgZ1bmtub3cQABIVCg9lTXNnUkMyQ1NfQmVnaW4Q6IECEhkKE2VNc2dS",
            "QzJDU19Bc2tSZWdpc3QQ6YECEh0KF2VNc2dSQzJDU19Bc2tTZXJ2ZXJJbmZv",
            "EOqBAhIhChtlTXNnUkMyQ1NfQXNrU2VydmVyVXNlckluZm8Q64ECEh0KF2VN",
            "c2dSQzJDU19Bc2tOb3RpY2VJbmZvEOyBAhIcChZlTXNnUkMyQ1NfQXNrQWRk",
            "Tm90aWNlEO2BAhIfChllTXNnUkMyQ1NfQXNrRGVsZXRlTm90aWNlEO6BAhId",
            "ChdlTXNnUkMyQ1NfQXNrQWRkT25lTWFpbBDvgQISHgoYZU1zZ1JDMkNTX0Fz",
            "a0NyZWF0ZUNES2V5EPCBAhIdChdlTXNnUkMyQ1NfQXNrUXVlcnlDRGtleRDx",
            "gQISEwoNZU1zZ1JDMkNTX0VuZBDbhQJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RCToCS.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.QueryCDKey), global::RCToCS.QueryCDKey.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.CreateCDKey), global::RCToCS.CreateCDKey.Parser, new[]{ "Msgid", "Title", "Platform", "EndTime", "Content", "GiftType", "Gift", "CodeLen", "Cdkey" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.CreateCDKey.Types.giftInfo), global::RCToCS.CreateCDKey.Types.giftInfo.Parser, new[]{ "ItemId", "ItemNum" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskAddMailReq), global::RCToCS.AskAddMailReq.Parser, new[]{ "Msgid", "Type", "Sdk", "Title", "Content", "Gift", "Createtime", "Endtime", "Sender", "UserIdlist", "Day" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskRegist), global::RCToCS.AskRegist.Parser, new[]{ "Msgid", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskServerInfo), global::RCToCS.AskServerInfo.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskServerUserInfo), global::RCToCS.AskServerUserInfo.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskNoticeInfo), global::RCToCS.AskNoticeInfo.Parser, new[]{ "Msgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskAddNotice), global::RCToCS.AskAddNotice.Parser, new[]{ "Msgid", "Platform", "Title", "Flag", "State", "Priority", "NoticeMsg", "StarTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RCToCS.AskDeleteNotice), global::RCToCS.AskDeleteNotice.Parser, new[]{ "Msgid", "NoticeId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eMsgRC2CS_Begin")] EMsgRc2CsBegin = 33000,
    [pbr::OriginalName("eMsgRC2CS_AskRegist")] EMsgRc2CsAskRegist = 33001,
    [pbr::OriginalName("eMsgRC2CS_AskServerInfo")] EMsgRc2CsAskServerInfo = 33002,
    [pbr::OriginalName("eMsgRC2CS_AskServerUserInfo")] EMsgRc2CsAskServerUserInfo = 33003,
    [pbr::OriginalName("eMsgRC2CS_AskNoticeInfo")] EMsgRc2CsAskNoticeInfo = 33004,
    [pbr::OriginalName("eMsgRC2CS_AskAddNotice")] EMsgRc2CsAskAddNotice = 33005,
    [pbr::OriginalName("eMsgRC2CS_AskDeleteNotice")] EMsgRc2CsAskDeleteNotice = 33006,
    [pbr::OriginalName("eMsgRC2CS_AskAddOneMail")] EMsgRc2CsAskAddOneMail = 33007,
    [pbr::OriginalName("eMsgRC2CS_AskCreateCDKey")] EMsgRc2CsAskCreateCdkey = 33008,
    [pbr::OriginalName("eMsgRC2CS_AskQueryCDkey")] EMsgRc2CsAskQueryCdkey = 33009,
    [pbr::OriginalName("eMsgRC2CS_End")] EMsgRc2CsEnd = 33499,
  }

  #endregion

  #region Messages
  public sealed partial class QueryCDKey : pb::IMessage<QueryCDKey> {
    private static readonly pb::MessageParser<QueryCDKey> _parser = new pb::MessageParser<QueryCDKey>(() => new QueryCDKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCDKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDKey(QueryCDKey other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCDKey Clone() {
      return new QueryCDKey(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCDKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCDKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCDKey other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateCDKey : pb::IMessage<CreateCDKey> {
    private static readonly pb::MessageParser<CreateCDKey> _parser = new pb::MessageParser<CreateCDKey>(() => new CreateCDKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCDKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCDKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCDKey(CreateCDKey other) : this() {
      msgid_ = other.msgid_;
      title_ = other.title_;
      platform_ = other.platform_;
      endTime_ = other.endTime_;
      content_ = other.content_;
      giftType_ = other.giftType_;
      gift_ = other.gift_.Clone();
      codeLen_ = other.codeLen_;
      cdkey_ = other.cdkey_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCDKey Clone() {
      return new CreateCDKey(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private int platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gift_type" field.</summary>
    public const int GiftTypeFieldNumber = 6;
    private int giftType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftType {
      get { return giftType_; }
      set {
        giftType_ = value;
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 7;
    private static readonly pb::FieldCodec<global::RCToCS.CreateCDKey.Types.giftInfo> _repeated_gift_codec
        = pb::FieldCodec.ForMessage(58, global::RCToCS.CreateCDKey.Types.giftInfo.Parser);
    private readonly pbc::RepeatedField<global::RCToCS.CreateCDKey.Types.giftInfo> gift_ = new pbc::RepeatedField<global::RCToCS.CreateCDKey.Types.giftInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RCToCS.CreateCDKey.Types.giftInfo> Gift {
      get { return gift_; }
    }

    /// <summary>Field number for the "code_len" field.</summary>
    public const int CodeLenFieldNumber = 8;
    private int codeLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CodeLen {
      get { return codeLen_; }
      set {
        codeLen_ = value;
      }
    }

    /// <summary>Field number for the "cdkey" field.</summary>
    public const int CdkeyFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_cdkey_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> cdkey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cdkey {
      get { return cdkey_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCDKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCDKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Title != other.Title) return false;
      if (Platform != other.Platform) return false;
      if (EndTime != other.EndTime) return false;
      if (Content != other.Content) return false;
      if (GiftType != other.GiftType) return false;
      if(!gift_.Equals(other.gift_)) return false;
      if (CodeLen != other.CodeLen) return false;
      if(!cdkey_.Equals(other.cdkey_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (GiftType != 0) hash ^= GiftType.GetHashCode();
      hash ^= gift_.GetHashCode();
      if (CodeLen != 0) hash ^= CodeLen.GetHashCode();
      hash ^= cdkey_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Platform != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Platform);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(EndTime);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (GiftType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GiftType);
      }
      gift_.WriteTo(output, _repeated_gift_codec);
      if (CodeLen != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CodeLen);
      }
      cdkey_.WriteTo(output, _repeated_cdkey_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (GiftType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftType);
      }
      size += gift_.CalculateSize(_repeated_gift_codec);
      if (CodeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeLen);
      }
      size += cdkey_.CalculateSize(_repeated_cdkey_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCDKey other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.GiftType != 0) {
        GiftType = other.GiftType;
      }
      gift_.Add(other.gift_);
      if (other.CodeLen != 0) {
        CodeLen = other.CodeLen;
      }
      cdkey_.Add(other.cdkey_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 24: {
            Platform = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 48: {
            GiftType = input.ReadInt32();
            break;
          }
          case 58: {
            gift_.AddEntriesFrom(input, _repeated_gift_codec);
            break;
          }
          case 64: {
            CodeLen = input.ReadInt32();
            break;
          }
          case 74: {
            cdkey_.AddEntriesFrom(input, _repeated_cdkey_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateCDKey message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class giftInfo : pb::IMessage<giftInfo> {
        private static readonly pb::MessageParser<giftInfo> _parser = new pb::MessageParser<giftInfo>(() => new giftInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<giftInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::RCToCS.CreateCDKey.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public giftInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public giftInfo(giftInfo other) : this() {
          itemId_ = other.itemId_;
          itemNum_ = other.itemNum_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public giftInfo Clone() {
          return new giftInfo(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private int itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "item_num" field.</summary>
        public const int ItemNumFieldNumber = 2;
        private int itemNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemNum {
          get { return itemNum_; }
          set {
            itemNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as giftInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(giftInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (ItemNum != other.ItemNum) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemId != 0) hash ^= ItemId.GetHashCode();
          if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ItemId);
          }
          if (ItemNum != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ItemNum);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
          }
          if (ItemNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(giftInfo other) {
          if (other == null) {
            return;
          }
          if (other.ItemId != 0) {
            ItemId = other.ItemId;
          }
          if (other.ItemNum != 0) {
            ItemNum = other.ItemNum;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ItemId = input.ReadInt32();
                break;
              }
              case 16: {
                ItemNum = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///eMsgRC2CS_AskAddOneMail
  /// </summary>
  public sealed partial class AskAddMailReq : pb::IMessage<AskAddMailReq> {
    private static readonly pb::MessageParser<AskAddMailReq> _parser = new pb::MessageParser<AskAddMailReq>(() => new AskAddMailReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskAddMailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddMailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddMailReq(AskAddMailReq other) : this() {
      msgid_ = other.msgid_;
      type_ = other.type_;
      sdk_ = other.sdk_;
      title_ = other.title_;
      content_ = other.content_;
      gift_ = other.gift_;
      createtime_ = other.createtime_;
      endtime_ = other.endtime_;
      sender_ = other.sender_;
      userIdlist_ = other.userIdlist_.Clone();
      day_ = other.day_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddMailReq Clone() {
      return new AskAddMailReq(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sdk" field.</summary>
    public const int SdkFieldNumber = 3;
    private int sdk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sdk {
      get { return sdk_; }
      set {
        sdk_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 6;
    private string gift_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gift {
      get { return gift_; }
      set {
        gift_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createtime" field.</summary>
    public const int CreatetimeFieldNumber = 7;
    private string createtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Createtime {
      get { return createtime_; }
      set {
        createtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 8;
    private string endtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Endtime {
      get { return endtime_; }
      set {
        endtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 9;
    private string sender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userIdlist" field.</summary>
    public const int UserIdlistFieldNumber = 10;
    private static readonly pb::FieldCodec<long> _repeated_userIdlist_codec
        = pb::FieldCodec.ForInt64(82);
    private readonly pbc::RepeatedField<long> userIdlist_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserIdlist {
      get { return userIdlist_; }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 11;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskAddMailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskAddMailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Type != other.Type) return false;
      if (Sdk != other.Sdk) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Gift != other.Gift) return false;
      if (Createtime != other.Createtime) return false;
      if (Endtime != other.Endtime) return false;
      if (Sender != other.Sender) return false;
      if(!userIdlist_.Equals(other.userIdlist_)) return false;
      if (Day != other.Day) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Sdk != 0) hash ^= Sdk.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Gift.Length != 0) hash ^= Gift.GetHashCode();
      if (Createtime.Length != 0) hash ^= Createtime.GetHashCode();
      if (Endtime.Length != 0) hash ^= Endtime.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      hash ^= userIdlist_.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Sdk != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sdk);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (Gift.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Gift);
      }
      if (Createtime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Createtime);
      }
      if (Endtime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Endtime);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Sender);
      }
      userIdlist_.WriteTo(output, _repeated_userIdlist_codec);
      if (Day != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Day);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Sdk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sdk);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Gift.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gift);
      }
      if (Createtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Createtime);
      }
      if (Endtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Endtime);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      size += userIdlist_.CalculateSize(_repeated_userIdlist_codec);
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskAddMailReq other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Sdk != 0) {
        Sdk = other.Sdk;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Gift.Length != 0) {
        Gift = other.Gift;
      }
      if (other.Createtime.Length != 0) {
        Createtime = other.Createtime;
      }
      if (other.Endtime.Length != 0) {
        Endtime = other.Endtime;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      userIdlist_.Add(other.userIdlist_);
      if (other.Day != 0) {
        Day = other.Day;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Sdk = input.ReadInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            Gift = input.ReadString();
            break;
          }
          case 58: {
            Createtime = input.ReadString();
            break;
          }
          case 66: {
            Endtime = input.ReadString();
            break;
          }
          case 74: {
            Sender = input.ReadString();
            break;
          }
          case 82:
          case 80: {
            userIdlist_.AddEntriesFrom(input, _repeated_userIdlist_codec);
            break;
          }
          case 88: {
            Day = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRegist : pb::IMessage<AskRegist> {
    private static readonly pb::MessageParser<AskRegist> _parser = new pb::MessageParser<AskRegist>(() => new AskRegist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRegist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegist(AskRegist other) : this() {
      msgid_ = other.msgid_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegist Clone() {
      return new AskRegist(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRegist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRegist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRegist other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskServerInfo : pb::IMessage<AskServerInfo> {
    private static readonly pb::MessageParser<AskServerInfo> _parser = new pb::MessageParser<AskServerInfo>(() => new AskServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerInfo(AskServerInfo other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerInfo Clone() {
      return new AskServerInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskServerUserInfo : pb::IMessage<AskServerUserInfo> {
    private static readonly pb::MessageParser<AskServerUserInfo> _parser = new pb::MessageParser<AskServerUserInfo>(() => new AskServerUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskServerUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerUserInfo(AskServerUserInfo other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskServerUserInfo Clone() {
      return new AskServerUserInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskServerUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskServerUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskServerUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskNoticeInfo : pb::IMessage<AskNoticeInfo> {
    private static readonly pb::MessageParser<AskNoticeInfo> _parser = new pb::MessageParser<AskNoticeInfo>(() => new AskNoticeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskNoticeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNoticeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNoticeInfo(AskNoticeInfo other) : this() {
      msgid_ = other.msgid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNoticeInfo Clone() {
      return new AskNoticeInfo(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskNoticeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskNoticeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskNoticeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskAddNotice : pb::IMessage<AskAddNotice> {
    private static readonly pb::MessageParser<AskAddNotice> _parser = new pb::MessageParser<AskAddNotice>(() => new AskAddNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskAddNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddNotice(AskAddNotice other) : this() {
      msgid_ = other.msgid_;
      platform_ = other.platform_;
      title_ = other.title_;
      flag_ = other.flag_;
      state_ = other.state_;
      priority_ = other.priority_;
      noticeMsg_ = other.noticeMsg_;
      starTime_ = other.starTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAddNotice Clone() {
      return new AskAddNotice(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private int platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 4;
    private int flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 6;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "noticeMsg" field.</summary>
    public const int NoticeMsgFieldNumber = 7;
    private pb::ByteString noticeMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NoticeMsg {
      get { return noticeMsg_; }
      set {
        noticeMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "star_time" field.</summary>
    public const int StarTimeFieldNumber = 8;
    private ulong starTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StarTime {
      get { return starTime_; }
      set {
        starTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskAddNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskAddNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (Platform != other.Platform) return false;
      if (Title != other.Title) return false;
      if (Flag != other.Flag) return false;
      if (State != other.State) return false;
      if (Priority != other.Priority) return false;
      if (NoticeMsg != other.NoticeMsg) return false;
      if (StarTime != other.StarTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (NoticeMsg.Length != 0) hash ^= NoticeMsg.GetHashCode();
      if (StarTime != 0UL) hash ^= StarTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Platform);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Flag != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Flag);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (Priority != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Priority);
      }
      if (NoticeMsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(NoticeMsg);
      }
      if (StarTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(StarTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (NoticeMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NoticeMsg);
      }
      if (StarTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StarTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskAddNotice other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.NoticeMsg.Length != 0) {
        NoticeMsg = other.NoticeMsg;
      }
      if (other.StarTime != 0UL) {
        StarTime = other.StarTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Platform = input.ReadInt32();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 32: {
            Flag = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            Priority = input.ReadInt32();
            break;
          }
          case 58: {
            NoticeMsg = input.ReadBytes();
            break;
          }
          case 64: {
            StarTime = input.ReadUInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskDeleteNotice : pb::IMessage<AskDeleteNotice> {
    private static readonly pb::MessageParser<AskDeleteNotice> _parser = new pb::MessageParser<AskDeleteNotice>(() => new AskDeleteNotice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskDeleteNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RCToCS.RCToCSReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskDeleteNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskDeleteNotice(AskDeleteNotice other) : this() {
      msgid_ = other.msgid_;
      noticeId_ = other.noticeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskDeleteNotice Clone() {
      return new AskDeleteNotice(this);
    }

    /// <summary>Field number for the "msgid" field.</summary>
    public const int MsgidFieldNumber = 1;
    private global::RCToCS.MsgID msgid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RCToCS.MsgID Msgid {
      get { return msgid_; }
      set {
        msgid_ = value;
      }
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 2;
    private int noticeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskDeleteNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskDeleteNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgid != other.Msgid) return false;
      if (NoticeId != other.NoticeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgid != 0) hash ^= Msgid.GetHashCode();
      if (NoticeId != 0) hash ^= NoticeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Msgid);
      }
      if (NoticeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NoticeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Msgid);
      }
      if (NoticeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoticeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskDeleteNotice other) {
      if (other == null) {
        return;
      }
      if (other.Msgid != 0) {
        Msgid = other.Msgid;
      }
      if (other.NoticeId != 0) {
        NoticeId = other.NoticeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            msgid_ = (global::RCToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            NoticeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
