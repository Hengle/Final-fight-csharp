// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SSToCS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SSToCS {

  /// <summary>Holder for reflection information generated from SSToCS.proto</summary>
  public static partial class SSToCSReflection {

    #region Descriptor
    /// <summary>File descriptor for SSToCS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SSToCSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTU1RvQ1MucHJvdG8SBlNTVG9DUyItCg1HYW1lTG9nU3dpdGNoEhwKBW1n",
            "c2lkGAEgASgOMg0uU1NUb0NTLk1zZ0lEIlwKEVVwR3VpZGVCYXR0bGVTdGVw",
            "EhwKBW1nc2lkGAEgASgOMg0uU1NUb0NTLk1zZ0lEEgwKBGd1aWQYAiABKAMS",
            "DgoGdGFza2lkGAMgASgFEgsKA251bRgEIAEoBSJaCglCYXR0bGVMb2cSHAoF",
            "bWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQSDAoEZ3VpZBgCIAEoAxIQCghs",
            "b2dfdHlwZRgDIAEoBRIPCgdsb2dfc3RyGAQgASgJIjUKB0Fza1BpbmcSHAoF",
            "bWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQSDAoEdGltZRgCIAEoAyJUChBS",
            "ZXBvcnRHb3RTb21lTXNnEhwKBW1nc2lkGAEgASgOMg0uU1NUb0NTLk1zZ0lE",
            "EhAKCGdvdG1zZ2lkGAIgASgFEhAKCG90aGVydmFsGAMgASgEIlgKFlJlcG9y",
            "dEJhdHRsZVNob3dSZXN1bHQSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNn",
            "SUQSEAoIYmF0dGxlaWQYAiABKAQSDgoGcmVzdWx0GAMgASgFIlQKFUFza0No",
            "YW5nZUZpcnN0V2luVGltZRIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJ",
            "RBIMCgRndWlkGAIgASgEEg8KB2N1cnRpbWUYAyABKAMiQwoHQWRkR29sZBIc",
            "CgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRBIMCgRndWlkGAIgASgEEgwK",
            "BGdvbGQYAyABKAMiYwoKQXNrUmVnaXN0ZRIcCgVtZ3NpZBgBIAEoDjINLlNT",
            "VG9DUy5Nc2dJRBIMCgRzc2lkGAIgASgFEgoKAmlwGAMgASgJEgwKBHBvcnQY",
            "BCABKAUSDwoHdXNlcnB3ZBgFIAEoCSJjChRSZXBvcnRCYXR0bGVGaW5pc2hl",
            "ZBIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRBIQCghiYXR0bGVpZBgC",
            "IAEoAxIOCgZjYW1waWQYAyABKAUSCwoDcmVzGAQgASgFIqMBCgh1c2VyRGF0",
            "YRIMCgRndWlkGAEgASgEEhEKCWRlYWR0aW1lcxgCIAEoDRIRCgloZXJva2ls",
            "bHMYAyABKA0SDwoHZ2FtZWlubhgEIAEoDRIOCgZ3aW5pbm4YBSABKA0SCwoD",
            "ZXhwGAYgASgNEgwKBGdvbGQYByABKAMSFwoPZGVzdG9yeWJ1aWxkaW5nGAgg",
            "ASgFEg4KBmhlcm9pZBgJIAEoBSJSCg1Bc2tVcGRhdGVEYXRhEhwKBW1nc2lk",
            "GAEgASgOMg0uU1NUb0NTLk1zZ0lEEiMKCXVzZXJfZGF0YRgCIAMoCzIQLlNT",
            "VG9DUy51c2VyRGF0YSIrCgtVc2VyTmV0SW5mbxIMCgRnc2lkGAEgASgFEg4K",
            "BmdjbnNpZBgCIAEoBSJpChFSZXBvcnRVc2VyT2ZmbGluZRIcCgVtZ3NpZBgB",
            "IAEoDjINLlNTVG9DUy5Nc2dJRBIMCgRndWlkGAIgASgEEigKC3VzZXJuZXRp",
            "bmZvGAMgASgLMhMuU1NUb0NTLlVzZXJOZXRJbmZvIi0KDUFza0FsbENmZ0xp",
            "c3QSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQiLgoOQXNrSGVyb0Nm",
            "Z0xpc3QSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQiLgoOQXNrR29v",
            "ZHNmZ0xpc3QSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQiLQoNQXNr",
            "U2hvcGZnTGlzdBIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRCIvCg9B",
            "c2tQdWJsaWNMdWFTdHISHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQi",
            "PAoNQXNrTWFwQ2ZnTGlzdBIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJ",
            "RBINCgVtYXBpZBgCIAEoBSIuCg5Bc2tOZXdTa2lsbENmZxIcCgVtZ3NpZBgB",
            "IAEoDjINLlNTVG9DUy5Nc2dJRCI4ChhBc2tTa2lsbEVmZmVjdEFjY291bnRD",
            "ZmcSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQiOAoYQXNrU2tpbGxF",
            "ZmZlY3RMZWFkaW5nQ2ZnEhwKBW1nc2lkGAEgASgOMg0uU1NUb0NTLk1zZ0lE",
            "IjYKFkFza1NraWxsRWZmZWN0UmFuZ2VDZmcSHAoFbWdzaWQYASABKA4yDS5T",
            "U1RvQ1MuTXNnSUQiNAoUQXNrU2tpbGxFZmZlY3RCdWZDZmcSHAoFbWdzaWQY",
            "ASABKA4yDS5TU1RvQ1MuTXNnSUQiNwoXQXNrU2tpbGxFZmZlY3RTdW1tb25D",
            "ZmcSHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQiNQoVQXNrU2tpbGxF",
            "ZmZlY3RNb3ZlQ2ZnEhwKBW1nc2lkGAEgASgOMg0uU1NUb0NTLk1zZ0lEIjcK",
            "F0Fza1NraWxsRWZmZWN0U3dpdGNoQ2ZnEhwKBW1nc2lkGAEgASgOMg0uU1NU",
            "b0NTLk1zZ0lEIjQKFEFza1Bhc3NpdGl2ZVNraWxsQ2ZnEhwKBW1nc2lkGAEg",
            "ASgOMg0uU1NUb0NTLk1zZ0lEIj4KHkFza1Bhc3NpdGl2ZUVmZmVjdEJsb29k",
            "U2Vla0NmZxIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRCI8ChxBc2tQ",
            "YXNzaXRpdmVFZmZlY3RSZWJvdW5kQ2ZnEhwKBW1nc2lkGAEgASgOMg0uU1NU",
            "b0NTLk1zZ0lEIjsKG0Fza1Bhc3NpdGl2ZUVmZmVjdFJlbGl2ZUNmZxIcCgVt",
            "Z3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRCJfChJBc2tVcGRhdGVHdWlkZVN0",
            "ZXASHAoFbWdzaWQYASABKA4yDS5TU1RvQ1MuTXNnSUQSDAoEZ3VpZBgCIAEo",
            "BBINCgVzdGF0ZRgDIAEoBRIOCgZzdGVwaWQYBCABKAUiSQoNQXNrVXNlckdv",
            "SGFsbBIcCgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRBIMCgRndWlkGAIg",
            "ASgEEgwKBHR5cGUYAyABKAUiWgoRU3luY0FsbEJhdHRsZUluZm8SHAoFbWdz",
            "aWQYASABKA4yDS5TU1RvQ1MuTXNnSUQSEgoKcGxheWJhdHRsZRgCIAMoBBIT",
            "CgttYXhiYXR0bGVpZBgDIAEoBCJTChRDcmVhdGVCYXR0bGVSZXNwb25zZRIc",
            "CgVtZ3NpZBgBIAEoDjINLlNTVG9DUy5Nc2dJRBIQCghiYXR0bGVpZBgCIAEo",
            "AxILCgNyc3QYAyABKAgizQMKDEZpbmlzaEJhdHRsZRIcCgVtZ3NpZBgBIAEo",
            "DjINLlNTVG9DUy5Nc2dJRBIQCghiYXR0bGVpZBgCIAEoAxIQCgh3aW5HcnBJ",
            "RBgDIAEoBRI/ChJiYXR0ZWxVc2VyRGF0YUxpc3QYBCADKAsyIy5TU1RvQ1Mu",
            "RmluaXNoQmF0dGxlLkJhdHRsZVVzZXJEYXRhGrkCCg5CYXR0bGVVc2VyRGF0",
            "YRIMCgRndWlkGAEgASgEEhAKCGhlcm9ndWlkGAIgASgEEhQKDHRpbWVpbnNl",
            "Y29uZBgDIAEoDRINCgVpZkVuZBgEIAEoCBIOCgZoZXJvaWQYBSABKAUSEAoI",
            "cnVuZXBhZ2UYBiABKAUSEQoJZGVhZHRpbWVzGAcgASgNEhEKCWhlcm9raWxs",
            "cxgIIAEoDRIXCg9kZXN0b3J5YnVpbGRpbmcYCSABKAUSEwoLZGlhbW9uZHVz",
            "ZWQYCiABKAMSEAoIZ29sZHVzZWQYCyABKAMSEgoKbGFzdGhpdG51bRgMIAEo",
            "BRISCgphc3NraWxsbnVtGA0gASgFEg4KBmhlcm9sdhgOIAEoBRIPCgd0b3Rh",
            "bGNwGA8gASgFEhEKCWlmQWlSb2JvdBgQIAEoCCrxDAoFTXNnSUQSCgoGdW5r",
            "bm93EAASGQoUZU1zZ1RvQ1NGcm9tU1NfQmVnaW4QgEASGwoWZU1zZ1RvQ1NG",
            "cm9tU1NfQXNrUGluZxCBQBIeChllTXNnVG9DU0Zyb21TU19Bc2tSZWdpc3Rl",
            "EIJAEigKI2VNc2dUb0NTRnJvbVNTX1JlcG9ydEJhdHRsZUZpbmlzaGVkEINA",
            "EiUKIGVNc2dUb0NTRnJvbVNTX1JlcG9ydFVzZXJPZmZsaW5lEIRAEiIKHWVN",
            "c2dUb0NTRnJvbVNTX0Fza0J1ZmZDZmdMaXN0EIVAEiMKHmVNc2dUb0NTRnJv",
            "bVNTX0Fza1NraWxsQ2ZnTGlzdBCGQBIhChxlTXNnVG9DU0Zyb21TU19Bc2tB",
            "bGxDZmdMaXN0EIdAEiIKHWVNc2dUb0NTRnJvbVNTX0Fza0hlcm9DZmdMaXN0",
            "EIhAEiEKHGVNc2dUb0NTRnJvbVNTX0Fza1Nob3BmZ0xpc3QQiUASIgodZU1z",
            "Z1RvQ1NGcm9tU1NfQXNrR29vZHNmZ0xpc3QQikASIwoeZU1zZ1RvQ1NGcm9t",
            "U1NfQXNrUHVibGljTHVhU3RyEItAEiEKHGVNc2dUb0NTRnJvbVNTX0Fza01h",
            "cENmZ0xpc3QQjEASIQocZU1zZ1RvQ1NGcm9tU1NfQXNrTWFwQ2ZnRGF0YRCN",
            "QBIhChxlTXNnVG9DU0Zyb21TU19Bc2tVcGRhdGVEYXRhEI5AEh4KGWVNc2dU",
            "b0NTRnJvbVNTX0Fza0FkZEdvbGQQj0ASKQokZU1zZ1RvQ1NGcm9tU1NfQXNr",
            "Q2hhbmdlRmlyc3RXaW5UaW1lEJJAEiIKHWVNc2dUb0NTRnJvbVNTX0Fza05l",
            "d1NraWxsQ2ZnEJNAEiUKIGVNc2dUb0NTRnJvbVNTX0Fza1NraWxsTW9kZWxU",
            "eXBlEJRAEiwKJ2VNc2dUb0NTRnJvbVNTX0Fza1NraWxsRWZmZWN0QWNjb3Vu",
            "dENmZxCVQBIpCiRlTXNnVG9DU0Zyb21TU19Bc2tTa2lsbEVmZmVjdEVtaXRD",
            "ZmcQlkASKgolZU1zZ1RvQ1NGcm9tU1NfQXNrU2tpbGxFZmZlY3RSYW5nZUNm",
            "ZxCXQBIsCidlTXNnVG9DU0Zyb21TU19Bc2tTa2lsbEVmZmVjdExlYWRpbmdD",
            "ZmcQmEASKAojZU1zZ1RvQ1NGcm9tU1NfQXNrU2tpbGxFZmZlY3RCdWZDZmcQ",
            "mUASKwomZU1zZ1RvQ1NGcm9tU1NfQXNrU2tpbGxFZmZlY3RTdW1tb25DZmcQ",
            "mkASKQokZU1zZ1RvQ1NGcm9tU1NfQXNrU2tpbGxFZmZlY3RNb3ZlQ2ZnEJtA",
            "EisKJmVNc2dUb0NTRnJvbVNTX0Fza1NraWxsRWZmZWN0U3dpdGNoQ2ZnEJxA",
            "EigKI2VNc2dUb0NTRnJvbVNTX0Fza1Bhc3NpdGl2ZVNraWxsQ2ZnEJ1AEjIK",
            "LWVNc2dUb0NTRnJvbVNTX0Fza1Bhc3NpdGl2ZUVmZmVjdEJsb29kU2Vla0Nm",
            "ZxCeQBIwCitlTXNnVG9DU0Zyb21TU19Bc2tQYXNzaXRpdmVFZmZlY3RSZWJv",
            "dW5kQ2ZnEJ9AEi8KKmVNc2dUb0NTRnJvbVNTX0Fza1Bhc3NpdGl2ZUVmZmVj",
            "dFJlbGl2ZUNmZxCgQBImCiFlTXNnVG9DU0Zyb21TU19Bc2tVcGRhdGVHdWlk",
            "ZVN0ZXAQoUASIQocZU1zZ1RvQ1NGcm9tU1NfQXNrVXNlckdvSGFsbBCiQBIq",
            "CiVlTXNnVG9DU0Zyb21TU19SZXBvcnRCYXR0bGVTaG93UmVzdWx0EKNAEiQK",
            "H2VNc2dUb0NTRnJvbVNTX1JlcG9ydEdvdFNvbWVNc2cQpEASIQocZU1zZ1Rv",
            "Q1NGcm9tU1NfQWxsQmF0dGxlSW5mbxClQBIdChhlTXNnVG9DU0Zyb21TU19C",
            "YXR0bGVMb2cQpkASKQokZU1zZ1RvQ1NGcm9tU1NfVXBkYXRlR3VpZGVCYXR0",
            "bGVTdGVwEKdAEiYKIWVNc2dUb0NTRnJvbVNTX0Fza1NTR2FtZUxvZ1N3aXRj",
            "aBCoQBIoCiNlTXNnVG9DU0Zyb21TU19DcmVhdGVCYXR0bGVSZXNwb25zZRDs",
            "QBIgChtlTXNnVG9DU0Zyb21TU19GaW5pc2hCYXR0bGUQ9kASFwoSZU1zZ1Rv",
            "Q1NGcm9tU1NfRW5kELRCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SSToCS.MsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.GameLogSwitch), global::SSToCS.GameLogSwitch.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.UpGuideBattleStep), global::SSToCS.UpGuideBattleStep.Parser, new[]{ "Mgsid", "Guid", "Taskid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.BattleLog), global::SSToCS.BattleLog.Parser, new[]{ "Mgsid", "Guid", "LogType", "LogStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPing), global::SSToCS.AskPing.Parser, new[]{ "Mgsid", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.ReportGotSomeMsg), global::SSToCS.ReportGotSomeMsg.Parser, new[]{ "Mgsid", "Gotmsgid", "Otherval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.ReportBattleShowResult), global::SSToCS.ReportBattleShowResult.Parser, new[]{ "Mgsid", "Battleid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskChangeFirstWinTime), global::SSToCS.AskChangeFirstWinTime.Parser, new[]{ "Mgsid", "Guid", "Curtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AddGold), global::SSToCS.AddGold.Parser, new[]{ "Mgsid", "Guid", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskRegiste), global::SSToCS.AskRegiste.Parser, new[]{ "Mgsid", "Ssid", "Ip", "Port", "Userpwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.ReportBattleFinished), global::SSToCS.ReportBattleFinished.Parser, new[]{ "Mgsid", "Battleid", "Campid", "Res" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.userData), global::SSToCS.userData.Parser, new[]{ "Guid", "Deadtimes", "Herokills", "Gameinn", "Wininn", "Exp", "Gold", "Destorybuilding", "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskUpdateData), global::SSToCS.AskUpdateData.Parser, new[]{ "Mgsid", "UserData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.UserNetInfo), global::SSToCS.UserNetInfo.Parser, new[]{ "Gsid", "Gcnsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.ReportUserOffline), global::SSToCS.ReportUserOffline.Parser, new[]{ "Mgsid", "Guid", "Usernetinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskAllCfgList), global::SSToCS.AskAllCfgList.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskHeroCfgList), global::SSToCS.AskHeroCfgList.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskGoodsfgList), global::SSToCS.AskGoodsfgList.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskShopfgList), global::SSToCS.AskShopfgList.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPublicLuaStr), global::SSToCS.AskPublicLuaStr.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskMapCfgList), global::SSToCS.AskMapCfgList.Parser, new[]{ "Mgsid", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskNewSkillCfg), global::SSToCS.AskNewSkillCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectAccountCfg), global::SSToCS.AskSkillEffectAccountCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectLeadingCfg), global::SSToCS.AskSkillEffectLeadingCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectRangeCfg), global::SSToCS.AskSkillEffectRangeCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectBufCfg), global::SSToCS.AskSkillEffectBufCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectSummonCfg), global::SSToCS.AskSkillEffectSummonCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectMoveCfg), global::SSToCS.AskSkillEffectMoveCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskSkillEffectSwitchCfg), global::SSToCS.AskSkillEffectSwitchCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPassitiveSkillCfg), global::SSToCS.AskPassitiveSkillCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPassitiveEffectBloodSeekCfg), global::SSToCS.AskPassitiveEffectBloodSeekCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPassitiveEffectReboundCfg), global::SSToCS.AskPassitiveEffectReboundCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskPassitiveEffectReliveCfg), global::SSToCS.AskPassitiveEffectReliveCfg.Parser, new[]{ "Mgsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskUpdateGuideStep), global::SSToCS.AskUpdateGuideStep.Parser, new[]{ "Mgsid", "Guid", "State", "Stepid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.AskUserGoHall), global::SSToCS.AskUserGoHall.Parser, new[]{ "Mgsid", "Guid", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.SyncAllBattleInfo), global::SSToCS.SyncAllBattleInfo.Parser, new[]{ "Mgsid", "Playbattle", "Maxbattleid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.CreateBattleResponse), global::SSToCS.CreateBattleResponse.Parser, new[]{ "Mgsid", "Battleid", "Rst" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.FinishBattle), global::SSToCS.FinishBattle.Parser, new[]{ "Mgsid", "Battleid", "WinGrpID", "BattelUserDataList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SSToCS.FinishBattle.Types.BattleUserData), global::SSToCS.FinishBattle.Types.BattleUserData.Parser, new[]{ "Guid", "Heroguid", "Timeinsecond", "IfEnd", "Heroid", "Runepage", "Deadtimes", "Herokills", "Destorybuilding", "Diamondused", "Goldused", "Lasthitnum", "Asskillnum", "Herolv", "Totalcp", "IfAiRobot" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("unknow")] Unknow = 0,
    [pbr::OriginalName("eMsgToCSFromSS_Begin")] EMsgToCsfromSsBegin = 8192,
    [pbr::OriginalName("eMsgToCSFromSS_AskPing")] EMsgToCsfromSsAskPing = 8193,
    [pbr::OriginalName("eMsgToCSFromSS_AskRegiste")] EMsgToCsfromSsAskRegiste = 8194,
    [pbr::OriginalName("eMsgToCSFromSS_ReportBattleFinished")] EMsgToCsfromSsReportBattleFinished = 8195,
    [pbr::OriginalName("eMsgToCSFromSS_ReportUserOffline")] EMsgToCsfromSsReportUserOffline = 8196,
    [pbr::OriginalName("eMsgToCSFromSS_AskBuffCfgList")] EMsgToCsfromSsAskBuffCfgList = 8197,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillCfgList")] EMsgToCsfromSsAskSkillCfgList = 8198,
    [pbr::OriginalName("eMsgToCSFromSS_AskAllCfgList")] EMsgToCsfromSsAskAllCfgList = 8199,
    [pbr::OriginalName("eMsgToCSFromSS_AskHeroCfgList")] EMsgToCsfromSsAskHeroCfgList = 8200,
    [pbr::OriginalName("eMsgToCSFromSS_AskShopfgList")] EMsgToCsfromSsAskShopfgList = 8201,
    [pbr::OriginalName("eMsgToCSFromSS_AskGoodsfgList")] EMsgToCsfromSsAskGoodsfgList = 8202,
    [pbr::OriginalName("eMsgToCSFromSS_AskPublicLuaStr")] EMsgToCsfromSsAskPublicLuaStr = 8203,
    [pbr::OriginalName("eMsgToCSFromSS_AskMapCfgList")] EMsgToCsfromSsAskMapCfgList = 8204,
    [pbr::OriginalName("eMsgToCSFromSS_AskMapCfgData")] EMsgToCsfromSsAskMapCfgData = 8205,
    [pbr::OriginalName("eMsgToCSFromSS_AskUpdateData")] EMsgToCsfromSsAskUpdateData = 8206,
    [pbr::OriginalName("eMsgToCSFromSS_AskAddGold")] EMsgToCsfromSsAskAddGold = 8207,
    [pbr::OriginalName("eMsgToCSFromSS_AskChangeFirstWinTime")] EMsgToCsfromSsAskChangeFirstWinTime = 8210,
    [pbr::OriginalName("eMsgToCSFromSS_AskNewSkillCfg")] EMsgToCsfromSsAskNewSkillCfg = 8211,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillModelType")] EMsgToCsfromSsAskSkillModelType = 8212,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectAccountCfg")] EMsgToCsfromSsAskSkillEffectAccountCfg = 8213,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectEmitCfg")] EMsgToCsfromSsAskSkillEffectEmitCfg = 8214,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectRangeCfg")] EMsgToCsfromSsAskSkillEffectRangeCfg = 8215,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectLeadingCfg")] EMsgToCsfromSsAskSkillEffectLeadingCfg = 8216,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectBufCfg")] EMsgToCsfromSsAskSkillEffectBufCfg = 8217,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectSummonCfg")] EMsgToCsfromSsAskSkillEffectSummonCfg = 8218,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectMoveCfg")] EMsgToCsfromSsAskSkillEffectMoveCfg = 8219,
    [pbr::OriginalName("eMsgToCSFromSS_AskSkillEffectSwitchCfg")] EMsgToCsfromSsAskSkillEffectSwitchCfg = 8220,
    [pbr::OriginalName("eMsgToCSFromSS_AskPassitiveSkillCfg")] EMsgToCsfromSsAskPassitiveSkillCfg = 8221,
    [pbr::OriginalName("eMsgToCSFromSS_AskPassitiveEffectBloodSeekCfg")] EMsgToCsfromSsAskPassitiveEffectBloodSeekCfg = 8222,
    [pbr::OriginalName("eMsgToCSFromSS_AskPassitiveEffectReboundCfg")] EMsgToCsfromSsAskPassitiveEffectReboundCfg = 8223,
    [pbr::OriginalName("eMsgToCSFromSS_AskPassitiveEffectReliveCfg")] EMsgToCsfromSsAskPassitiveEffectReliveCfg = 8224,
    [pbr::OriginalName("eMsgToCSFromSS_AskUpdateGuideStep")] EMsgToCsfromSsAskUpdateGuideStep = 8225,
    [pbr::OriginalName("eMsgToCSFromSS_AskUserGoHall")] EMsgToCsfromSsAskUserGoHall = 8226,
    [pbr::OriginalName("eMsgToCSFromSS_ReportBattleShowResult")] EMsgToCsfromSsReportBattleShowResult = 8227,
    [pbr::OriginalName("eMsgToCSFromSS_ReportGotSomeMsg")] EMsgToCsfromSsReportGotSomeMsg = 8228,
    [pbr::OriginalName("eMsgToCSFromSS_AllBattleInfo")] EMsgToCsfromSsAllBattleInfo = 8229,
    [pbr::OriginalName("eMsgToCSFromSS_BattleLog")] EMsgToCsfromSsBattleLog = 8230,
    [pbr::OriginalName("eMsgToCSFromSS_UpdateGuideBattleStep")] EMsgToCsfromSsUpdateGuideBattleStep = 8231,
    [pbr::OriginalName("eMsgToCSFromSS_AskSSGameLogSwitch")] EMsgToCsfromSsAskSsgameLogSwitch = 8232,
    [pbr::OriginalName("eMsgToCSFromSS_CreateBattleResponse")] EMsgToCsfromSsCreateBattleResponse = 8300,
    [pbr::OriginalName("eMsgToCSFromSS_FinishBattle")] EMsgToCsfromSsFinishBattle = 8310,
    [pbr::OriginalName("eMsgToCSFromSS_End")] EMsgToCsfromSsEnd = 8500,
  }

  #endregion

  #region Messages
  /// <summary>
  ///eMsgToCSFromSS_AskSSGameLogSwitch
  /// </summary>
  public sealed partial class GameLogSwitch : pb::IMessage<GameLogSwitch> {
    private static readonly pb::MessageParser<GameLogSwitch> _parser = new pb::MessageParser<GameLogSwitch>(() => new GameLogSwitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogSwitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogSwitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogSwitch(GameLogSwitch other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogSwitch Clone() {
      return new GameLogSwitch(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogSwitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogSwitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogSwitch other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToCSFromSS_UpdateGuideBattleStep
  /// </summary>
  public sealed partial class UpGuideBattleStep : pb::IMessage<UpGuideBattleStep> {
    private static readonly pb::MessageParser<UpGuideBattleStep> _parser = new pb::MessageParser<UpGuideBattleStep>(() => new UpGuideBattleStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpGuideBattleStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpGuideBattleStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpGuideBattleStep(UpGuideBattleStep other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      taskid_ = other.taskid_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpGuideBattleStep Clone() {
      return new UpGuideBattleStep(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 3;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 4;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpGuideBattleStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpGuideBattleStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Taskid != other.Taskid) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (Taskid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Taskid);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpGuideBattleStep other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            Taskid = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///eMsgToCSFromSS_BattleLog
  /// </summary>
  public sealed partial class BattleLog : pb::IMessage<BattleLog> {
    private static readonly pb::MessageParser<BattleLog> _parser = new pb::MessageParser<BattleLog>(() => new BattleLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLog(BattleLog other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      logType_ = other.logType_;
      logStr_ = other.logStr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLog Clone() {
      return new BattleLog(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private long guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "log_type" field.</summary>
    public const int LogTypeFieldNumber = 3;
    private int logType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "log_str" field.</summary>
    public const int LogStrFieldNumber = 4;
    private string logStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogStr {
      get { return logStr_; }
      set {
        logStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (LogType != other.LogType) return false;
      if (LogStr != other.LogStr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0L) hash ^= Guid.GetHashCode();
      if (LogType != 0) hash ^= LogType.GetHashCode();
      if (LogStr.Length != 0) hash ^= LogStr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Guid);
      }
      if (LogType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LogType);
      }
      if (LogStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LogStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Guid);
      }
      if (LogType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogType);
      }
      if (LogStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleLog other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0L) {
        Guid = other.Guid;
      }
      if (other.LogType != 0) {
        LogType = other.LogType;
      }
      if (other.LogStr.Length != 0) {
        LogStr = other.LogStr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadInt64();
            break;
          }
          case 24: {
            LogType = input.ReadInt32();
            break;
          }
          case 34: {
            LogStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPing : pb::IMessage<AskPing> {
    private static readonly pb::MessageParser<AskPing> _parser = new pb::MessageParser<AskPing>(() => new AskPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing(AskPing other) : this() {
      mgsid_ = other.mgsid_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPing Clone() {
      return new AskPing(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPing other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportGotSomeMsg : pb::IMessage<ReportGotSomeMsg> {
    private static readonly pb::MessageParser<ReportGotSomeMsg> _parser = new pb::MessageParser<ReportGotSomeMsg>(() => new ReportGotSomeMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportGotSomeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportGotSomeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportGotSomeMsg(ReportGotSomeMsg other) : this() {
      mgsid_ = other.mgsid_;
      gotmsgid_ = other.gotmsgid_;
      otherval_ = other.otherval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportGotSomeMsg Clone() {
      return new ReportGotSomeMsg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "gotmsgid" field.</summary>
    public const int GotmsgidFieldNumber = 2;
    private int gotmsgid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gotmsgid {
      get { return gotmsgid_; }
      set {
        gotmsgid_ = value;
      }
    }

    /// <summary>Field number for the "otherval" field.</summary>
    public const int OthervalFieldNumber = 3;
    private ulong otherval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Otherval {
      get { return otherval_; }
      set {
        otherval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportGotSomeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportGotSomeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Gotmsgid != other.Gotmsgid) return false;
      if (Otherval != other.Otherval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Gotmsgid != 0) hash ^= Gotmsgid.GetHashCode();
      if (Otherval != 0UL) hash ^= Otherval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Gotmsgid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gotmsgid);
      }
      if (Otherval != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Otherval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Gotmsgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gotmsgid);
      }
      if (Otherval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Otherval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportGotSomeMsg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Gotmsgid != 0) {
        Gotmsgid = other.Gotmsgid;
      }
      if (other.Otherval != 0UL) {
        Otherval = other.Otherval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Gotmsgid = input.ReadInt32();
            break;
          }
          case 24: {
            Otherval = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportBattleShowResult : pb::IMessage<ReportBattleShowResult> {
    private static readonly pb::MessageParser<ReportBattleShowResult> _parser = new pb::MessageParser<ReportBattleShowResult>(() => new ReportBattleShowResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportBattleShowResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleShowResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleShowResult(ReportBattleShowResult other) : this() {
      mgsid_ = other.mgsid_;
      battleid_ = other.battleid_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleShowResult Clone() {
      return new ReportBattleShowResult(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private ulong battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportBattleShowResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportBattleShowResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Battleid != other.Battleid) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Battleid != 0UL) hash ^= Battleid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Battleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Battleid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Battleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Battleid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportBattleShowResult other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Battleid != 0UL) {
        Battleid = other.Battleid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskChangeFirstWinTime : pb::IMessage<AskChangeFirstWinTime> {
    private static readonly pb::MessageParser<AskChangeFirstWinTime> _parser = new pb::MessageParser<AskChangeFirstWinTime>(() => new AskChangeFirstWinTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskChangeFirstWinTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskChangeFirstWinTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskChangeFirstWinTime(AskChangeFirstWinTime other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      curtime_ = other.curtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskChangeFirstWinTime Clone() {
      return new AskChangeFirstWinTime(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 3;
    private long curtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskChangeFirstWinTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskChangeFirstWinTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Curtime != other.Curtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Curtime != 0L) hash ^= Curtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Curtime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Curtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Curtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Curtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskChangeFirstWinTime other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Curtime != 0L) {
        Curtime = other.Curtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Curtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddGold : pb::IMessage<AddGold> {
    private static readonly pb::MessageParser<AddGold> _parser = new pb::MessageParser<AddGold>(() => new AddGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGold(AddGold other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGold Clone() {
      return new AddGold(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Gold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddGold other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskRegiste : pb::IMessage<AskRegiste> {
    private static readonly pb::MessageParser<AskRegiste> _parser = new pb::MessageParser<AskRegiste>(() => new AskRegiste());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskRegiste> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegiste() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegiste(AskRegiste other) : this() {
      mgsid_ = other.mgsid_;
      ssid_ = other.ssid_;
      ip_ = other.ip_;
      port_ = other.port_;
      userpwd_ = other.userpwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskRegiste Clone() {
      return new AskRegiste(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 2;
    private int ssid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ssid {
      get { return ssid_; }
      set {
        ssid_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "userpwd" field.</summary>
    public const int UserpwdFieldNumber = 5;
    private string userpwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userpwd {
      get { return userpwd_; }
      set {
        userpwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskRegiste);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskRegiste other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Ssid != other.Ssid) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Userpwd != other.Userpwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Ssid != 0) hash ^= Ssid.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Userpwd.Length != 0) hash ^= Userpwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Ssid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ssid);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (Userpwd.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Userpwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Ssid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssid);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Userpwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userpwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskRegiste other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Ssid != 0) {
        Ssid = other.Ssid;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Userpwd.Length != 0) {
        Userpwd = other.Userpwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Ssid = input.ReadInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 42: {
            Userpwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportBattleFinished : pb::IMessage<ReportBattleFinished> {
    private static readonly pb::MessageParser<ReportBattleFinished> _parser = new pb::MessageParser<ReportBattleFinished>(() => new ReportBattleFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportBattleFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleFinished(ReportBattleFinished other) : this() {
      mgsid_ = other.mgsid_;
      battleid_ = other.battleid_;
      campid_ = other.campid_;
      res_ = other.res_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportBattleFinished Clone() {
      return new ReportBattleFinished(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private long battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "campid" field.</summary>
    public const int CampidFieldNumber = 3;
    private int campid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Campid {
      get { return campid_; }
      set {
        campid_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 4;
    private int res_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportBattleFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportBattleFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Battleid != other.Battleid) return false;
      if (Campid != other.Campid) return false;
      if (Res != other.Res) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Battleid != 0L) hash ^= Battleid.GetHashCode();
      if (Campid != 0) hash ^= Campid.GetHashCode();
      if (Res != 0) hash ^= Res.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Battleid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Battleid);
      }
      if (Campid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Campid);
      }
      if (Res != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Res);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Battleid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Battleid);
      }
      if (Campid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Campid);
      }
      if (Res != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportBattleFinished other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Battleid != 0L) {
        Battleid = other.Battleid;
      }
      if (other.Campid != 0) {
        Campid = other.Campid;
      }
      if (other.Res != 0) {
        Res = other.Res;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadInt64();
            break;
          }
          case 24: {
            Campid = input.ReadInt32();
            break;
          }
          case 32: {
            Res = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class userData : pb::IMessage<userData> {
    private static readonly pb::MessageParser<userData> _parser = new pb::MessageParser<userData>(() => new userData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<userData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public userData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public userData(userData other) : this() {
      guid_ = other.guid_;
      deadtimes_ = other.deadtimes_;
      herokills_ = other.herokills_;
      gameinn_ = other.gameinn_;
      wininn_ = other.wininn_;
      exp_ = other.exp_;
      gold_ = other.gold_;
      destorybuilding_ = other.destorybuilding_;
      heroid_ = other.heroid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public userData Clone() {
      return new userData(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "deadtimes" field.</summary>
    public const int DeadtimesFieldNumber = 2;
    private uint deadtimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deadtimes {
      get { return deadtimes_; }
      set {
        deadtimes_ = value;
      }
    }

    /// <summary>Field number for the "herokills" field.</summary>
    public const int HerokillsFieldNumber = 3;
    private uint herokills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Herokills {
      get { return herokills_; }
      set {
        herokills_ = value;
      }
    }

    /// <summary>Field number for the "gameinn" field.</summary>
    public const int GameinnFieldNumber = 4;
    private uint gameinn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gameinn {
      get { return gameinn_; }
      set {
        gameinn_ = value;
      }
    }

    /// <summary>Field number for the "wininn" field.</summary>
    public const int WininnFieldNumber = 5;
    private uint wininn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wininn {
      get { return wininn_; }
      set {
        wininn_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 7;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "destorybuilding" field.</summary>
    public const int DestorybuildingFieldNumber = 8;
    private int destorybuilding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Destorybuilding {
      get { return destorybuilding_; }
      set {
        destorybuilding_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 9;
    private int heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as userData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(userData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Deadtimes != other.Deadtimes) return false;
      if (Herokills != other.Herokills) return false;
      if (Gameinn != other.Gameinn) return false;
      if (Wininn != other.Wininn) return false;
      if (Exp != other.Exp) return false;
      if (Gold != other.Gold) return false;
      if (Destorybuilding != other.Destorybuilding) return false;
      if (Heroid != other.Heroid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
      if (Herokills != 0) hash ^= Herokills.GetHashCode();
      if (Gameinn != 0) hash ^= Gameinn.GetHashCode();
      if (Wininn != 0) hash ^= Wininn.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Destorybuilding != 0) hash ^= Destorybuilding.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Deadtimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Deadtimes);
      }
      if (Herokills != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Herokills);
      }
      if (Gameinn != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gameinn);
      }
      if (Wininn != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Wininn);
      }
      if (Exp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Exp);
      }
      if (Gold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Gold);
      }
      if (Destorybuilding != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Destorybuilding);
      }
      if (Heroid != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Heroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Deadtimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deadtimes);
      }
      if (Herokills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Herokills);
      }
      if (Gameinn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gameinn);
      }
      if (Wininn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wininn);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Destorybuilding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Destorybuilding);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(userData other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Deadtimes != 0) {
        Deadtimes = other.Deadtimes;
      }
      if (other.Herokills != 0) {
        Herokills = other.Herokills;
      }
      if (other.Gameinn != 0) {
        Gameinn = other.Gameinn;
      }
      if (other.Wininn != 0) {
        Wininn = other.Wininn;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Destorybuilding != 0) {
        Destorybuilding = other.Destorybuilding;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Deadtimes = input.ReadUInt32();
            break;
          }
          case 24: {
            Herokills = input.ReadUInt32();
            break;
          }
          case 32: {
            Gameinn = input.ReadUInt32();
            break;
          }
          case 40: {
            Wininn = input.ReadUInt32();
            break;
          }
          case 48: {
            Exp = input.ReadUInt32();
            break;
          }
          case 56: {
            Gold = input.ReadInt64();
            break;
          }
          case 64: {
            Destorybuilding = input.ReadInt32();
            break;
          }
          case 72: {
            Heroid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskUpdateData : pb::IMessage<AskUpdateData> {
    private static readonly pb::MessageParser<AskUpdateData> _parser = new pb::MessageParser<AskUpdateData>(() => new AskUpdateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskUpdateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateData(AskUpdateData other) : this() {
      mgsid_ = other.mgsid_;
      userData_ = other.userData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateData Clone() {
      return new AskUpdateData(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SSToCS.userData> _repeated_userData_codec
        = pb::FieldCodec.ForMessage(18, global::SSToCS.userData.Parser);
    private readonly pbc::RepeatedField<global::SSToCS.userData> userData_ = new pbc::RepeatedField<global::SSToCS.userData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SSToCS.userData> UserData {
      get { return userData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskUpdateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskUpdateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!userData_.Equals(other.userData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= userData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      userData_.WriteTo(output, _repeated_userData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += userData_.CalculateSize(_repeated_userData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskUpdateData other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      userData_.Add(other.userData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18: {
            userData_.AddEntriesFrom(input, _repeated_userData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserNetInfo : pb::IMessage<UserNetInfo> {
    private static readonly pb::MessageParser<UserNetInfo> _parser = new pb::MessageParser<UserNetInfo>(() => new UserNetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserNetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNetInfo(UserNetInfo other) : this() {
      gsid_ = other.gsid_;
      gcnsid_ = other.gcnsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserNetInfo Clone() {
      return new UserNetInfo(this);
    }

    /// <summary>Field number for the "gsid" field.</summary>
    public const int GsidFieldNumber = 1;
    private int gsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gsid {
      get { return gsid_; }
      set {
        gsid_ = value;
      }
    }

    /// <summary>Field number for the "gcnsid" field.</summary>
    public const int GcnsidFieldNumber = 2;
    private int gcnsid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gcnsid {
      get { return gcnsid_; }
      set {
        gcnsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserNetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserNetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gsid != other.Gsid) return false;
      if (Gcnsid != other.Gcnsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gsid != 0) hash ^= Gsid.GetHashCode();
      if (Gcnsid != 0) hash ^= Gcnsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gsid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gsid);
      }
      if (Gcnsid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gcnsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gsid);
      }
      if (Gcnsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gcnsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserNetInfo other) {
      if (other == null) {
        return;
      }
      if (other.Gsid != 0) {
        Gsid = other.Gsid;
      }
      if (other.Gcnsid != 0) {
        Gcnsid = other.Gcnsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gsid = input.ReadInt32();
            break;
          }
          case 16: {
            Gcnsid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportUserOffline : pb::IMessage<ReportUserOffline> {
    private static readonly pb::MessageParser<ReportUserOffline> _parser = new pb::MessageParser<ReportUserOffline>(() => new ReportUserOffline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportUserOffline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportUserOffline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportUserOffline(ReportUserOffline other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      usernetinfo_ = other.usernetinfo_ != null ? other.usernetinfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportUserOffline Clone() {
      return new ReportUserOffline(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "usernetinfo" field.</summary>
    public const int UsernetinfoFieldNumber = 3;
    private global::SSToCS.UserNetInfo usernetinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.UserNetInfo Usernetinfo {
      get { return usernetinfo_; }
      set {
        usernetinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportUserOffline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportUserOffline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Usernetinfo, other.Usernetinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (usernetinfo_ != null) hash ^= Usernetinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (usernetinfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Usernetinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (usernetinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usernetinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportUserOffline other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.usernetinfo_ != null) {
        if (usernetinfo_ == null) {
          usernetinfo_ = new global::SSToCS.UserNetInfo();
        }
        Usernetinfo.MergeFrom(other.Usernetinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (usernetinfo_ == null) {
              usernetinfo_ = new global::SSToCS.UserNetInfo();
            }
            input.ReadMessage(usernetinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskAllCfgList : pb::IMessage<AskAllCfgList> {
    private static readonly pb::MessageParser<AskAllCfgList> _parser = new pb::MessageParser<AskAllCfgList>(() => new AskAllCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskAllCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAllCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAllCfgList(AskAllCfgList other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskAllCfgList Clone() {
      return new AskAllCfgList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskAllCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskAllCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskAllCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskHeroCfgList : pb::IMessage<AskHeroCfgList> {
    private static readonly pb::MessageParser<AskHeroCfgList> _parser = new pb::MessageParser<AskHeroCfgList>(() => new AskHeroCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskHeroCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskHeroCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskHeroCfgList(AskHeroCfgList other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskHeroCfgList Clone() {
      return new AskHeroCfgList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskHeroCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskHeroCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskHeroCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskGoodsfgList : pb::IMessage<AskGoodsfgList> {
    private static readonly pb::MessageParser<AskGoodsfgList> _parser = new pb::MessageParser<AskGoodsfgList>(() => new AskGoodsfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskGoodsfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskGoodsfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskGoodsfgList(AskGoodsfgList other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskGoodsfgList Clone() {
      return new AskGoodsfgList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskGoodsfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskGoodsfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskGoodsfgList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskShopfgList : pb::IMessage<AskShopfgList> {
    private static readonly pb::MessageParser<AskShopfgList> _parser = new pb::MessageParser<AskShopfgList>(() => new AskShopfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskShopfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskShopfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskShopfgList(AskShopfgList other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskShopfgList Clone() {
      return new AskShopfgList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskShopfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskShopfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskShopfgList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPublicLuaStr : pb::IMessage<AskPublicLuaStr> {
    private static readonly pb::MessageParser<AskPublicLuaStr> _parser = new pb::MessageParser<AskPublicLuaStr>(() => new AskPublicLuaStr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPublicLuaStr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPublicLuaStr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPublicLuaStr(AskPublicLuaStr other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPublicLuaStr Clone() {
      return new AskPublicLuaStr(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPublicLuaStr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPublicLuaStr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPublicLuaStr other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskMapCfgList : pb::IMessage<AskMapCfgList> {
    private static readonly pb::MessageParser<AskMapCfgList> _parser = new pb::MessageParser<AskMapCfgList>(() => new AskMapCfgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskMapCfgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskMapCfgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskMapCfgList(AskMapCfgList other) : this() {
      mgsid_ = other.mgsid_;
      mapid_ = other.mapid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskMapCfgList Clone() {
      return new AskMapCfgList(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 2;
    private int mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskMapCfgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskMapCfgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Mapid != other.Mapid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mapid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskMapCfgList other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Mapid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskNewSkillCfg : pb::IMessage<AskNewSkillCfg> {
    private static readonly pb::MessageParser<AskNewSkillCfg> _parser = new pb::MessageParser<AskNewSkillCfg>(() => new AskNewSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskNewSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNewSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNewSkillCfg(AskNewSkillCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskNewSkillCfg Clone() {
      return new AskNewSkillCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskNewSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskNewSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskNewSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectAccountCfg : pb::IMessage<AskSkillEffectAccountCfg> {
    private static readonly pb::MessageParser<AskSkillEffectAccountCfg> _parser = new pb::MessageParser<AskSkillEffectAccountCfg>(() => new AskSkillEffectAccountCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectAccountCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectAccountCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectAccountCfg(AskSkillEffectAccountCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectAccountCfg Clone() {
      return new AskSkillEffectAccountCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectAccountCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectAccountCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectAccountCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectLeadingCfg : pb::IMessage<AskSkillEffectLeadingCfg> {
    private static readonly pb::MessageParser<AskSkillEffectLeadingCfg> _parser = new pb::MessageParser<AskSkillEffectLeadingCfg>(() => new AskSkillEffectLeadingCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectLeadingCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectLeadingCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectLeadingCfg(AskSkillEffectLeadingCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectLeadingCfg Clone() {
      return new AskSkillEffectLeadingCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectLeadingCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectLeadingCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectLeadingCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectRangeCfg : pb::IMessage<AskSkillEffectRangeCfg> {
    private static readonly pb::MessageParser<AskSkillEffectRangeCfg> _parser = new pb::MessageParser<AskSkillEffectRangeCfg>(() => new AskSkillEffectRangeCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectRangeCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectRangeCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectRangeCfg(AskSkillEffectRangeCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectRangeCfg Clone() {
      return new AskSkillEffectRangeCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectRangeCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectRangeCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectRangeCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectBufCfg : pb::IMessage<AskSkillEffectBufCfg> {
    private static readonly pb::MessageParser<AskSkillEffectBufCfg> _parser = new pb::MessageParser<AskSkillEffectBufCfg>(() => new AskSkillEffectBufCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectBufCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectBufCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectBufCfg(AskSkillEffectBufCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectBufCfg Clone() {
      return new AskSkillEffectBufCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectBufCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectBufCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectBufCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectSummonCfg : pb::IMessage<AskSkillEffectSummonCfg> {
    private static readonly pb::MessageParser<AskSkillEffectSummonCfg> _parser = new pb::MessageParser<AskSkillEffectSummonCfg>(() => new AskSkillEffectSummonCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectSummonCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSummonCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSummonCfg(AskSkillEffectSummonCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSummonCfg Clone() {
      return new AskSkillEffectSummonCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectSummonCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectSummonCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectSummonCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class AskSkillEffectMoveCfg : pb::IMessage<AskSkillEffectMoveCfg> {
    private static readonly pb::MessageParser<AskSkillEffectMoveCfg> _parser = new pb::MessageParser<AskSkillEffectMoveCfg>(() => new AskSkillEffectMoveCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectMoveCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectMoveCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectMoveCfg(AskSkillEffectMoveCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectMoveCfg Clone() {
      return new AskSkillEffectMoveCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectMoveCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectMoveCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectMoveCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskSkillEffectSwitchCfg : pb::IMessage<AskSkillEffectSwitchCfg> {
    private static readonly pb::MessageParser<AskSkillEffectSwitchCfg> _parser = new pb::MessageParser<AskSkillEffectSwitchCfg>(() => new AskSkillEffectSwitchCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskSkillEffectSwitchCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSwitchCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSwitchCfg(AskSkillEffectSwitchCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskSkillEffectSwitchCfg Clone() {
      return new AskSkillEffectSwitchCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskSkillEffectSwitchCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskSkillEffectSwitchCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskSkillEffectSwitchCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPassitiveSkillCfg : pb::IMessage<AskPassitiveSkillCfg> {
    private static readonly pb::MessageParser<AskPassitiveSkillCfg> _parser = new pb::MessageParser<AskPassitiveSkillCfg>(() => new AskPassitiveSkillCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPassitiveSkillCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveSkillCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveSkillCfg(AskPassitiveSkillCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveSkillCfg Clone() {
      return new AskPassitiveSkillCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPassitiveSkillCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPassitiveSkillCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPassitiveSkillCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPassitiveEffectBloodSeekCfg : pb::IMessage<AskPassitiveEffectBloodSeekCfg> {
    private static readonly pb::MessageParser<AskPassitiveEffectBloodSeekCfg> _parser = new pb::MessageParser<AskPassitiveEffectBloodSeekCfg>(() => new AskPassitiveEffectBloodSeekCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPassitiveEffectBloodSeekCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectBloodSeekCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectBloodSeekCfg(AskPassitiveEffectBloodSeekCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectBloodSeekCfg Clone() {
      return new AskPassitiveEffectBloodSeekCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPassitiveEffectBloodSeekCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPassitiveEffectBloodSeekCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPassitiveEffectBloodSeekCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPassitiveEffectReboundCfg : pb::IMessage<AskPassitiveEffectReboundCfg> {
    private static readonly pb::MessageParser<AskPassitiveEffectReboundCfg> _parser = new pb::MessageParser<AskPassitiveEffectReboundCfg>(() => new AskPassitiveEffectReboundCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPassitiveEffectReboundCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReboundCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReboundCfg(AskPassitiveEffectReboundCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReboundCfg Clone() {
      return new AskPassitiveEffectReboundCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPassitiveEffectReboundCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPassitiveEffectReboundCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPassitiveEffectReboundCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskPassitiveEffectReliveCfg : pb::IMessage<AskPassitiveEffectReliveCfg> {
    private static readonly pb::MessageParser<AskPassitiveEffectReliveCfg> _parser = new pb::MessageParser<AskPassitiveEffectReliveCfg>(() => new AskPassitiveEffectReliveCfg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskPassitiveEffectReliveCfg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReliveCfg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReliveCfg(AskPassitiveEffectReliveCfg other) : this() {
      mgsid_ = other.mgsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskPassitiveEffectReliveCfg Clone() {
      return new AskPassitiveEffectReliveCfg(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskPassitiveEffectReliveCfg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskPassitiveEffectReliveCfg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskPassitiveEffectReliveCfg other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskUpdateGuideStep : pb::IMessage<AskUpdateGuideStep> {
    private static readonly pb::MessageParser<AskUpdateGuideStep> _parser = new pb::MessageParser<AskUpdateGuideStep>(() => new AskUpdateGuideStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskUpdateGuideStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateGuideStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateGuideStep(AskUpdateGuideStep other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      state_ = other.state_;
      stepid_ = other.stepid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUpdateGuideStep Clone() {
      return new AskUpdateGuideStep(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "stepid" field.</summary>
    public const int StepidFieldNumber = 4;
    private int stepid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stepid {
      get { return stepid_; }
      set {
        stepid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskUpdateGuideStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskUpdateGuideStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (State != other.State) return false;
      if (Stepid != other.Stepid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Stepid != 0) hash ^= Stepid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (Stepid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stepid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Stepid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stepid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskUpdateGuideStep other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Stepid != 0) {
        Stepid = other.Stepid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            Stepid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskUserGoHall : pb::IMessage<AskUserGoHall> {
    private static readonly pb::MessageParser<AskUserGoHall> _parser = new pb::MessageParser<AskUserGoHall>(() => new AskUserGoHall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskUserGoHall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUserGoHall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUserGoHall(AskUserGoHall other) : this() {
      mgsid_ = other.mgsid_;
      guid_ = other.guid_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskUserGoHall Clone() {
      return new AskUserGoHall(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskUserGoHall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskUserGoHall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskUserGoHall other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncAllBattleInfo : pb::IMessage<SyncAllBattleInfo> {
    private static readonly pb::MessageParser<SyncAllBattleInfo> _parser = new pb::MessageParser<SyncAllBattleInfo>(() => new SyncAllBattleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncAllBattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAllBattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAllBattleInfo(SyncAllBattleInfo other) : this() {
      mgsid_ = other.mgsid_;
      playbattle_ = other.playbattle_.Clone();
      maxbattleid_ = other.maxbattleid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAllBattleInfo Clone() {
      return new SyncAllBattleInfo(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "playbattle" field.</summary>
    public const int PlaybattleFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_playbattle_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> playbattle_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Playbattle {
      get { return playbattle_; }
    }

    /// <summary>Field number for the "maxbattleid" field.</summary>
    public const int MaxbattleidFieldNumber = 3;
    private ulong maxbattleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Maxbattleid {
      get { return maxbattleid_; }
      set {
        maxbattleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncAllBattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncAllBattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if(!playbattle_.Equals(other.playbattle_)) return false;
      if (Maxbattleid != other.Maxbattleid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      hash ^= playbattle_.GetHashCode();
      if (Maxbattleid != 0UL) hash ^= Maxbattleid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      playbattle_.WriteTo(output, _repeated_playbattle_codec);
      if (Maxbattleid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Maxbattleid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      size += playbattle_.CalculateSize(_repeated_playbattle_codec);
      if (Maxbattleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Maxbattleid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncAllBattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      playbattle_.Add(other.playbattle_);
      if (other.Maxbattleid != 0UL) {
        Maxbattleid = other.Maxbattleid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            playbattle_.AddEntriesFrom(input, _repeated_playbattle_codec);
            break;
          }
          case 24: {
            Maxbattleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateBattleResponse : pb::IMessage<CreateBattleResponse> {
    private static readonly pb::MessageParser<CreateBattleResponse> _parser = new pb::MessageParser<CreateBattleResponse>(() => new CreateBattleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBattleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattleResponse(CreateBattleResponse other) : this() {
      mgsid_ = other.mgsid_;
      battleid_ = other.battleid_;
      rst_ = other.rst_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBattleResponse Clone() {
      return new CreateBattleResponse(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private long battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "rst" field.</summary>
    public const int RstFieldNumber = 3;
    private bool rst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rst {
      get { return rst_; }
      set {
        rst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBattleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBattleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Battleid != other.Battleid) return false;
      if (Rst != other.Rst) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Battleid != 0L) hash ^= Battleid.GetHashCode();
      if (Rst != false) hash ^= Rst.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Battleid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Battleid);
      }
      if (Rst != false) {
        output.WriteRawTag(24);
        output.WriteBool(Rst);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Battleid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Battleid);
      }
      if (Rst != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBattleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Battleid != 0L) {
        Battleid = other.Battleid;
      }
      if (other.Rst != false) {
        Rst = other.Rst;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadInt64();
            break;
          }
          case 24: {
            Rst = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishBattle : pb::IMessage<FinishBattle> {
    private static readonly pb::MessageParser<FinishBattle> _parser = new pb::MessageParser<FinishBattle>(() => new FinishBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SSToCS.SSToCSReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattle(FinishBattle other) : this() {
      mgsid_ = other.mgsid_;
      battleid_ = other.battleid_;
      winGrpID_ = other.winGrpID_;
      battelUserDataList_ = other.battelUserDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishBattle Clone() {
      return new FinishBattle(this);
    }

    /// <summary>Field number for the "mgsid" field.</summary>
    public const int MgsidFieldNumber = 1;
    private global::SSToCS.MsgID mgsid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SSToCS.MsgID Mgsid {
      get { return mgsid_; }
      set {
        mgsid_ = value;
      }
    }

    /// <summary>Field number for the "battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private long battleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "winGrpID" field.</summary>
    public const int WinGrpIDFieldNumber = 3;
    private int winGrpID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGrpID {
      get { return winGrpID_; }
      set {
        winGrpID_ = value;
      }
    }

    /// <summary>Field number for the "battelUserDataList" field.</summary>
    public const int BattelUserDataListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SSToCS.FinishBattle.Types.BattleUserData> _repeated_battelUserDataList_codec
        = pb::FieldCodec.ForMessage(34, global::SSToCS.FinishBattle.Types.BattleUserData.Parser);
    private readonly pbc::RepeatedField<global::SSToCS.FinishBattle.Types.BattleUserData> battelUserDataList_ = new pbc::RepeatedField<global::SSToCS.FinishBattle.Types.BattleUserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SSToCS.FinishBattle.Types.BattleUserData> BattelUserDataList {
      get { return battelUserDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mgsid != other.Mgsid) return false;
      if (Battleid != other.Battleid) return false;
      if (WinGrpID != other.WinGrpID) return false;
      if(!battelUserDataList_.Equals(other.battelUserDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mgsid != 0) hash ^= Mgsid.GetHashCode();
      if (Battleid != 0L) hash ^= Battleid.GetHashCode();
      if (WinGrpID != 0) hash ^= WinGrpID.GetHashCode();
      hash ^= battelUserDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mgsid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mgsid);
      }
      if (Battleid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Battleid);
      }
      if (WinGrpID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGrpID);
      }
      battelUserDataList_.WriteTo(output, _repeated_battelUserDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mgsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mgsid);
      }
      if (Battleid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Battleid);
      }
      if (WinGrpID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGrpID);
      }
      size += battelUserDataList_.CalculateSize(_repeated_battelUserDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishBattle other) {
      if (other == null) {
        return;
      }
      if (other.Mgsid != 0) {
        Mgsid = other.Mgsid;
      }
      if (other.Battleid != 0L) {
        Battleid = other.Battleid;
      }
      if (other.WinGrpID != 0) {
        WinGrpID = other.WinGrpID;
      }
      battelUserDataList_.Add(other.battelUserDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mgsid_ = (global::SSToCS.MsgID) input.ReadEnum();
            break;
          }
          case 16: {
            Battleid = input.ReadInt64();
            break;
          }
          case 24: {
            WinGrpID = input.ReadInt32();
            break;
          }
          case 34: {
            battelUserDataList_.AddEntriesFrom(input, _repeated_battelUserDataList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FinishBattle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BattleUserData : pb::IMessage<BattleUserData> {
        private static readonly pb::MessageParser<BattleUserData> _parser = new pb::MessageParser<BattleUserData>(() => new BattleUserData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BattleUserData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SSToCS.FinishBattle.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleUserData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleUserData(BattleUserData other) : this() {
          guid_ = other.guid_;
          heroguid_ = other.heroguid_;
          timeinsecond_ = other.timeinsecond_;
          ifEnd_ = other.ifEnd_;
          heroid_ = other.heroid_;
          runepage_ = other.runepage_;
          deadtimes_ = other.deadtimes_;
          herokills_ = other.herokills_;
          destorybuilding_ = other.destorybuilding_;
          diamondused_ = other.diamondused_;
          goldused_ = other.goldused_;
          lasthitnum_ = other.lasthitnum_;
          asskillnum_ = other.asskillnum_;
          herolv_ = other.herolv_;
          totalcp_ = other.totalcp_;
          ifAiRobot_ = other.ifAiRobot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BattleUserData Clone() {
          return new BattleUserData(this);
        }

        /// <summary>Field number for the "guid" field.</summary>
        public const int GuidFieldNumber = 1;
        private ulong guid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Guid {
          get { return guid_; }
          set {
            guid_ = value;
          }
        }

        /// <summary>Field number for the "heroguid" field.</summary>
        public const int HeroguidFieldNumber = 2;
        private ulong heroguid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Heroguid {
          get { return heroguid_; }
          set {
            heroguid_ = value;
          }
        }

        /// <summary>Field number for the "timeinsecond" field.</summary>
        public const int TimeinsecondFieldNumber = 3;
        private uint timeinsecond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Timeinsecond {
          get { return timeinsecond_; }
          set {
            timeinsecond_ = value;
          }
        }

        /// <summary>Field number for the "ifEnd" field.</summary>
        public const int IfEndFieldNumber = 4;
        private bool ifEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfEnd {
          get { return ifEnd_; }
          set {
            ifEnd_ = value;
          }
        }

        /// <summary>Field number for the "heroid" field.</summary>
        public const int HeroidFieldNumber = 5;
        private int heroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Heroid {
          get { return heroid_; }
          set {
            heroid_ = value;
          }
        }

        /// <summary>Field number for the "runepage" field.</summary>
        public const int RunepageFieldNumber = 6;
        private int runepage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Runepage {
          get { return runepage_; }
          set {
            runepage_ = value;
          }
        }

        /// <summary>Field number for the "deadtimes" field.</summary>
        public const int DeadtimesFieldNumber = 7;
        private uint deadtimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Deadtimes {
          get { return deadtimes_; }
          set {
            deadtimes_ = value;
          }
        }

        /// <summary>Field number for the "herokills" field.</summary>
        public const int HerokillsFieldNumber = 8;
        private uint herokills_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Herokills {
          get { return herokills_; }
          set {
            herokills_ = value;
          }
        }

        /// <summary>Field number for the "destorybuilding" field.</summary>
        public const int DestorybuildingFieldNumber = 9;
        private int destorybuilding_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Destorybuilding {
          get { return destorybuilding_; }
          set {
            destorybuilding_ = value;
          }
        }

        /// <summary>Field number for the "diamondused" field.</summary>
        public const int DiamondusedFieldNumber = 10;
        private long diamondused_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Diamondused {
          get { return diamondused_; }
          set {
            diamondused_ = value;
          }
        }

        /// <summary>Field number for the "goldused" field.</summary>
        public const int GoldusedFieldNumber = 11;
        private long goldused_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Goldused {
          get { return goldused_; }
          set {
            goldused_ = value;
          }
        }

        /// <summary>Field number for the "lasthitnum" field.</summary>
        public const int LasthitnumFieldNumber = 12;
        private int lasthitnum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lasthitnum {
          get { return lasthitnum_; }
          set {
            lasthitnum_ = value;
          }
        }

        /// <summary>Field number for the "asskillnum" field.</summary>
        public const int AsskillnumFieldNumber = 13;
        private int asskillnum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Asskillnum {
          get { return asskillnum_; }
          set {
            asskillnum_ = value;
          }
        }

        /// <summary>Field number for the "herolv" field.</summary>
        public const int HerolvFieldNumber = 14;
        private int herolv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Herolv {
          get { return herolv_; }
          set {
            herolv_ = value;
          }
        }

        /// <summary>Field number for the "totalcp" field.</summary>
        public const int TotalcpFieldNumber = 15;
        private int totalcp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Totalcp {
          get { return totalcp_; }
          set {
            totalcp_ = value;
          }
        }

        /// <summary>Field number for the "ifAiRobot" field.</summary>
        public const int IfAiRobotFieldNumber = 16;
        private bool ifAiRobot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IfAiRobot {
          get { return ifAiRobot_; }
          set {
            ifAiRobot_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BattleUserData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BattleUserData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Guid != other.Guid) return false;
          if (Heroguid != other.Heroguid) return false;
          if (Timeinsecond != other.Timeinsecond) return false;
          if (IfEnd != other.IfEnd) return false;
          if (Heroid != other.Heroid) return false;
          if (Runepage != other.Runepage) return false;
          if (Deadtimes != other.Deadtimes) return false;
          if (Herokills != other.Herokills) return false;
          if (Destorybuilding != other.Destorybuilding) return false;
          if (Diamondused != other.Diamondused) return false;
          if (Goldused != other.Goldused) return false;
          if (Lasthitnum != other.Lasthitnum) return false;
          if (Asskillnum != other.Asskillnum) return false;
          if (Herolv != other.Herolv) return false;
          if (Totalcp != other.Totalcp) return false;
          if (IfAiRobot != other.IfAiRobot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Guid != 0UL) hash ^= Guid.GetHashCode();
          if (Heroguid != 0UL) hash ^= Heroguid.GetHashCode();
          if (Timeinsecond != 0) hash ^= Timeinsecond.GetHashCode();
          if (IfEnd != false) hash ^= IfEnd.GetHashCode();
          if (Heroid != 0) hash ^= Heroid.GetHashCode();
          if (Runepage != 0) hash ^= Runepage.GetHashCode();
          if (Deadtimes != 0) hash ^= Deadtimes.GetHashCode();
          if (Herokills != 0) hash ^= Herokills.GetHashCode();
          if (Destorybuilding != 0) hash ^= Destorybuilding.GetHashCode();
          if (Diamondused != 0L) hash ^= Diamondused.GetHashCode();
          if (Goldused != 0L) hash ^= Goldused.GetHashCode();
          if (Lasthitnum != 0) hash ^= Lasthitnum.GetHashCode();
          if (Asskillnum != 0) hash ^= Asskillnum.GetHashCode();
          if (Herolv != 0) hash ^= Herolv.GetHashCode();
          if (Totalcp != 0) hash ^= Totalcp.GetHashCode();
          if (IfAiRobot != false) hash ^= IfAiRobot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Guid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Guid);
          }
          if (Heroguid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Heroguid);
          }
          if (Timeinsecond != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Timeinsecond);
          }
          if (IfEnd != false) {
            output.WriteRawTag(32);
            output.WriteBool(IfEnd);
          }
          if (Heroid != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Heroid);
          }
          if (Runepage != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Runepage);
          }
          if (Deadtimes != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Deadtimes);
          }
          if (Herokills != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Herokills);
          }
          if (Destorybuilding != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Destorybuilding);
          }
          if (Diamondused != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(Diamondused);
          }
          if (Goldused != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(Goldused);
          }
          if (Lasthitnum != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Lasthitnum);
          }
          if (Asskillnum != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(Asskillnum);
          }
          if (Herolv != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(Herolv);
          }
          if (Totalcp != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(Totalcp);
          }
          if (IfAiRobot != false) {
            output.WriteRawTag(128, 1);
            output.WriteBool(IfAiRobot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Guid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
          }
          if (Heroguid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Heroguid);
          }
          if (Timeinsecond != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeinsecond);
          }
          if (IfEnd != false) {
            size += 1 + 1;
          }
          if (Heroid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heroid);
          }
          if (Runepage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Runepage);
          }
          if (Deadtimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deadtimes);
          }
          if (Herokills != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Herokills);
          }
          if (Destorybuilding != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Destorybuilding);
          }
          if (Diamondused != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamondused);
          }
          if (Goldused != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Goldused);
          }
          if (Lasthitnum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lasthitnum);
          }
          if (Asskillnum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Asskillnum);
          }
          if (Herolv != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Herolv);
          }
          if (Totalcp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Totalcp);
          }
          if (IfAiRobot != false) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BattleUserData other) {
          if (other == null) {
            return;
          }
          if (other.Guid != 0UL) {
            Guid = other.Guid;
          }
          if (other.Heroguid != 0UL) {
            Heroguid = other.Heroguid;
          }
          if (other.Timeinsecond != 0) {
            Timeinsecond = other.Timeinsecond;
          }
          if (other.IfEnd != false) {
            IfEnd = other.IfEnd;
          }
          if (other.Heroid != 0) {
            Heroid = other.Heroid;
          }
          if (other.Runepage != 0) {
            Runepage = other.Runepage;
          }
          if (other.Deadtimes != 0) {
            Deadtimes = other.Deadtimes;
          }
          if (other.Herokills != 0) {
            Herokills = other.Herokills;
          }
          if (other.Destorybuilding != 0) {
            Destorybuilding = other.Destorybuilding;
          }
          if (other.Diamondused != 0L) {
            Diamondused = other.Diamondused;
          }
          if (other.Goldused != 0L) {
            Goldused = other.Goldused;
          }
          if (other.Lasthitnum != 0) {
            Lasthitnum = other.Lasthitnum;
          }
          if (other.Asskillnum != 0) {
            Asskillnum = other.Asskillnum;
          }
          if (other.Herolv != 0) {
            Herolv = other.Herolv;
          }
          if (other.Totalcp != 0) {
            Totalcp = other.Totalcp;
          }
          if (other.IfAiRobot != false) {
            IfAiRobot = other.IfAiRobot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Guid = input.ReadUInt64();
                break;
              }
              case 16: {
                Heroguid = input.ReadUInt64();
                break;
              }
              case 24: {
                Timeinsecond = input.ReadUInt32();
                break;
              }
              case 32: {
                IfEnd = input.ReadBool();
                break;
              }
              case 40: {
                Heroid = input.ReadInt32();
                break;
              }
              case 48: {
                Runepage = input.ReadInt32();
                break;
              }
              case 56: {
                Deadtimes = input.ReadUInt32();
                break;
              }
              case 64: {
                Herokills = input.ReadUInt32();
                break;
              }
              case 72: {
                Destorybuilding = input.ReadInt32();
                break;
              }
              case 80: {
                Diamondused = input.ReadInt64();
                break;
              }
              case 88: {
                Goldused = input.ReadInt64();
                break;
              }
              case 96: {
                Lasthitnum = input.ReadInt32();
                break;
              }
              case 104: {
                Asskillnum = input.ReadInt32();
                break;
              }
              case 112: {
                Herolv = input.ReadInt32();
                break;
              }
              case 120: {
                Totalcp = input.ReadInt32();
                break;
              }
              case 128: {
                IfAiRobot = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
